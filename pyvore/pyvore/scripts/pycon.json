[{"last_updated": [2012, 2, 28, 15, 0, 30, 1, 59, -1], "abstract": "<h2>Detailed Tutorial Outline</h2>\n<ul>\n<li>Django Overview and Basic Introduction</li>\n<li>Downloading &amp; Installing Django</li>\n<li>Creating a new project</li>\n<li>Choosing a database</li>\n<li>Creating a new application</li>\n<li>Installing &amp; Using Django contrib applications</li>\n<li>Overview of Django flow (i.e., URLconf expression, view function, HTTPResponse object, etc.)</li>\n<li>Generating Simple Django Views</li>\n<li>Configuring a URLConf for basic views</li>\n<li>Creating Django Templates (template syntax, common filters and tags, loops, etc)</li>\n<li>Creating &amp; using Template Context objects</li>\n<li>Introduction to Django Models</li>\n<li>Defining basic Django models</li>\n<li>Understanding basic model fields &amp; options </li>\n<li>Generating &amp; Reviewing Model SQL</li>\n<li>Adding data to a model</li>\n<li>Simple data retrieval using models</li>\n<li>Working with QuerySets (filters, slicing, ordering, common methods)</li>\n<li>Overview of Q objects)</li>\n<li>Using the Admin interface</li>\n<li>Using Generic views</li>\n<li>Access control with sessions &amp; users</li>\n</ul>", "presenters": "Chander Ganesan", "duration": 200, "id": 12, "end": [2012, 3, 7, 15, 20, 0, 2, 67, -1], "title": "Introduction to Django", "last_updated_iso": "2012-02-28T15:00:30.577303", "name": "Introduction to Django", "start": [2012, 3, 7, 12, 0, 0, 2, 67, -1], "description": "The Django framework is a fast, flexible, easy to learn, and easy to use framework for designing and deploying web sites and services using Python.  In this session, we'll cover the fundamentals of development with Django, generate a Django data model, and put together a simple web site using the framework.", "tags": "Tutorial, novice", "end_iso": "2012-03-07T15:20:00", "room_name": "Great American Meeting 3", "conf_key": "", "released": true, "authors": "Chander Ganesan", "start_iso": "2012-03-07T12:00:00", "room": "H3-Tutorials VIII", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/327/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 14, 59, 36, 1, 59, -1], "abstract": "<p>IPython started as a better interactive Python interpreter in 2001, but over the last decade it has grown into a rich and powerful set of interlocking tools aimed at maximizing developer productivity with Python while using the language interactively.</p>\n<p>Today, IPython consists of a kernel that executes the user code and controls the user's namespace, and a collection of tools to control this kernel either in-process or out-of-process thanks to a well-specified communications protocol implemented over ZeroMQ.  The kernel can do much more than execute user code, including introspection of objects in the user's namespace, detailed error reporting with rich tracebacks, history logging of inputs and outputs with an SQLite backend, a user-extensible system of commands for interactive control that don't collide with user variables, and much more.<br/>\n</p>\n<p>Our communications architecture allows these same features to be accessed via a variety of clients, each providing unique functionality tuned to a specific use case.  We expose a number of directly usable applications:</p>\n<ul>\n<li>\n<p>An interactive, terminal-based shell with many capabilities far beyond the default Python interactive interpreter (this is the default application opened by the <code>ipython</code> command that most users are familiar with).</p>\n</li>\n<li>\n<p>A Qt console that provides the look and feel of a terminal, but adds support for inline figures, graphical calltips, a persistent session that can survive crashes (even segfaults) of the kernel process, and more.  A user-based review of some of these features can be found <a href=\"http://stronginference.com/weblog/2011/7/15/innovations-in-ipython.html\">here</a>.</p>\n</li>\n<li>\n<p>A web-based notebook that can execute code and also contain rich text and figures, mathematical equations and arbitrary HTML.  This notebook controls the same kernel as the other two applications, but instead of offering a linear, terminal-like workflow, it presents a document-like view with cells where code is executed but that can be edited in-place, reordered, mixed with explanatory text and figures, etc.  This model is a kind of literate programming environment popular in scientific computing and pioneered by the Mathematica system, that allows for the creation of rich documents that combine computational experimentation and results with other explanatory elements.  A detailed review of this system can be found <a href=\"http://stronginference.com/innovations-in-ipython/\">here</a>.</p>\n</li>\n<li>\n<p>A high-performance, low-latency system for parallel computing that supports the control of a cluster of IPython engines communicating over ZeroMQ, with optimizations that minimize unnecessary copying of large objects (especially numpy arrays).  These engines can be controlled interactively while developing and doing exploratory work, or can run in batch mode either on a local machine or in a large cluster/supercomputing environment via a batch scheduler.</p>\n</li>\n</ul>\n<p>In this hands-on, in-depth tutorial, we will briefly describe IPython's architecture  and will then show how to use and configure each of the above components.  We will also discuss how to use the underlying IPython libraries in your own application to provide interactive control.<br/>\n</p>\n<p>An outline of the tutorial follows:</p>\n<ul>\n<li>Introductory description of the project and architecture.</li>\n<li>IPython basics: the magic command system, shell aliases, full shell access, the history system, variable caching, object introspection tools.</li>\n<li>Development workflow: combining the interpreter session with python files via the <code>%run</code> command.</li>\n<li>Effective use of IPython at the command-line for typical development tasks: timing, profiling, debugging.</li>\n<li>Embedding IPython in terminal applications.</li>\n<li>The IPython Qt console: unique features beyond the terminal.</li>\n<li>Embedding an IPython kernel in a GUI app to expose network-based interactive control.</li>\n<li>Configuring IPython: the profile and configuration system for multiple applications.</li>\n<li>The IPython notebook: interactive usage of the application, the IPython display protocol, defining custom display methods for your own objects, generating HTML and PDF output.</li>\n<li>Parallelism with IPython: basic architecture, interactive control of a cluster, standalone execution of applications, integration with MPI, blocking and asynchronous parallelism, execution in batch-controlled environments, IPython engines in the cloud (illustrated with Amazon EC2 instances).</li>\n<li>A short listing of other features not covered in this tutorial, as guidance for users to later learn about on their own.</li>\n</ul>\n<p>For full details about IPython including documentation, previous presentations and videos of talks, please see the <a href=\"http://ipython.org\">project website</a>.</p>", "presenters": "Fernando P\u00e9rez, Brian E. Granger, Min Ragan-Kelley", "duration": 200, "id": 8, "end": [2012, 3, 7, 15, 20, 0, 2, 67, -1], "title": "IPython in-depth: high-productivity interactive and parallel python", "last_updated_iso": "2012-02-28T14:59:36.114400", "name": "IPython in-depth: high-productivity interactive and parallel python", "start": [2012, 3, 7, 12, 0, 0, 2, 67, -1], "description": "IPython provides tools for interactive and parallel computing that are widely used in scientific computing, but can benefit any Python developer.\r\n\r\nWe will show how to use IPython in different ways, as: an interactive shell, an embedded shell, a graphical console, a network-aware VM in GUIs, a web-based notebook with code, graphics and rich HTML, and a high-level framework for parallel computing.", "tags": "Tutorial, experienced", "end_iso": "2012-03-07T15:20:00", "room_name": "Great American K", "conf_key": "", "released": true, "authors": "Fernando P\u00e9rez, Brian E. Granger, Min Ragan-Kelley", "start_iso": "2012-03-07T12:00:00", "room": "F2-Tutorials V", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/121/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 15, 0, 26, 1, 59, -1], "abstract": "<p>Pyramid is the web framework at the core of the Pylons Project. It\u2019s a \u201cpay only for what you eat\u201d framework. You can get started easily and learn new concepts as you go, and only if you need them. It\u2019s simple, well tested, well documented, and fast.</p>\n<p>Though it\u2019s in part inspired by Zope and uses concepts and software that may be familiar to Zope programmers, no prior Zope experience is required to use it. Also, unlike Zope, you don\u2019t need to understand many concepts and technologies fully before you can be truly productive.</p>\n<p>Pyramid is also inspired by Django and Pylons. It tries to learn valuable lessons from things that have gone well with different web frameworks and give the user great flexibility in applying them.</p>\n<p>This course will present Pyramid and lead you through the creation of a an application as the concepts from the framework are introduced. The extensive Pyramid documentation will be used as \u201ctext book\u201d.</p>\n<p>Proposed outline:</p>\n<ul>\n<li>Installation</li>\n<li>Scaffolds</li>\n<li>Persistence options</li>\n<li>URL dispatch</li>\n<li>Views</li>\n<li>View configuration</li>\n<li>Renderers</li>\n<li>Static views</li>\n<li>Security</li>\n<li>Declarative configuration</li>\n<li>Testing</li>\n<li>Deployment</li>\n</ul>", "presenters": "Carlos de la Guardia", "duration": 200, "id": 10, "end": [2012, 3, 7, 15, 20, 0, 2, 67, -1], "title": "Writing a Pyramid application", "last_updated_iso": "2012-02-28T15:00:26.213194", "name": "Writing a Pyramid application", "start": [2012, 3, 7, 12, 0, 0, 2, 67, -1], "description": "Pyramid is the web framework at the core of the Pylons Project. It's a \"pay only for what you eat\" framework. You can get started easily and learn new concepts as you go, and only if you need them. It's simple, well tested, well documented, and fast. This course will present Pyramid and lead you through the creation of a an application as the concepts from the framework are introduced.", "tags": "Tutorial, novice", "end_iso": "2012-03-07T15:20:00", "room_name": "Great American Meeting 1", "conf_key": "", "released": true, "authors": "Carlos de la Guardia", "start_iso": "2012-03-07T12:00:00", "room": "H1-Tutorials VI", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/150/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 3, 3, 9, 51, 5, 5, 63, -1], "abstract": "<h1>Abstract</h1>\n<h2>Objective</h2>\n<p>This tutorial provides an overview of techniques to improve the\nperformance of Python programs. The focus is on concepts such\nas profiling, diffrence of data structures and algorithms as well as\na selection of tools an libraries that help to speed up Python.</p>\n<h2>Intended Audience</h2>\n<p>Python programmers who would like concepts to improve performance.</p>\n<h2>Audience Level</h2>\n<p>Programmers with good Python knowledge.</p>\n<h2>Prerequisites</h2>\n<p>Please bring your laptop with the operating system of your choice (Linux, Mac OS X, Windows). In addition to Python 2.6 or 2.7, we need:</p>\n<ul>\n<li>RunSnakeRun (http://www.vrplumber.com/programming/runsnakerun)</li>\n<li>the Guppy_PE framework (http://guppy-pe.sourceforge.net)</li>\n<li>psyco (http://psyco.sourceforge.net, Python 2.6 only, version 1.5.2 or higher)</li>\n<li>pypy (http://pypy.org) and </li>\n<li>NumPy (http://numpy.scipy.org, version 1.2 or higher).</li>\n</ul>\n<h2>Method</h2>\n<p>This is a hands-on course. Students are strongly encouraged to work along with the trainer at the interactive prompt. There will be exercises the students need to do on their own. Experience shows that this active involvement is essential for an effective learning.</p>\n<h2>Outline</h2>\n<ul>\n<li>How fast is fast enough? (10 min)</li>\n<li>Optimization guidelines (10 min)<ul>\n<li>Premature optimization</li>\n<li>Optimization rules</li>\n<li>Seven steps for incremental optimization</li>\n</ul>\n</li>\n<li>Optimization strategy (30 min)<ul>\n<li>Measuring in stones</li>\n<li>Profiling CPU usage</li>\n<li>Profiling memory usage</li>\n</ul>\n</li>\n<li>Algorithms and Anti-patterns (40 min)<ul>\n<li>String concatenation</li>\n<li>List and generator comprehensions</li>\n<li>The right data structure</li>\n<li>Caching</li>\n</ul>\n</li>\n<li>The example (5 min)</li>\n<li>Testing speed (5 min)</li>\n<li>Pure Python (15 min)</li>\n<li>Meet Psyco, the JIT (5 min)</li>\n<li>Using PyPy  (15 min)</li>\n<li>NumPy for numeric arrays (10 min)</li>\n<li>Using multiple CPUs with multiprocessing (20 min)</li>\n<li>Combination of optimization strategies (10 min)</li>\n<li>Results of different example implementations (5 min)</li>\n</ul>", "presenters": "Mike M\u00fcller", "duration": 200, "id": 1, "end": [2012, 3, 7, 15, 20, 0, 2, 67, -1], "title": "Faster Python Programs through Optimization", "last_updated_iso": "2012-03-03T09:51:05.513878", "name": "Faster Python Programs through Optimization", "start": [2012, 3, 7, 12, 0, 0, 2, 67, -1], "description": "This tutorial provides an overview of techniques to improve the performance of Python programs. The focus is on concepts such as profiling, difference of data structures and algorithms as well as a selection of tools and libraries that help to speed up Python.", "tags": "Tutorial, intermediate", "end_iso": "2012-03-07T15:20:00", "room_name": "Mission City B1, B2, B3", "conf_key": "", "released": true, "authors": "Mike M\u00fcller", "start_iso": "2012-03-07T12:00:00", "room": "D1-Tutorials I", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/245/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 3, 2, 20, 57, 50, 4, 62, -1], "abstract": "<p>The tutorial works like this: There's a short presentation. A short testcase for you to complete. Rinse/repeat until we run out of time. Hopefully you'll walk away from this tutorial knowing how to write Python programs.</p>\n<p>Course will cover:</p>\n<pre><code>REPL\nTypes\nMutable/Immutable\nGetting help\nLists\nDictionaries\nFunctions\nWhitespace\nConditionals &amp; booleans\nIteration\nSlicing\nI/O\nClasses\nExceptions\nPackaging and layout\n</code></pre>\n<p>There are short testcases to allow participants to practice concepts.</p>\n<p>All participants will receive an ebook modeled on the tutorial, slides, a handout and assignments, as well as prizes for completion of assignments.</p>", "presenters": "Matt Harrison", "duration": 200, "id": 7, "end": [2012, 3, 7, 15, 20, 0, 2, 67, -1], "title": "Hands-on Beginning Python", "last_updated_iso": "2012-03-02T20:57:50.729171", "name": "Hands-on Beginning Python", "start": [2012, 3, 7, 12, 0, 0, 2, 67, -1], "description": "We're going to mesh TDD, a desire to learn Python and Brazilian BBQ. Bring your laptop (having Python 2.x installed (will note 3.x differences)). This is hands on! You will program! It is assumed that you know how to program but perhaps not in Python. You start hungry and leave stuffed. We assume you know nothing and will stuff you with enough Python to be dangerous. ", "tags": "Tutorial, novice", "end_iso": "2012-03-07T15:20:00", "room_name": "Great American J", "conf_key": "", "released": false, "authors": "Matt Harrison", "start_iso": "2012-03-07T12:00:00", "room": "F1-Tutorials IV", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/203/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<ul>\n<li>What is event driven programming</li>\n<li>What is it an alternative to</li>\n<li>What are its advantages</li>\n<li>How does an event loop work</li>\n<li>Build one step by step to demonstrate</li>\n<li>Demonstrate a server which can handle many clients</li>\n<li>Demonstrate a client which can run in the same event loop</li>\n<li>Demonstrate timed events in the event loop</li>\n<li>How are event handlers connected to form a program</li>\n<li>Callback functions</li>\n<li>Deferreds</li>\n<li>Generator tricks - inlineCallbacks</li>\n<li>Coroutines - stackless, corotwine</li>\n<li>More</li>\n</ul>", "presenters": "Jean-Paul Calderone", "duration": 200, "id": 6, "end": [2012, 3, 7, 15, 20, 0, 2, 67, -1], "title": "Introduction to Event Driven Programming Using Twisted", "last_updated_iso": "2012-02-28T13:42:58.966366", "name": "Introduction to Event Driven Programming Using Twisted", "start": [2012, 3, 7, 12, 0, 0, 2, 67, -1], "description": "This tutorial introduces programmers with a basic Python skills to the concepts\r\nand techniques of event driven programming.  The focus is on understanding an\r\nevent loop and handling the events related to TCP connections.  Twisted is\r\nintroduced as a re-usable event loop implementation and the abstract concepts of\r\nevent driven programming are related to specific uses of the Twisted library.", "tags": "Tutorial, experienced", "end_iso": "2012-03-07T15:20:00", "room_name": "Mission City M2", "conf_key": "", "released": false, "authors": "Jean-Paul Calderone", "start_iso": "2012-03-07T12:00:00", "room": "D3-Tutorials III", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/362/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 14, 57, 4, 1, 59, -1], "abstract": "<p>Bayesian statistical methods are becoming more common and more important, but there are not many resources to help beginners get started.  People who know Python can use their programming skills to get a head start.</p>\n<p>I will present simple programs that demonstrate the concepts of Bayesian statistics, and apply them to a range of example problems.  Participants will work hands-on with example code and practice on example problems.</p>\n<p>Students should have at least basic level Python and basic statistics.  If you learned about Bayes\u2019s Theorem and probability distributions at some time, that\u2019s enough, even if you don\u2019t remember it!  Students should be comfortable with logarithms and plotting data on a log scale.</p>\n<p>Students should bring a laptop with Python 2.x and matplotlib.  You can work in any environment; you just need to be able to download a Python program and run it.</p>\n<p>Outline:</p>\n<ol>\n<li>Bayes\u2019s theorem. </li>\n<li>Representing probability distributions.</li>\n<li>Bayesian estimation.</li>\n<li>Biased coins and student test scores.</li>\n<li>Censored data.</li>\n<li>The locomotive / German tank problem.</li>\n<li>Hierarchical models and the hidden species problem.</li>\n</ol>", "presenters": "Allen Downey", "duration": 200, "id": 5, "end": [2012, 3, 7, 15, 20, 0, 2, 67, -1], "title": "Bayesian statistics made (as) simple (as possible)", "last_updated_iso": "2012-02-28T14:57:04.450550", "name": "Bayesian statistics made (as) simple (as possible)", "start": [2012, 3, 7, 12, 0, 0, 2, 67, -1], "description": "This tutorial is an introduction to Bayesian statistics using Python.  My goal is to help participants understand the concepts and solve real problems.  We will use material from my book, Think Stats: Probability and Statistics for Programmers (O\u2019Reilly Media).", "tags": "Tutorial, experienced", "end_iso": "2012-03-07T15:20:00", "room_name": "Mission City M3", "conf_key": "", "released": true, "authors": "Allen Downey", "start_iso": "2012-03-07T12:00:00", "room": "D2-Tutorials II", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/10/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 15, 1, 30, 1, 59, -1], "abstract": "<p>The class will consist of six 25-minute lessons, each of which features a 10-minute lecture, 10 minutes of interesting exercises, and a 5-minute wrap-up in which the instructor recaps the exercises by giving his own answers. The focus will be on keeping things simple so that each building block is grasped clearly. The six lessons will be laid out something like this:</p>\n<p><strong>1. Tables, INSERT, and SELECT.</strong></p>\n<ul>\n<li>Create a simple sqlite3 table with the DB-API interface provided by the Python Standard Library.</li>\n<li>Use INSERT to fill the table with data.</li>\n<li>Concatenate INSERT statements to increase the speed and reduce the number of database round-trips required during a bulk data load.</li>\n<li>Read back table rows with SELECT.</li>\n<li>Add dynamic expressions to the rows returned by SELECT.</li>\n<li>Quote values correct to avoid SQL injection attacks.</li>\n<li>Avoid \u201cgotchya\u201d differences between Python and SQL data types, with particular attention to Unicode, date-times, and the behavior of NULL verses None.</li>\n</ul>\n<p><strong>2. WHERE and the importance of being indexed.</strong></p>\n<ul>\n<li>Use WHERE to select specific rows from a table.</li>\n<li>Run quick performance checks that demonstrate that WHERE usually requires the entire table to be read into memory and scanned.</li>\n<li>Add a simple index to shortcut specific WHERE clauses and return their results more quickly.</li>\n<li>Check whether an index is being used, and learn several reasons why apparently useful indexes get ignored by the database.</li>\n<li>Add aggregate indexes that yield performance increases for very specific WHERE clauses.</li>\n<li>Investigate how our data distrubtion \u2014 for example, whether a particular column has thousands of different values, or merely thousands of instances of a handful of values \u2014 can impact the wisdom and performance of various query plans.</li>\n</ul>\n<p><strong>3. FOREIGN KEY and JOIN</strong></p>\n<ul>\n<li>Use a foreign key to relate rows in one table with rows in another.</li>\n<li>Add JOIN clauses to a SELECT statement to assemble query-result rows that are built from pieces of several tables.</li>\n<li>Diagnose performance problems with JOIN by observing the cost of full <em>N\u00d7M</em> scans that compare every row from one table with every row from another.</li>\n<li>Think about the indexes that a query plan could take advantage of behind the scenes.</li>\n<li>Create indexes that let the database take shortcuts when doing common JOINs.</li>\n</ul>\n<p><strong>4. Post-processing.</strong></p>\n<ul>\n<li>Use ORDER BY to control the rows which are returned first by a given query.</li>\n<li>Combine OFFSET and LIMIT to return \"paged\" results suitable for displaying on a limited display, like a web page or GUI window</li>\n<li>Observe how indexes affect the performance of ORDER BY / LIMIT.</li>\n<li>Use GROUP BY to support aggregate operations such as sums, averages, maxima, and minima.</li>\n<li>Filter aggregate results with the HAVING clause.</li>\n<li>The exercises will present small Python scripts that post-process data, and ask students to write the equivalent GROUP BY / HAVING expressions to remove the need for the Python post-processing.</li>\n</ul>\n<p><strong>5. Modifying tables.</strong></p>\n<ul>\n<li>Write WHERE clauses for UPDATE and DELETE using the same patterns already learned for SELECT.</li>\n<li>Use transactions in combinations with UPDATE and DELETE to prevent inconsistent database states from becoming visible to other clients.</li>\n</ul>\n<p><strong>6. ORMs, Objects, and Tables.</strong></p>\n<ul>\n<li>Create tables of objects using the SQLAlchemy declarative schema in combination with classes.</li>\n<li>Understand the main differences between SQLAlchemy and the Django ORM, including the idea of explicit saves versus a unit-of-work pattern.</li>\n<li>See how ORM query syntaxes mix down to SQL statements.</li>\n<li>Determine when an ORM will be helpful, versus when straight SQL migth be a better solution for a particular problem.</li>\n</ul>\n<p>Of course, mastery of these topics cannot be conveyed in a single three-hour course! The tutorial will have succeeded if students learn the main moving parts that are involved in a relationally-backed Python application, if they have gotten some practice with SQL and the kind of tasks that it seeks to simplify, and if they have a foundation upon which to build when they are next faced with writing or modifying Python code that interfaces with a SQL database.</p>", "presenters": "Brandon Rhodes", "duration": 200, "id": 11, "end": [2012, 3, 7, 15, 20, 0, 2, 67, -1], "title": "SQL for Python Developers", "last_updated_iso": "2012-02-28T15:01:30.708421", "name": "SQL for Python Developers", "start": [2012, 3, 7, 12, 0, 0, 2, 67, -1], "description": "Relational databases are often the bread-and-butter of large-scale data storage, yet they are often poorly understood by Python programmers. Organizations even split programmers into SQL and front-end teams, each of which jealously guards its turf. These tutorials will take what you already know about Python programming, and advance into a new realm: SQL programming and database design.", "tags": "Tutorial, experienced", "end_iso": "2012-03-07T15:20:00", "room_name": "Great American Meeting 2", "conf_key": "", "released": true, "authors": "Brandon Rhodes", "start_iso": "2012-03-07T12:00:00", "room": "H2-Tutorials VII", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/353/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 3, 2, 21, 1, 54, 4, 62, -1], "abstract": "<p>We will build a collaborative todo list system that will show you how to utilize  Python, Redis/ZeroMQ, Socket.io, and GEvent for real-time communication.</p>\n<p>We will focus on the following topics:</p>\n<ul>\n<li>Using a wsgi framework to build a RESTful interface and hooking up socket.io to it.</li>\n<li>Using socketio and redis/zeromq for subscribing to named channels and communicating in real-time over websockets.</li>\n<li>Gevent</li>\n<li>Testing your real-time application</li>\n<li>Deployment and Monitoring</li>\n</ul>\n<h2 id=\"a_rough_outline\">A rough outline</h2>\n<h3 id=\"gevent_30_min\">GEvent (30 min)</h3>\n<p>Intro to GEvent and co-routines, what it is, how it works, the benefits of using it, and how simple it is to wrap your mind around a co-routine vs the callback methodology of threads.</p>\n<h3 id=\"zeromq__redis__30_min\">ZeroMQ / Redis  (30 min)</h3>\n<p>Intro to pub/sub, the communication model we'll use for our realtime communication and how to utilize ZeroMQ or Redis to achieve this.</p>\n<h3 id=\"socketio_and_backbonejs_30_min\">Socket.IO and Backbone.js (30 min)</h3>\n<p>Discussion of Polling, Longpolling, Flash sockets, and web sockets and the benefits of each and how Socket.IO lets us not care. I will discuss how to get socket.io client side working with the server side.</p>\n<h3 id=\"testing_15_min\">Testing (15 min)</h3>\n<p>We will cover how to architect your co-routine based applications to make them easily testable and how to utilize mock to make things easier. We will cover the gotcha's of testing GEvent based code.</p>\n<h3 id=\"deployment_15_min\">Deployment (15 min)</h3>\n<p>The final portion of the tutorial we discuss deployment and how to manage and monitor your WSGI server that is using GEvent patched libraries. This will cover basics on which webservers to use as well as exception handling.</p>\n<p>We leave 30minutes of leeway to further discussion in a certain area that the students are most interested in as well as for questions on things specific that they feel I may not have covered so far.</p>\n<p>I will provide the non-realtime code base for the application we will be working on and we will start from there and slowly add in support for the realtime communication as we discuss the technologies needed.</p>\n<p>Most introductions to the web with gevent just show a basic chat application which leaves a lot of questions about where to go next once you are building a real application and I hope to cover all of those in this tutorial.</p>", "presenters": "John Anderson", "duration": 200, "id": 16, "end": [2012, 3, 7, 19, 40, 0, 2, 67, -1], "title": "The real-time web with co-routines", "last_updated_iso": "2012-03-02T21:01:54.366900", "name": "The real-time web with co-routines", "start": [2012, 3, 7, 16, 20, 0, 2, 67, -1], "description": "Learn how to build fast and interactive web applications using a wsgi compliant web framework and co-routines.\r\n\r\nUtilizing Redis/ZeroMQ, Socket.IO, and GEvent you will learn how to build a responsive and concurrent web app while maintaining good test coverage.", "tags": "Tutorial, experienced", "end_iso": "2012-03-07T19:40:00", "room_name": "Great American K", "conf_key": "", "released": false, "authors": "John Anderson", "start_iso": "2012-03-07T16:20:00", "room": "F2-Tutorials V", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/107/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 3, 2, 21, 2, 5, 4, 62, -1], "abstract": "<h2 id=\"basics_of_parsing\">Basics of parsing</h2>\n<ul>\n<li>The website is the API</li>\n<li>HTML is a mess, but we can parse it anyway</li>\n<li>Why regular expressions are a bad idea</li>\n<li>Extracting information, using XPath, CSS selectors, and the BeautifulSoup API</li>\n<li>Expect exceptions: How to handle errors</li>\n</ul>\n<h2 id=\"basics_of_crawling\">Basics of crawling</h2>\n<ul>\n<li>A quick review of HTTP</li>\n<li>Why cookies are necessary for maintaining a session</li>\n<li>How servers can track you</li>\n<li>How to submit forms with mechanize</li>\n</ul>\n<h2 id=\"debugging_the_web\">Debugging the web</h2>\n<ul>\n<li>Comparing FireBug and Chrome's DOM Inspector</li>\n<li>The \"Net\" tab</li>\n<li>Using a logging HTTP proxy to record traffic</li>\n</ul>\n<h2 id=\"counter-measures_and_how_to_circumvent_them\">Counter-measures, and how to circumvent them</h2>\n<ul>\n<li>JavaScript</li>\n<li>Hidden form fields (e.g., Django CSRF)</li>\n<li>CAPTCHAs</li>\n<li>IP address limitations</li>\n</ul>\n<h2 id=\"how_to_cover_your_scraping_code_with_tests\">How to cover your scraping code with tests</h2>\n<ul>\n<li>Why you should store snapshotted pages</li>\n<li>Using mock objects to avoid network I/O</li>\n<li>Using a fake getPage for Twisted</li>\n</ul>\n<h2 id=\"parallelism\">Parallelism</h2>\n<ul>\n<li>A quick tour of different models:</li>\n<li>Twisted</li>\n<li>gevent</li>\n<li>celery</li>\n</ul>\n<h2 id=\"handling_javascript\">Handling JavaScript</h2>\n<ul>\n<li>Automating a full web browser with Selenium RC</li>\n<li>Running JavaScript within Python using python-spidermonkey</li>\n</ul>\n<h2 id=\"conclusion\">Conclusion</h2>\n<ul>\n<li>Use your power for good, not evil.</li>\n<li>Q&amp;A</li>\n</ul>", "presenters": "Asheesh Laroia", "duration": 200, "id": 19, "end": [2012, 3, 7, 19, 40, 0, 2, 67, -1], "title": "Web scraping: Reliably and efficiently pull data from pages that don't expect it", "last_updated_iso": "2012-03-02T21:02:05.998224", "name": "Web scraping: Reliably and efficiently pull data from pages that don't expect it", "start": [2012, 3, 7, 16, 20, 0, 2, 67, -1], "description": "Exciting information is trapped in web pages and behind HTML forms. In this tutorial, you'll learn how to parse those pages and when to apply advanced techniques that make scraping faster and more stable.\r\n\r\nWe'll cover parallel downloading with Twisted, gevent, and others; analyzing sites behind SSL; driving JavaScript-y sites with Selenium; and evading common anti-scraping techniques.", "tags": "Tutorial, experienced", "end_iso": "2012-03-07T19:40:00", "room_name": "Great American Meeting 3", "conf_key": "", "released": false, "authors": "Asheesh Laroia", "start_iso": "2012-03-07T16:20:00", "room": "H3-Tutorials VIII", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/317/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 15, 0, 5, 1, 59, -1], "abstract": "<p>The class will begin with a brief overview of MongoDB and its Python driver PyMongo. We will cover basic operations using PyMongo, including data manipulation, querying, and GridFS. Students will install MongoDB and PyMongo as part of this section.</p>\n<p>We will then describe the design philosophy and setup of Ming, a SQLAlchemy-inspired object-document mapper (ODM) for MongoDB developed at SourceForge. </p>\n<p>Next we will cover the base-level implementation of Ming, including schema design, the session and datastore, lazy migrations, data polymorphism, and GridFS support. We will also cover effective MongoDB index design, querying, and updating techniques, and how to use these with Ming. Students will install Ming as a part of this section, and have exercises covering schema design, lazy migrations, and GridFS.</p>\n<p>The final segment will cover the object-document mapper portion of Ming. We will cover the unit of work design pattern, object relations, ODM-level polymorphism, and how to drop down to the base layer (or even down to pymongo) when you really need to. This section will include exercises in designing your ODM model and effectively using the unit-of-work session.</p>\n<p>This talk targets Python 2.6-2.7 and MongoDB 2.0. Students should have Python 2.6 or 2.7 installed on their machines prior to the class and should be comfortable using virtualenv and pip or easy_install to install packages.</p>", "presenters": "Rick Copeland, Bernie Hackett", "duration": 200, "id": 18, "end": [2012, 3, 7, 19, 40, 0, 2, 67, -1], "title": "MongoDB and Python", "last_updated_iso": "2012-02-28T15:00:05.387921", "name": "MongoDB and Python", "start": [2012, 3, 7, 16, 20, 0, 2, 67, -1], "description": "This intermediate-level class will teach you techniques using the popular NoSQL database MongoDB, its driver PyMongo, and the object-document mapper Ming to write maintainable, high-performance, and scalable applications. We will cover everything you need to become an effective Ming/MongoDB developer from basic PyMongo queries to high-level object-document mapping setups in Ming.\r\n", "tags": "Tutorial, experienced", "end_iso": "2012-03-07T19:40:00", "room_name": "Great American Meeting 2", "conf_key": "", "released": true, "authors": "Rick Copeland, Bernie Hackett", "start_iso": "2012-03-07T16:20:00", "room": "H2-Tutorials VII", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/186/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 3, 2, 20, 55, 47, 4, 62, -1], "abstract": "<ul>\n<li>\n<p>Introduction</p>\n</li>\n<li>\n<p>So you did the official Django tutorial, and read a bunch of\n    documentation: now what?</p>\n</li>\n<li>\n<p>You still don't know how to customize the ORM or the admin, build\n    complex forms, manipulate the innards of the template system,\n    etc.; common real-world use cases where you need this stuff</p>\n</li>\n<li>\n<p>Time to peek under the hood and see how all these bits really\n    work</p>\n</li>\n<li>\n<p>The ORM</p>\n</li>\n<li>\n<p>Models, Managers, QuerySets, Queries and routers: understanding how Django\n    turns Python method calls into database queries</p>\n</li>\n<li>\n<p>The lowest level: database backends and routers</p>\n<ul>\n<li>\n<p>Teaching Django how to talk to your database</p>\n</li>\n<li>\n<p>How multi-database setups work</p>\n</li>\n</ul>\n</li>\n<li>\n<p>The Query class</p>\n</li>\n<li>\n<p>Understanding QuerySet</p>\n<ul>\n<li>\n<p>What really happens when you call all those query methods</p>\n</li>\n<li>\n<p>When is a container not a container? Laziness, cloning and other\n  things which can affect the results you see</p>\n</li>\n<li>\n<p>Little-known, but incredibly useful built-in querying options</p>\n</li>\n<li>\n<p>Adding new query methods by writing your own QuerySet</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Managers</p>\n<ul>\n<li>\n<p>The basics: writing and using custom managers</p>\n</li>\n<li>\n<p>Multiple managers, and confined query schemes</p>\n</li>\n<li>\n<p>Hierarchies of manager classes to encapsulate query patterns</p>\n</li>\n<li>\n<p>Tailoring custom managers and custom QuerySets to each other</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Models</p>\n<ul>\n<li>\n<p>How the Model metaclass works</p>\n</li>\n<li>\n<p>Customization hooks</p>\n</li>\n<li>\n<p>The Options class and the model loading and introspection API</p>\n</li>\n<li>\n<p>Custom model fields</p>\n</li>\n<li>\n<p>The model instance lifecycle</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Model-level data validation</p>\n<ul>\n<li>\n<p>Key methods</p>\n</li>\n<li>\n<p>The validation chain</p>\n</li>\n<li>\n<p>Limitations, and when to use model validation versus form validation</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Model inheritance</p>\n<ul>\n<li>\n<p>Supported flavors</p>\n</li>\n<li>\n<p>When to use each</p>\n</li>\n</ul>\n</li>\n<li>\n<p>The forms library</p>\n</li>\n<li>\n<p>Forms, Fields and Widgets</p>\n<ul>\n<li>\n<p>How data is parsed and passed inside a form</p>\n</li>\n<li>\n<p>How a form is rendered</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Understanding the validation chain</p>\n<ul>\n<li>\n<p>Validating field contents in the field itself</p>\n</li>\n<li>\n<p>Validating field contents in the form</p>\n</li>\n<li>\n<p>Validating the form as a whole</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Model-based forms</p>\n<ul>\n<li>\n<p>How a model definition is translated into a form class</p>\n</li>\n<li>\n<p>Overriding at the form level</p>\n</li>\n<li>\n<p>Overriding at the model field level</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Advanced form usage</p>\n<ul>\n<li>\n<p>Class-level and instance-level customization: fields versus\n  base_fields</p>\n</li>\n<li>\n<p>Implementing custom logic through form constructors</p>\n</li>\n<li>\n<p>Building a form dynamically, part 1: factory functions and\n  closures</p>\n</li>\n<li>\n<p>Building a form dynamically, part 2: letting Python construct\n  types for you on the fly</p>\n</li>\n</ul>\n</li>\n<li>\n<p>The template system</p>\n</li>\n<li>\n<p>The template API</p>\n<ul>\n<li>\n<p>How Django finds templates</p>\n</li>\n<li>\n<p>Custom template loaders and alternate template systems</p>\n</li>\n<li>\n<p>Template lifecycle</p>\n</li>\n</ul>\n</li>\n<li>\n<p>How a Django template is parsed</p>\n<ul>\n<li>\n<p>Template, NodeList and Node classes</p>\n</li>\n<li>\n<p>Special cases: blocks and includes</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Template rendering</p>\n<ul>\n<li>\n<p>What really goes on inside the Context class</p>\n</li>\n<li>\n<p>How Nodes and NodeLists render</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Advanced template tags</p>\n<ul>\n<li>\n<p>Accessing the template parser from inside a tag</p>\n</li>\n<li>\n<p>Working at the level of NodeLists instead of individual Nodes</p>\n</li>\n</ul>\n</li>\n<li>\n<p>The request-processing pipeline</p>\n</li>\n<li>\n<p>Understanding the HttpRequest object</p>\n</li>\n<li>\n<p>The middleware chain</p>\n</li>\n<li>\n<p>How Django's URL dispatcher works</p>\n</li>\n<li>\n<p>Exception processing and customized error handling</p>\n</li>\n<li>\n<p>The view layer</p>\n</li>\n<li>\n<p>Callables all the way down: what a view really <em>is</em></p>\n</li>\n<li>\n<p>Class-based views</p>\n<ul>\n<li>\n<p>Inside Django's base view classes</p>\n</li>\n<li>\n<p>How the generic views work</p>\n</li>\n<li>\n<p>What the mixins do</p>\n</li>\n<li>\n<p>When class-based views are appropriate</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Chaining and composing views</p>\n<ul>\n<li>\n<p>Views which invoke views which invoke views</p>\n</li>\n<li>\n<p>Writing and applying view decorators</p>\n</li>\n</ul>\n</li>\n<li>\n<p>The admin application</p>\n</li>\n<li>\n<p>The AdminSite class</p>\n<ul>\n<li>\n<p>Dispatch within an admin site</p>\n</li>\n<li>\n<p>Important non-model-specific views</p>\n</li>\n<li>\n<p>How models are registered and unregistered</p>\n</li>\n<li>\n<p>Writing and using custom AdminSite instances</p>\n</li>\n</ul>\n</li>\n<li>\n<p>The ModelAdmin class, part 1: overview</p>\n<ul>\n<li>\n<p>Dispatch within a specific model's admin</p>\n</li>\n<li>\n<p>Model-specific admin views</p>\n</li>\n<li>\n<p>How inline models are tracked</p>\n</li>\n</ul>\n</li>\n<li>\n<p>The ModelAdmin class, part 2: customization</p>\n<ul>\n<li>\n<p>Useful attributes of ModelAdmin</p>\n</li>\n<li>\n<p>Annotating a model with hints for the admin</p>\n</li>\n<li>\n<p>ModelAdmin methods for customizing permissions and authorization</p>\n</li>\n<li>\n<p>ModelAdmin methods for customizing forms and database\n  interaction</p>\n</li>\n</ul>\n</li>\n</ul>", "presenters": "James Bennett", "duration": 200, "id": 2, "end": [2012, 3, 7, 19, 40, 0, 2, 67, -1], "title": "Django in Depth", "last_updated_iso": "2012-03-02T20:55:47.474019", "name": "Django in Depth", "start": [2012, 3, 7, 16, 20, 0, 2, 67, -1], "description": "A tutorial that goes beyond all other Django tutorials; we'll dive deep into the guts of the framework, and learn how each commonly-used component -- ORM, templates, HTTP handling, views and the admin -- work from the bottom up, covering both public and internal APIs in excruciating detail.", "tags": "Tutorial, experienced", "end_iso": "2012-03-07T19:40:00", "room_name": "Mission City B1, B2, B3", "conf_key": "", "released": true, "authors": "James Bennett", "start_iso": "2012-03-07T16:20:00", "room": "D1-Tutorials I", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/458/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 3, 4, 7, 53, 57, 6, 64, -1], "abstract": "<h2>What the tutorial will teach students</h2>\n<p>The tutorial will teach the mechanics of the most important features of pandas. It will be focused on the nuts and bolts of the two main data structures, Series (1D) and DataFrame (2D), as they relate to a variety of common data handling problems in Python. The tutorial will be supplemented by a collection of scripts and example data sets for the users to run while following along with the material. As such a significant part of the tutorial will be spend doing interactive data exploration and working examples from within the IPython console.</p>\n<p>The tutorial will also teach participants best practices for structuring data in memory and the do's and don'ts of high performance computing with large data sets in Python. For participants who have never used IPython, this will also provide a gentle introduction to interactive scientific computing with IPython.</p>\n<h2>Prerequisites</h2>\n<p>Participants should have:</p>\n<ul>\n<li>Intermediate to advanced Python experience with a solid grasp of the built-in\n  Python data structures and types: strings, lists, dicts, tuples</li>\n<li>Basic experience with NumPy: ndarray objects, data types, and vectorized\n  operations on arrays</li>\n</ul>\n<h2>Laptop prerequisites</h2>\n<ul>\n<li>Python 2.7</li>\n<li>IPython &gt;= 0.11</li>\n<li>A text editor of some kind (we will be running code within IPython)</li>\n<li>Latest official releases of NumPy, SciPy, and matplotlib</li>\n<li>A functioning GUI backend (\"ipython --pylab\" should not error)</li>\n<li>Latest release of pandas and dependencies</li>\n<li>python-dateutil</li>\n</ul>\n<p>Optional, but not required\n- PyTables\n- scikits.statsmodels</p>\n<h2>Outline</h2>\n<ul>\n<li>\n<p>Brief overview of IPython, necessary for rest of tutorial</p>\n<ul>\n<li>Tab completion, introspection</li>\n<li>Getting help</li>\n<li>Running scripts</li>\n<li>Interactive debugger</li>\n</ul>\n</li>\n<li>\n<p>Intro to indexed data structures</p>\n<ul>\n<li>Series: 1d vector with labels</li>\n<li>DataFrame: 2d tabular data structure with row and column labels</li>\n<li>Common construction patterns, dicts of arrays, nested dicts, etc.</li>\n</ul>\n</li>\n<li>\n<p>Indexing mechanics</p>\n<ul>\n<li>Selecting data by label</li>\n<li>Selecting subsets of data and slicing</li>\n<li>Advanced label-based indexing</li>\n<li>What if you have no index?</li>\n</ul>\n</li>\n<li>\n<p>DataFrame: dict-like and matrix-like container for data</p>\n<ul>\n<li>Fundamental data types</li>\n<li>Column insertion and deletion</li>\n<li>Converting column types, e.g. strings to datetimes, and other casting</li>\n<li>Transposing and limitations</li>\n</ul>\n</li>\n<li>\n<p>Loading and storing data from various sources</p>\n<ul>\n<li>Flat files (CSV, delimited)</li>\n<li>Parser options: indexing, date parsing</li>\n<li>SQL databases</li>\n<li>PyTables / HDF5: HDFStore class (helpful to have PyTables installed)</li>\n</ul>\n</li>\n<li>\n<p>Iterating over data structures</p>\n<ul>\n<li>Iteration basics</li>\n<li>Efficiently iterating over DataFrame rows and columns</li>\n</ul>\n</li>\n<li>\n<p>Data alignment</p>\n<ul>\n<li>Binary operations between Series, DataFrame objects</li>\n<li>Automatic and explicit data alignment</li>\n<li>The <code>reindex</code> and <code>align</code> functions</li>\n</ul>\n</li>\n<li>\n<p>Data Analysis 101</p>\n<ul>\n<li>Handing missing data</li>\n<li>Descriptive statistics</li>\n<li>General function application with <code>apply</code></li>\n</ul>\n</li>\n<li>\n<p>Hierarchical (multi-level) indexing</p>\n<ul>\n<li>Creating hierarchical indexes from flat files</li>\n<li>Creating your own hierarchical index (MultiIndex) objects</li>\n<li>Selecting data groups by levels</li>\n</ul>\n</li>\n<li>\n<p>Joining and merging data sets</p>\n<ul>\n<li>Joining on index</li>\n<li>Joining single or multiple keys</li>\n<li>Relationship to analogous SQL operations or Excel VLOOKUP-type operations</li>\n</ul>\n</li>\n<li>\n<p>Reshaping and pivoting data</p>\n<ul>\n<li>Creating Excel / spreadsheet-style pivot tables using DataFrame</li>\n<li>Reshaping operations, integration with hierarchical indexing</li>\n<li>larry, datarray</li>\n</ul>\n</li>\n<li>\n<p>Time series functionality</p>\n<ul>\n<li>Date range generation</li>\n<li>Frequency conversions</li>\n<li>Resamping and interpolation</li>\n<li>Plotting</li>\n<li>Moving window functions</li>\n</ul>\n</li>\n<li>\n<p>GroupBy: working with naturally grouped datasets</p>\n<ul>\n<li>Grouping by DataFrame columns and arbitrary keys</li>\n<li>Iterating over groups</li>\n<li>Aggregating groups</li>\n<li>Transforming groups</li>\n<li>More general / advanced function application and combining results</li>\n<li>Non-trivial examples<ul>\n<li>Time-series related aggregation</li>\n<li>Random sampling from groups</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Relating GroupBy to pivoting and reshaping</p>\n<ul>\n<li>GroupBy operations expressed as reshaping-based operations</li>\n<li>Building some more intuition for stacking / unstacking</li>\n</ul>\n</li>\n<li>\n<p>Data visualization</p>\n<ul>\n<li>Integration with matplotlib</li>\n</ul>\n</li>\n<li>\n<p>Other topics</p>\n<ul>\n<li>Integration with statsmodels for statistical modeling</li>\n</ul>\n</li>\n</ul>", "presenters": "Wes McKinney", "duration": 200, "id": 13, "end": [2012, 3, 7, 19, 40, 0, 2, 67, -1], "title": "Data analysis in Python with pandas ", "last_updated_iso": "2012-03-04T07:53:57.970583", "name": "Data analysis in Python with pandas ", "start": [2012, 3, 7, 16, 20, 0, 2, 67, -1], "description": "The tutorial will give a hands-on introduction to manipulating and analyzing large and small structured data sets in Python using the pandas library. While the focus will be on learning the nuts and bolts of the library's features, I also aim to demonstrate a different way of thinking regarding structuring data in memory for manipulation and analysis.\r\n", "tags": "Tutorial, intermediate", "end_iso": "2012-03-07T19:40:00", "room_name": "Mission City M3", "conf_key": "", "released": true, "authors": "Wes McKinney", "start_iso": "2012-03-07T16:20:00", "room": "D2-Tutorials II", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/427/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 59, 1, 59, -1], "abstract": "<h1>Summary</h1>\n<p>This tutorial is intended to bring somebody with Python experience but limited or no experience using graph-based algorithms to a place where they: </p>\n<ol>\n<li>Understand the basics of graph theory and why it can be helpful;</li>\n<li>Are familiar with the available tools for dealing with graphs; </li>\n<li>Recognize how to model a problem in terms of a graph; and</li>\n<li>Have a first hands-on experience applying the theory and the tools to solve an interesting real-world problem.</li>\n</ol>\n<p>To do this, the tutorial is divided into four sections, each corresponding to one of the objectives above. Each portion will have a hands-on exercise pertaining to the exact subject, with part 4 as a crowning workshop bringing together various skills and points raised throughout the session; after having a few minutes to work on their own code and ask questions, the class as a whole will walk through a solution.</p>\n<h1>Part 1: Graph Theory (50 mins)</h1>\n<ul>\n<li>Theoretical background (15 mins): What are graphs? Where do they show up? Why do we care?</li>\n<li>Reasoning about graphs (35 mins): Nodes, edges, cycles, and traversals; operations on graphs.</li>\n<li>Practical exercise: Path operations and the filesystem tree</li>\n</ul>\n<h1>Part 2: Graph Tools (35 mins)</h1>\n<ul>\n<li>Representing graphs in Python (15 mins)</li>\n<li>Dict-based representation</li>\n<li>NetworkX, iGraph, etc.</li>\n<li>Reading and writing graphs (10 mins)</li>\n<li>In-memory representations</li>\n<li>On-disk representations</li>\n<li>Graph databases</li>\n<li>Visualizing graphs (10 mins)</li>\n<li>Matplotlib, Gephi, etc.</li>\n<li>Practical exercises: </li>\n<li>Converting the filesystem tree to use a graph representation</li>\n<li>Using the same representation to model a map </li>\n</ul>\n<h3 id=\"10_min_break\">10 min break</h3>\n<h1>Part 3: Graphs in Practice (35 mins)</h1>\n<ul>\n<li>Recognizing word problems that suggest a graph-based solution (5 mins)</li>\n<li>Problem modeling (15 mins): What are your nodes? What are your edges? </li>\n<li>Performing computations on graphs (15 mins): Graph algorithms in code; Gremlin; flow-based programming</li>\n<li>Practical exercises: </li>\n<li>Build a graph representing a module dependency graph</li>\n<li>Answering questions by traversing the graph</li>\n<li>High-level visualization</li>\n</ul>\n<h1>Part 4: Hands-on with Graphs (50 mins)</h1>\n<ul>\n<li>Problem set: Analysis of Python-Dev</li>\n<li>Data cleaning (10 mins)</li>\n<li>Graph construction (10 mins)</li>\n<li>Centrality (10 mins)</li>\n<li>Clique analysis (10 mins)</li>\n<li>Visualization (10 mins)</li>\n</ul>", "presenters": "Van Lindberg", "duration": 200, "id": 14, "end": [2012, 3, 7, 19, 40, 0, 2, 67, -1], "title": "Graph Analysis from the Ground Up", "last_updated_iso": "2012-02-28T13:42:59.080302", "name": "Graph Analysis from the Ground Up", "start": [2012, 3, 7, 16, 20, 0, 2, 67, -1], "description": "Graphs are a fundamental datatype - but typical developers don't get as much exposure to using and working with graphs as with other datatypes like tables and queues. This is a from-the-ground up working session; by the end, attendees should have the tools and experience to model and analyze problems with graphs.", "tags": "Tutorial, novice", "end_iso": "2012-03-07T19:40:00", "room_name": "Mission City M2", "conf_key": "", "released": false, "authors": "Van Lindberg", "start_iso": "2012-03-07T16:20:00", "room": "D3-Tutorials III", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/228/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 15, 0, 35, 1, 59, -1], "abstract": "<p>We aim to teach people how to use performance tools available for PyPy as well as to understand PyPy's performance characteristics. We'll explain how different parts of PyPy interact (JIT, the garbage collector, the virtual machine runtime) and how to measure which part is eating your time. We'll give you a tour with jitviewer which is a crucial tool for understanding how your Python got compiled to assembler and whether it's performing well. We also plan to show potential pitfalls and usage patterns in the Python language that perform\nbetter or worse in the case of PyPy.</p>\n<p>We'll also briefly mention how to get your application running on PyPy and how to avoid common pitfalls there, like reference counting or relying on C modules.</p>\n<p>This tutorial is intended for people familiar with Python who have performance\nproblems, no previous experience with PyPy is needed. We ask people to come\nwith their own problems and we'll provide some example ones. Attendees should\nhave the latest version of PyPy preinstalled on their laptops.</p>", "presenters": "Maciej Fijalkowski, Armin Rigo, Alex Gaynor", "duration": 200, "id": 17, "end": [2012, 3, 7, 19, 40, 0, 2, 67, -1], "title": "How to get the most out of your PyPy", "last_updated_iso": "2012-02-28T15:00:35.554293", "name": "How to get the most out of your PyPy", "start": [2012, 3, 7, 16, 20, 0, 2, 67, -1], "description": "For many applications PyPy can provide performance benefits right out of the box. However, little details can push your application to perform much better.  In this tutorial we'll give you insights on how to push pypy to it's limites. We'll focus on understanding the performance characteristics of PyPy, and learning the analysis tools in order to maximize your applications performance.", "tags": "Tutorial, experienced", "end_iso": "2012-03-07T19:40:00", "room_name": "Great American Meeting 1", "conf_key": "", "released": true, "authors": "Maciej Fijalkowski, Armin Rigo, Alex Gaynor", "start_iso": "2012-03-07T16:20:00", "room": "H1-Tutorials VI", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/243/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 3, 2, 20, 58, 3, 4, 62, -1], "abstract": "<p>Tutorial will be in the the form of short lecture, short assignment to practice the concepts.</p>\n<p>Attendees should come with a laptop and Python 2.x (3.x differences will be noted).</p>\n<p>Tutorial will cover:</p>\n<pre><code>Testing (unittest and doctest)\nFunctional Programming\nFunctions\nClosures\nDecorators\nClass decorators\nProperties\nContext Managers\nList comprehensions\nIterator pattern\nGenerators\n</code></pre>\n<p>Materials include an ebook covering the material, slides, handout and assignment code. Prizes to be awarded for completion of assignment.</p>", "presenters": "Matt Harrison", "duration": 200, "id": 15, "end": [2012, 3, 7, 19, 40, 0, 2, 67, -1], "title": "Hands-on Intermediate Python", "last_updated_iso": "2012-03-02T20:58:03.192440", "name": "Hands-on Intermediate Python", "start": [2012, 3, 7, 16, 20, 0, 2, 67, -1], "description": "Are you new to Python and want to learn how to step it up to the next level? Have you wondered about functional programming, closures, decorators, context managers, generators or list comprehensions and when you should use them and how to test them? This hands-on tutorial will cover these intermediate subjects in detail, by explaining the theory behind them then walking through examples.", "tags": "Tutorial, experienced", "end_iso": "2012-03-07T19:40:00", "room_name": "Great American J", "conf_key": "", "released": false, "authors": "Matt Harrison", "start_iso": "2012-03-07T16:20:00", "room": "F1-Tutorials IV", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/204/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 15, 0, 11, 1, 59, -1], "abstract": "<p>In many ways Python is very similar to other programming languages.  However, in a few sometimes subtle ways it is quite different, and many software developers new to Python, after their initial successes, hit a plateau and can't figure out how to get past it.  Others don't hit or perceive a plateau, but still find some of Python's features a little mysterious.  This tutorial will help deconstruct your incorrect assumptions about Python and pull away the mists of confusion.</p>\n<p>If in your use of Python you sometimes feel like an outsider, like you're missing the inside jokes, or like you have most of the puzzle pieces but they don't quite fit together yet, this may be a good tutorial for you.</p>\n<p>After completing this tutorial you'll have a deeper understanding of many Python features.  Here are some of the topics we'll cover:</p>\n<ul>\n<li>How namespaces really work, after which you'll understand:<ul>\n<li>most of the differences between variables in other languages and Python, including</li>\n<li>why Python has neither pass-by-value nor pass-by-reference function call semantics, or why sometimes variables passed to a function can be changed by it, and sometimes they cannot.</li>\n</ul>\n</li>\n<li>Iterables, iterators, and the iterator protocol, including how to add it to a class</li>\n<li>How generators can make your code easier to read and understand</li>\n<li>Creating classes without a class statement in order to better understand how they work</li>\n<li>Bound versus unbound methods and interesting uses of the former</li>\n<li>How and why you might want to create or use a partial function</li>\n<li>Other use-cases of functions as first-class citizens</li>\n<li>Unpacking and packing arguments with * and ** on function call and definition</li>\n</ul>\n<h3 id=\"attendee_requirements\">Attendee Requirements</h3>\n<p>Bring a laptop computer with a recent version of Python 2.7 or Python\n3 installed.</p>\n<h3 id=\"prerequisites\">Prerequisites</h3>\n<p>Intermediate ability in Python and little or no fear of iterators, generators, classes, methods, and how to call a function that's stored in a data structure.</p>", "presenters": "Stuart Williams", "duration": 200, "id": 22, "end": [2012, 3, 8, 15, 20, 0, 3, 68, -1], "title": "Python Epiphanies", "last_updated_iso": "2012-02-28T15:00:11.357696", "name": "Python Epiphanies", "start": [2012, 3, 8, 12, 0, 0, 3, 68, -1], "description": "This tutorial is for software developers who've been using Python with success for a while but are looking for a deeper understanding of the language.  It demystifies a number of language features that are often misunderstood.", "tags": "Tutorial, experienced", "end_iso": "2012-03-08T15:20:00", "room_name": "Great American J", "conf_key": "", "released": true, "authors": "Stuart Williams", "start_iso": "2012-03-08T12:00:00", "room": "F1-Tutorials IV", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/276/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>This tutorial will work through a series of real-world examples, showing how an understanding of the tools built into the Python interpreter or included in the standard library can be combined to solve difficult problems clearly and Pythonically. We will also discuss when and how to reach beyond the standard library when needed to address difficult algorithmic and optimization problems. This can be taken as a stand-alone session or in conjunction with the second session; the two sessions will be complementary.</p>", "presenters": "Raymond Hettinger", "duration": 200, "id": 3, "end": [2012, 3, 8, 15, 20, 0, 3, 68, -1], "title": "Advanced Python I", "last_updated_iso": "2012-02-28T13:42:57.362813", "name": "Advanced Python I", "start": [2012, 3, 8, 12, 0, 0, 3, 68, -1], "description": "Have your Python skills have hit a plateau? Come learn from Python core developer and consultant Raymond Hettinger about the tips and tricks needed to move up to the next level.", "tags": "Tutorial, experienced", "end_iso": "2012-03-08T15:20:00", "room_name": "Mission City B1, B2, B3", "conf_key": "", "released": false, "authors": "Raymond Hettinger", "start_iso": "2012-03-08T12:00:00", "room": "D1-Tutorials I", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/418/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 3, 2, 20, 58, 25, 4, 62, -1], "abstract": "<p>At EuroPython 2011 I ran a very hands-on tutorial for High Performance Python techniques. This updated tutorial will cover:</p>\n<ul>\n<li>profiling with cProfile, run_snake and line_profiler</li>\n<li>PyPy</li>\n<li>Cython</li>\n<li>numpy with and without vectors</li>\n<li>NumExpr</li>\n<li>ShedSkin Py-&gt;C++ compiler</li>\n<li>multiprocessing for multi-core</li>\n<li>ParallelPython for multi-machine </li>\n<li>pyCUDA demos</li>\n</ul>\n<p>Here's a 55 page <a href=\"http://ianozsvald.com/2011/07/25/high-performance-python-tutorial-v0-2-from-europython-2011/\">PDF write-up</a> of the EuroPython material with links to github source.</p>\n<p>I plan to expand the original material and to maybe also cover other tools like execnet and PyPy-numpy.</p>", "presenters": "Ian Ozsvald", "duration": 200, "id": 20, "end": [2012, 3, 8, 15, 20, 0, 3, 68, -1], "title": "High Performance Python I", "last_updated_iso": "2012-03-02T20:58:25.756207", "name": "High Performance Python I", "start": [2012, 3, 8, 12, 0, 0, 3, 68, -1], "description": "At EuroPython 2011 I ran a very hands-on tutorial for High Performance Python techniques. This updated tutorial will cover profiling, PyPy, Cython, numpy, NumExpr, ShedSkin, multiprocessing, ParallelPython and pyCUDA. Here's a 55 page PDF write-up of the EuroPython material: http://ianozsvald.com/2011/07/25/high-performance-python-tutorial-v0-2-from-europython-2011/", "tags": "Tutorial, experienced", "end_iso": "2012-03-08T15:20:00", "room_name": "Mission City M3", "conf_key": "", "released": true, "authors": "Ian Ozsvald", "start_iso": "2012-03-08T12:00:00", "room": "D2-Tutorials II", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/174/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 14, 59, 44, 1, 59, -1], "abstract": "<p>The tutorial will start with Katie Cunningham giving an introduction to video games, covering the basic components of a game, and some general game genres. Some basic tropes in modern games will be explored, as well as pitfalls to avoid in making a game for a today\u2019s audience. Genres will be paired with inexpensive/free examples that can be explored by the tutorial attendees later.</p>\n<p>The baton will then pass to Richard Jones who will walk through the practicalities of building a simple video game from scratch, starting with presenting one approach to structuring the game code to keep it sane. He will talk about what libraries are available and then focus on the facilities present in the library used in the tutorial.</p>\n<p>We will then walk through the development of a simple game during which the attendees will code the game. Once the game is developed we will talk about potential further development that possibilities and use the remaining tutorial time to encourage and assist attendees in their efforts to do so.</p>\n<p>The game developed will cover the key game-writing skills of controlling what appears on the screen (including animation), loading resources, handling user input and simulating the environment within the game.</p>\n<p>Participants <strong>should</strong> be familiar with Python, and <strong>must</strong> have pygame version 1.9+ installed. We will not have time to deal with installation and compatibility issues so participants <strong>must</strong> check their laptops can run pygame applications.</p>", "presenters": "Richard Jones, Katie Cunningham", "duration": 200, "id": 26, "end": [2012, 3, 8, 15, 20, 0, 3, 68, -1], "title": "Introduction to Game Development", "last_updated_iso": "2012-02-28T14:59:44.477529", "name": "Introduction to Game Development", "start": [2012, 3, 8, 12, 0, 0, 3, 68, -1], "description": "This tutorial will walk the attendees from some introductory game development theory (what makes a good game) and through development of a simple game (how to make a good game) with time left over for some experimentation and exploration of different types of games.", "tags": "Tutorial, novice", "end_iso": "2012-03-08T15:20:00", "room_name": "Great American Meeting 3", "conf_key": "", "released": true, "authors": "Richard Jones, Katie Cunningham", "start_iso": "2012-03-08T12:00:00", "room": "H3-Tutorials VIII", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/37/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 29, 8, 44, 48, 2, 60, -1], "abstract": "<p>Python projects can succeed or fail based on their documentation.\nThanks to Sphinx, Python now has a \"documentation framework\" that\nprovides convenient indexing and automatic syntax highlighting, and can\nalso integrate your documentation with your code (your documentation can\nbe run as a test, and your class and function docstrings can become your\nreference documentation).  Students will be given an undocumented sample\nPython package, and be lead through exercises that result, by the end of\nthe tutorial, in their giving the package a full tutorial and reference\nmanual.  Deployment and theming will also be taught.</p>\n<p>Besides a 15-minute introduction\nand 15 minutes for questions and discussion at the end,\nthe tutorial will be organized in six 25-minute sessions\nwhich each involve a short lecture and then an interactive exercise that asks the students\nto apply what they have just learned.\nHere are the major topics covered by each of the six sessions:</p>\n<ol>\n<li>The reStructuredText markup language and its syntax; the standard doctools; and the two different conventions that Sphinx can support for laying projects out as directories and files.</li>\n<li>The Sphinx documentation build process on both Unix and Windows; how to arrange your project documentation in a way that will make sense to novice, experienced, and expert users alike; and how Sphinx supports connections between different pages of documentation.</li>\n<li>Running code examples in the documentation as doctests; the pros and cons of pulling docstrings from the code as API documentation (and how to do it if it proves necessary); and including non-doctest full code listings in the documentation.</li>\n<li>Referencing headings in the same document; cross-referencing between documents; making class and method names automatically link to their entry in the API documentation; and how to make code objects appear in the index.</li>\n<li>Theming with custom HTML and CSS, for students who happen to know web design; plugging in pre-made Sphinx themes; and how to integrate Sphinx into an entire web site for their product.</li>\n<li>Shipping documentation with your package on PyPI; installing it readthedocs.org; making sure that documentation gets included with a binary install; using a version control source browser to view documentation directly in their project trunk; and deploying Sphinx to a web site.</li>\n</ol>\n<p>The Sphinx approach will be linked to other successful documentation systems in our computing heritage, most notably in the practices it shares in common with the Unix Documenter's Workbench (DWB) of the 1970s.</p>", "presenters": "Brandon Rhodes", "duration": 200, "id": 25, "end": [2012, 3, 8, 15, 20, 0, 3, 68, -1], "title": "Documenting Your Project With Sphinx", "last_updated_iso": "2012-02-29T08:44:48.289515", "name": "Documenting Your Project With Sphinx", "start": [2012, 3, 8, 12, 0, 0, 3, 68, -1], "description": "Python projects can succeed or fail because of their documentation.\r\nThanks to Sphinx, Python now has a \u201cdocumentation framework\u201d with\r\nindexing, syntax highlighting, and integration with your code.\r\nStudents will be given a small undocumented Python package,\r\nand during the exercises they will give the package\r\na tutorial and reference manual.\r\nPlus: deployment and theming!", "tags": "Tutorial, novice", "end_iso": "2012-03-08T15:20:00", "room_name": "Great American Meeting 2", "conf_key": "", "released": true, "authors": "Brandon Rhodes", "start_iso": "2012-03-08T12:00:00", "room": "H2-Tutorials VII", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/355/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 3, 3, 9, 50, 52, 5, 63, -1], "abstract": "<h1>Abstract</h1>\n<h2>Target Audience</h2>\n<p>This tutorial is for Python users who would like to create nice 2d plots with\nPython.</p>\n<h2>Audience Level</h2>\n<p>Students should have a working knowledge of Python.\nNumPy knowledge is helpful but not required.</p>\n<h2>Prerequisites</h2>\n<p>Please bring your laptop with the operating system of your choice (Linux, Mac OS X, Windows). In addition to Python 2.6 or 2.7, we need:\n- a current versions of matplotlib (http://matplotlib.sourceforge.net)\n- IPython (http://ipython.org) and \n- NumPy (http://numpy.scipy.org).</p>\n<h2>Method</h2>\n<p>This is a hands-on course. Students are strongly encouraged to work along with the trainer at the interactive prompt. There will be exercises the students need to do on their own. Experience shows that this active involvement is essential for an effective learning.</p>\n<h2>Content</h2>\n<p>The library matplotlib provides many different types of diagrams from within Python with only few lines of code. Examples are used to exercise the use of this library. The tutorial provides an overview how to create plots with matplotlib. IPython in combination with pylab from matplotlib provides an interactive environment for fast testing of ideas. We will be using this for most of the tutorial.</p>\n<p>With a simple plot we learn how to add axis labels, titles and a legend. The GUI offers zooming, panning, changing of plot sizes and other interactive ways to modify the plot. We will use Python to change properties of existing plots such as line colors, marker symbols, or line styles. There are several ways how to place text on plots. You will learn about the different coordinate systems relative to the plot, the canvas or the figure. Another topic are ticks, where to put them and how to format them to achieve publication-quality plots. The concepts of figures, subplots, and axes and how they relate to each other will be explained with examples.</p>\n<p>matplotlib offers many different types of plots. The tutorial introduces several of them with an example. A more advanced topic will be creating your own plot types. We will build a stacked plot type. Finally, we will create a small animation to explore the possibilities to visualize changes. </p>\n<h2>Outline</h2>\n<ul>\n<li>Introduction (5 min)</li>\n<li>IPython (5 min)</li>\n<li>pylab (5 min)</li>\n<li>Simple plots (20 min)</li>\n<li>Properties (15 min)</li>\n<li>Text (20 min)</li>\n<li>Ticks (25 min)</li>\n<li>Figures, subplots, and axes (25 min)</li>\n<li>Other types of plots (10 min)</li>\n<li>The class library (15 min)</li>\n<li>Creating New Plot Types (20 min)</li>\n<li>Animations (15 min)</li>\n</ul>", "presenters": "Mike M\u00fcller", "duration": 200, "id": 24, "end": [2012, 3, 8, 15, 20, 0, 3, 68, -1], "title": "Plotting with matplotlib", "last_updated_iso": "2012-03-03T09:50:52.898336", "name": "Plotting with matplotlib", "start": [2012, 3, 8, 12, 0, 0, 3, 68, -1], "description": "When it comes to plotting with Python many people think about matplotlib.\r\nIt is widely used and provides a simple interface for creating a wide variety\r\nof plots from very simple diagrams to sophisticated animations.\r\nThis tutorial is a hands-on introduction that teaches the basics of matplotlib.\r\nStudents will learn how to create publication-ready plots with just a few lines\r\nof Python. \r\n", "tags": "Tutorial, novice", "end_iso": "2012-03-08T15:20:00", "room_name": "Great American Meeting 1", "conf_key": "", "released": true, "authors": "Mike M\u00fcller", "start_iso": "2012-03-08T12:00:00", "room": "H1-Tutorials VI", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/238/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 3, 5, 21, 1, 26, 0, 65, -1], "abstract": "<h1 id=\"abstract\">Abstract</h1>\n<p>How processes, threads, coroutines, and non-blocking IO work from the operating system through code implementation and design principles to optimize Python programs. \u00a0The difference between parallelism and concurrency and when to use each.</p>\n<p>The premise is that to make an informed decision you need to know what is happening under the hood. \u00a0Once you understand the low level functionality, you can make the correct decision in the design phase.</p>\n<p>The emphasis is on practical application to solve real world problems.</p>\n<h1 id=\"outline\">Outline</h1>\n<ul>\n<li>How the operating system handles traps and interrupts</li>\n<li>Scheduling</li>\n<li>Processes</li>\n<li>Threads</li>\n<li>The GIL</li>\n<li>Generators</li>\n<li>What is a coroutine?</li>\n<li>What is a Python coroutine?</li>\n<li>Blocking/Non-blocking I/O.</li>\n<li>Parallelism versus Concurrency</li>\n<li>How do these work with CPython, Pypy, and Stackless</li>\n<li>Greenlets and libevent (gevent)</li>\n<li>Design principles</li>\n<li>Example networked application</li>\n<li>Performance results</li>\n<li>What are other the other options?</li>\n</ul>", "presenters": "Bob Hancock", "duration": 200, "id": 23, "end": [2012, 3, 8, 15, 20, 0, 3, 68, -1], "title": "Optimize Performance and Scalability with Parallelism and Concurrency", "last_updated_iso": "2012-03-05T21:01:26.609863", "name": "Optimize Performance and Scalability with Parallelism and Concurrency", "start": [2012, 3, 8, 12, 0, 0, 3, 68, -1], "description": "From how the operating system handles your requests through design principles on how to use concurrency and parallelism to optimize your program's performance and scalability.  We will cover processes, threads, generators, coroutines, non-blocking IO, and the gevent library.", "tags": "Tutorial, experienced", "end_iso": "2012-03-08T15:20:00", "room_name": "Great American K", "conf_key": "", "released": true, "authors": "Bob Hancock", "start_iso": "2012-03-08T12:00:00", "room": "F2-Tutorials V", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/91/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 3, 2, 21, 1, 41, 4, 62, -1], "abstract": "<p>SNA techniques are derived from sociological and social-psychological theories and take into account the whole network (or, in case of very large networks such as Twitter -- a large segment of the network). Thus, we may arrive at results that may seem counter-intuitive -- e.g. that Justin Bieber (7.5 mil. followers) and Lady Gaga (7.2 mil. followers) have relatively little actual influence despite their celebrity status -- while a middle-of-the-road blogger with 30K followers is able to generate tweets that \"go viral\" and result in millions of impressions. </p>\n<p>In this tutorial, we will conduct social network analysis of a real dataset, from gathering and cleaning data to analysis and visualization of results. We will use Python and a set of open-source libraries, including NetworkX, NumPy and Matplotlib. </p>\n<p>Outline:</p>\n<ul>\n<li>\n<p>Introduction. Why should we do this? What is the data like? Why is this different from other techniques? What can we learn?</p>\n</li>\n<li>\n<p>Centralities: Degree, closeness, betweenness, PageRank, Klout Score</p>\n</li>\n<li>\n<p>Beyond Klout Score: Finding communities of interest, finding clusters in networks</p>\n</li>\n<li>\n<p>Information diffusion in networks -- how do things go viral?</p>\n</li>\n</ul>", "presenters": "Maksim Tsvetovat", "duration": 200, "id": 21, "end": [2012, 3, 8, 15, 20, 0, 3, 68, -1], "title": "Social Network Analysis with Python", "last_updated_iso": "2012-03-02T21:01:41.303974", "name": "Social Network Analysis with Python", "start": [2012, 3, 8, 12, 0, 0, 3, 68, -1], "description": "Social Network data permeates our world -- yet we often don't know what to do with it. In this tutorial, I will introduce both theory and practice of Social Network Analysis -- gathering, analyzing and visualizing data using Python and other open-source tools. I will walk the attendees through an entire project, from gathering and cleaning data to presenting results.\r\n\r\n", "tags": "Tutorial, experienced", "end_iso": "2012-03-08T15:20:00", "room_name": "Mission City M2", "conf_key": "", "released": true, "authors": "Maksim Tsvetovat", "start_iso": "2012-03-08T12:00:00", "room": "D3-Tutorials III", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/15/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 59, 1, 59, -1], "abstract": "<p>In this tutorial, I will cover how to write very fast Python code for data analysis including making use of NumPy and using GPUs.  I will largely focus on writing extensions to Python using hand-wrapping and Cython but will touch also on using tools like weave, Instant, ShedSkin and compare them to PyPy.   I will also spend the last part of the tutorial on using GPUs with Python and discuss the performance trade-offs of the technology.  This will be a high-level overview of the space with deep dives in Cython and GPUs </p>\n<p>Outline: </p>\n<ul>\n<li>Brief Introduction to NumPy, SciPy and array-oriented computing with Python including exercises (1 hour)</li>\n<li>Introduction to hand-wrapping and extending Python (1 hour)</li>\n<li>Detailed description of Cython and how to use it to connect to machine-compiled code (1 hour)</li>\n<li>Detailed description of GPUs and how to use them best with NumPy (45 minutes)</li>\n<li>Summary and overview of using Python to write super fast code (15 minutes)</li>\n</ul>", "presenters": "Travis Oliphant", "duration": 200, "id": 27, "end": [2012, 3, 8, 19, 40, 0, 3, 68, -1], "title": "High Performance Python II", "last_updated_iso": "2012-02-28T13:42:59.129557", "name": "High Performance Python II", "start": [2012, 3, 8, 16, 20, 0, 3, 68, -1], "description": "In this tutorial, I will cover how to write very fast Python code for data analysis.  I will briefly introduce NumPy and illustrate how fast code for Python is written in SciPy using tools like Fwrap / F2py and Cython.   I will also describe interesting new approaches to creating fast code that is leading changes to NumPy on a fundamental level.  ", "tags": "Tutorial, experienced", "end_iso": "2012-03-08T19:40:00", "room_name": "Mission City M3", "conf_key": "", "released": false, "authors": "Travis Oliphant", "start_iso": "2012-03-08T16:20:00", "room": "D2-Tutorials II", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/343/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>This tutorial will be a hands on approach to learning natural language processing using <a href=\"http://www.nltk.org/\" title=\"NLTK\">NLTK</a>, the Natural Language ToolKit. We will cover everything from tokenizing sentences to phrase extraction, from splitting words to training your own text classifiers for sentiment analysis. Please come prepared with NLTK already <a href=\"http://www.nltk.org/download\" title=\"Download NLTK\">installed</a> so we can dive into the code &amp; data immediately.</p>\n<h2>Hour 1: Tokenization, Stemming &amp; Corpora</h2>\n<p>Tokenization &amp; familiarity with corpus readers and models are required knowledge before you can get into the more interesting aspects of NLTK. This first hour will include:</p>\n<ul>\n<li>an overview of modules &amp; data</li>\n<li>loading pickled models</li>\n<li>sentence &amp; word tokenization</li>\n<li>stemming &amp; lemmatization</li>\n<li>an overview wordnet and other included corpora</li>\n</ul>\n<h2>Hour 2: Part-of-Speech Tagging &amp; Chunking/NER</h2>\n<p>Using tokenization and a working knowledge of corpus readers &amp; pickled models, we'll dive into part-of-speech tagging and chunking/NER, including:</p>\n<ul>\n<li>using a part-of-speech tagger</li>\n<li>an overview of tags and tagged corpora</li>\n<li>training a custom tagger with <a href=\"https://github.com/japerk/nltk-trainer\" title=\"\">nltk-trainer</a></li>\n<li>using a chunker for phrase extraction and named entity recognition</li>\n<li>an overview of chunked corpora</li>\n<li>training a custom chunker with <a href=\"https://github.com/japerk/nltk-trainer\" title=\"\">nltk-trainer</a></li>\n</ul>\n<h2>Hour 3: Text Classification &amp; Sentiment Analysis</h2>\n<p>After using classifiers for training part-of-speech taggers and chunkers, this final hour will explain text classification in greater detail with:</p>\n<ul>\n<li>an overview of classified corpora</li>\n<li>text feature extraction</li>\n<li>an overview of classification algorithms &amp; when to use them</li>\n<li>training a sentiment analysis classifier on movie reviews with <a href=\"https://github.com/japerk/nltk-trainer\" title=\"\">nltk-trainer</a></li>\n<li>using a classifier for sentiment analysis</li>\n<li>hierarchical classification for sentiment analysis</li>\n<li>binary vs multi-label classification</li>\n</ul>\n<h2>Wrapping Up</h2>\n<p>Now that you know how to use NLTK to process some of the included English corpora, we'll wrap up by covering:</p>\n<ul>\n<li>non-english corpora included with NLTK</li>\n<li>other Python libraries for NLP</li>\n<li>custom corpus creation</li>\n</ul>", "presenters": "Jacob Perkins", "duration": 200, "id": 28, "end": [2012, 3, 8, 19, 40, 0, 3, 68, -1], "title": "Introduction to NLTK", "last_updated_iso": "2012-02-28T13:42:57.421540", "name": "Introduction to NLTK", "start": [2012, 3, 8, 16, 20, 0, 3, 68, -1], "description": "Learn the basics of natural language processing with NLTK, the Natural Language ToolKit. First we'll cover tokenization, stemming and wordnet. Next we'll get into part-of-speech tagging, chunking & named entity recognition. Then we'll close with text classification and sentiment analysis. You'll walk out with new super-powers and an appreciation of the difficulties of analyzing human language.", "tags": "Tutorial, experienced", "end_iso": "2012-03-08T19:40:00", "room_name": "Mission City M2", "conf_key": "", "released": false, "authors": "Jacob Perkins", "start_iso": "2012-03-08T16:20:00", "room": "D3-Tutorials III", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/199/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 59, 1, 59, -1], "abstract": "<h1>Requirements</h1>\n<p>Students must have a laptop with the Chef gem and git installed. Install instructions will sent out before the class.</p>\n<h1>Agenda</h1>\n<ul>\n<li>Devops and Chef philosophy</li>\n<li>Chef basics</li>\n<li>Basic resources</li>\n<li>Data bags</li>\n<li>Environments</li>\n<li>Intro to Ruby for Chef</li>\n<li>Fabric</li>\n</ul>", "presenters": "Noah Kantrowitz", "duration": 200, "id": 30, "end": [2012, 3, 8, 19, 40, 0, 3, 68, -1], "title": "DevOps for Python: Doing More With Less", "last_updated_iso": "2012-02-28T13:42:59.148492", "name": "DevOps for Python: Doing More With Less", "start": [2012, 3, 8, 16, 20, 0, 3, 68, -1], "description": "The world of infrastructure as code is becoming far more pervasive and many Python developers are trying to find a way to get started. This class will get you up and running with Chef and Fabric to manage your systems be they in the cloud or under your desk.", "tags": "Tutorial, experienced", "end_iso": "2012-03-08T19:40:00", "room_name": "Great American K", "conf_key": "", "released": false, "authors": "Noah Kantrowitz", "start_iso": "2012-03-08T16:20:00", "room": "F2-Tutorials V", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/286/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 14, 59, 49, 1, 59, -1], "abstract": "<p>The demand for software engineers with Data Analytics and Machine Learning skills is rapidly growing and Python / Numpy is one of the best environments for quickly prototyping scalable data-centric applications or interactively exploring your data especially thanks to tools such as <a href=\"http://ipython.org\">IPython</a> and <a href=\"http://matplotlib.sourceforge.net\">Matplotlib</a>.</p>\n<p><a href=\"http://scikit-learn.sourceforge.net\">scikit-learn</a> is a very active open source project that implements a variety of state-of-the art machine learning algorithms. The goal of this project and tutorial is to take the algorithms out of the academic papers and make them work on a selection of real world tasks to unleash the value of your data.</p>\n<p>We will focus on providing hints to perform the right data preprocessing steps and on how to select algorithms and parameters suitable for the task at hand. We will also introduce tools and methodologies to measure the performance of the trained models as objectively as possible.</p>", "presenters": "Olivier Grisel", "duration": 200, "id": 29, "end": [2012, 3, 8, 19, 40, 0, 3, 68, -1], "title": "Introduction to Interactive Predictive Analytics in Python with scikit-learn", "last_updated_iso": "2012-02-28T14:59:49.300877", "name": "Introduction to Interactive Predictive Analytics in Python with scikit-learn", "start": [2012, 3, 8, 16, 20, 0, 3, 68, -1], "description": "The goal of this tutorial is to give the attendee a first experience of machine learning tools applied to practical software engineering tasks such as language detection of tweets, topic classification of web pages, sentiment analysis of customer products reviews and facial recognition in pictures from the web or from your own webcam.", "tags": "Tutorial, experienced", "end_iso": "2012-03-08T19:40:00", "room_name": "Great American J", "conf_key": "", "released": true, "authors": "Olivier Grisel", "start_iso": "2012-03-08T16:20:00", "room": "F1-Tutorials IV", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/195/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 3, 3, 6, 26, 27, 5, 63, -1], "abstract": "<h2><strong>Goal</strong></h2>\n<p>Build a light-weight version of <a href=\"http://trulia.com/crime\" title=\"Trulia Crime Maps\">Trulia's crime maps</a> from scratch by the end of the tutorial, with a heatmap, source data points on the map, and a custom-styled base layer.</p>\n<h2><strong>Prerequisite Knowledge</strong></h2>\n<p>A solid understanding of Python, and very basic understanding of map concepts (like knowing what latitudes and longitudes are). A cursory run-through of the <a href=\"https://docs.djangoproject.com/en/dev/ref/contrib/gis/tutorial/\" title=\"do people really mouseover these links?\">GeoDjango Introduction Tutorial</a> would also be helpful.</p>\n<h2><strong>Topics Covered</strong></h2>\n<h3 id=\"cartography_101\">Cartography 101</h3>\n<ul>\n<li>What are map projections?</li>\n<li>Map tiles, and how maps on the web work today</li>\n<li>Formats for storing and transferring geodata</li>\n<li>Where to find interesting geodata</li>\n</ul>\n<h3 id=\"postgresql__postgis\">PostgreSQL + PostGIS</h3>\n<ul>\n<li>How to store geodata</li>\n<li>Datatypes</li>\n<li>Geographies vs Geometries</li>\n</ul>\n<h3 id=\"geodjango\">GeoDjango</h3>\n<ul>\n<li>Querying data with the ORM</li>\n<li>Customizing the GeoDjango admin</li>\n</ul>\n<h3 id=\"displaying_the_data\">Displaying the data</h3>\n<ul>\n<li>Creating and designing map tiles with TileStache</li>\n<li>Customizing styles with Polymaps</li>\n<li>Adding interactivity to maps</li>\n<li>How to make geodata pretty</li>\n</ul>", "presenters": "Zain Memon", "duration": 200, "id": 33, "end": [2012, 3, 8, 19, 40, 0, 3, 68, -1], "title": "Making interactive maps for the web", "last_updated_iso": "2012-03-03T06:26:27.876801", "name": "Making interactive maps for the web", "start": [2012, 3, 8, 16, 20, 0, 3, 68, -1], "description": "This tutorial teaches students how to create beautiful, interactive maps for the web. When asked to display geodata, most developers decide to put some big red markers on an embeddable Google Map and call it a day. If you're interested in creating maps that are more beautiful, more interactive, and more usable, this tutorial is for you.", "tags": "Tutorial, intermediate", "end_iso": "2012-03-08T19:40:00", "room_name": "Great American Meeting 3", "conf_key": "", "released": true, "authors": "Zain Memon", "start_iso": "2012-03-08T16:20:00", "room": "H3-Tutorials VIII", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/236/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 3, 2, 21, 0, 14, 4, 62, -1], "abstract": "<p>There are (many) music operations that can be expressed directly in\nMath and code. Just to give you a taste, tranposing a set of notes to\nan interval <code>i</code> is as simple as <code>[(n + i) % 12 for n in notes]</code>.</p>\n<p>In this tutorial we'll explore the primitives of Music (notes,\nintervals, dynamics, articulations, and duration), take a look inside\nthem, the means of combining those primitives (motives, chords,\noperations such as transposition, retrograde, inversion), and the\nmeans of abstraction (phrases, harmonic functions and progressions,\nand form) using Python and some basic Math. At the end of this\ntutorial you should have a demysthified understanding of many elements\nof Music and be able to use Python to create short compositions.</p>\n<h2 id=\"outline\">Outline</h2>\n<ul>\n<li>\n<p>Primitives of Music [15']</p>\n<p>A general view of notes, intervals, dynamics, articulations, and\nduration and how to represent them in Python.</p>\n</li>\n<li>\n<p>Means of combination [35']</p>\n<ul>\n<li>Motives: combination of notes horizontally</li>\n<li>Chords: combination of notes vertically</li>\n<li>Operations on sets of notes: transposition, retrograde, inversion,\n  stretching, and compression</li>\n<li>Filtering functions</li>\n</ul>\n</li>\n<li>\n<p>Practice [45']</p>\n<ul>\n<li>generate simple combinations</li>\n<li>generate combinations with operations</li>\n<li>generate combinations with filters</li>\n</ul>\n</li>\n<li>\n<p>Break [15']</p>\n</li>\n<li>\n<p>A look inside the Primitives [25']</p>\n<ul>\n<li>How many notes are there? Pitch, notes, frequencies</li>\n<li>Envelopes, the contour of sound</li>\n<li>What really is articulation?</li>\n<li>The harmonic series: a building block</li>\n<li>The beautiful math of temperament systems</li>\n<li>Examples</li>\n</ul>\n</li>\n<li>\n<p>Practice [15']</p>\n</li>\n</ul>\n<p>Play with frequencies and interval relations</p>\n<ul>\n<li>\n<p>Means of abstraction (How to think like a composer) [15']</p>\n<ul>\n<li>Phrases</li>\n<li>Harmonic functions and progressions</li>\n<li>Form</li>\n</ul>\n</li>\n<li>\n<p>Practice [15']</p>\n<ul>\n<li>create a simple phrase using the combinations generated in the\n  previous practice session</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"requirements\">Requirements</h2>\n<p>This tutorial is aimed at intermediate Python programmers but no music\nknowledge is necessary. You don't need to know how to read music, but\nwe'll use music notation as a graphical debugger. On the Python side,\nyou should know how to use list comprehensions, lambda, high-order\nfunctions, and object-oriented.</p>\n<p>You can find a list of required libraries and programs, with installation instructions at <a href=\"https://github.com/kroger/learning-music-with-python\" title=\"https://github.com/kroger/learning-music-with-python\">https://github.com/kroger/learning-music-with-python</a>.</p>", "presenters": "Pedro Kroger", "duration": 200, "id": 32, "end": [2012, 3, 8, 19, 40, 0, 3, 68, -1], "title": "Making and understanding music with Python and a little bit of Math", "last_updated_iso": "2012-03-02T21:00:14.596084", "name": "Making and understanding music with Python and a little bit of Math", "start": [2012, 3, 8, 16, 20, 0, 3, 68, -1], "description": "Are you interested in learning more about Music but have found most material to be kind of patronizing or to present things magically instead of logically? The good news is that much of music can be understood with programming and math, two things you're already good at! In this hands-on workshop you'll learn some elements of music from a (Python) programmer's perspective.", "tags": "Tutorial, experienced", "end_iso": "2012-03-08T19:40:00", "room_name": "Great American Meeting 2", "conf_key": "", "released": false, "authors": "Pedro Kroger", "start_iso": "2012-03-08T16:20:00", "room": "H2-Tutorials VII", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/148/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 3, 2, 20, 56, 27, 4, 62, -1], "abstract": "<p>Many developers favor the creation of graphical user interfaces by hand-coding the layout of the interface elements. Most often than not, the resulting code is a highly cohesive mix of user interface and business logic that is not easy to maintain. Likewise, the development of custom widgets is often approached by subclassing top-level classes and overriding paint and event-handling methods. While this is the only alterantive for certain types of custom widgets, there is a big percentage that could be more easily created by composition of smaller widgets assembled together to work in as a unit.</p>\n<p>This tutorial aims to share the following with the audience:</p>\n<ul>\n<li>Make a case for the benefits of using supporting tools for designing the layout portion of graphical user interfaces. In particular, the use of QtDesigner and code generators.</li>\n<li>Present a pattern and project structure for creating PyQt widgets that can also be used inside QtDesigner.</li>\n<li>Efficient use of composition over inheritance for assembling elaborate custom widgets more easily.</li>\n</ul>\n<p>All material is based on Python and PyQt4. Audience is expected to have working knowledge of PyQt. Or, at least proficiency developing application in Qt and C++.</p>\n<p>This tutorial is based on PyQt4 but concepts and techniques can be easily transferrable to PySide. Attendees require access to a computer with the following:</p>\n<ul>\n<li>Qt 4.5.2 or later.</li>\n<li>PyQt 4.5.4 or later.</li>\n<li>sip 4.8.2 or later.</li>\n<li>QtDesigner.</li>\n<li>Python plugin for QtDesigner.</li>\n<li>Python 2.5.x, 2.6.x or 2.7.x.</li>\n</ul>\n<p>An easy way to check whether the Python plugin  is available or not is to select from QtDesigner's main menu: Help &gt; About Plugins &gt; Loaded Plugins, should show libpythonplugin.so. This is normally installed automatically by the Qt installer.</p>", "presenters": "Luis Artola", "duration": 200, "id": 31, "end": [2012, 3, 8, 19, 40, 0, 3, 68, -1], "title": "Developing custom PyQt widgets and graphical interfaces efficiently. ", "last_updated_iso": "2012-03-02T20:56:27.501966", "name": "Developing custom PyQt widgets and graphical interfaces efficiently. ", "start": [2012, 3, 8, 16, 20, 0, 3, 68, -1], "description": "Presents techniques and patterns for creating custom PyQt widgets easily. Focus is the separation of layout and logic to produce code that is easy to read and understand, and also inexpensive to maintain and evolve. Encourages and demonstrates the use of layout design applications, code generators and composition over inheritance. Based on PyQt4 but easily applicable to PySide as well.", "tags": "Tutorial, experienced", "end_iso": "2012-03-08T19:40:00", "room_name": "Great American Meeting 1", "conf_key": "", "released": false, "authors": "Luis Artola", "start_iso": "2012-03-08T16:20:00", "room": "H1-Tutorials VI", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/374/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 59, 1, 59, -1], "abstract": "<p>This tutorial will work through a series of real-world examples, showing how an understanding of the tools built into the Python interpreter or included in the standard library can be combined to solve difficult problems clearly and Pythonically. We will also discuss when and how to reach beyond the standard library when needed to address difficult algorithmic and optimization problems. This can be taken as a stand-alone session or in conjunction with the second session; the two sessions will be complementary.</p>", "presenters": "Raymond Hettinger", "duration": 200, "id": 4, "end": [2012, 3, 8, 19, 40, 0, 3, 68, -1], "title": "Advanced Python II", "last_updated_iso": "2012-02-28T13:42:59.122991", "name": "Advanced Python II", "start": [2012, 3, 8, 16, 20, 0, 3, 68, -1], "description": "Have your Python skills have hit a plateau? Come learn from Python core developer and consultant Raymond Hettinger about the tips and tricks needed to move up to the next level.", "tags": "Tutorial, experienced", "end_iso": "2012-03-08T19:40:00", "room_name": "Mission City B1, B2, B3", "conf_key": "", "released": false, "authors": "Raymond Hettinger", "start_iso": "2012-03-08T16:20:00", "room": "D1-Tutorials I", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/1/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 6, 18, 18, 21, 0, 37, -1], "abstract": null, "presenters": "", "duration": 10, "id": 151, "end": [2012, 3, 9, 12, 10, 0, 4, 69, -1], "title": "Introduction and Welcome", "last_updated_iso": [2012, 2, 6, 18, 18, 21, 0, 37, -1], "name": "Introduction and Welcome", "start": [2012, 3, 9, 12, 0, 0, 4, 69, -1], "description": "", "tags": "plenary", "end_iso": "2012-03-09T12:10:00", "conf_key": "", "released": true, "authors": "", "start_iso": "2012-03-09T12:00:00", "room": "Plenary", "license": "", "url": null, "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 15, 16, 54, 42, 2, 46, -1], "abstract": null, "presenters": "", "duration": 40, "id": 152, "end": [2012, 3, 9, 12, 50, 0, 4, 69, -1], "title": "Keynote: Stormy Peters, Mozilla Corporation", "last_updated_iso": [2012, 2, 15, 16, 54, 42, 2, 46, -1], "name": "Keynote: Stormy Peters, Mozilla Corporation", "start": [2012, 3, 9, 12, 10, 0, 4, 69, -1], "description": "", "tags": "plenary", "end_iso": "2012-03-09T12:50:00", "conf_key": "", "released": true, "authors": "", "start_iso": "2012-03-09T12:10:00", "room": "Plenary", "license": "", "url": null, "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 15, 16, 55, 1, 2, 46, -1], "abstract": null, "presenters": "", "duration": 40, "id": 153, "end": [2012, 3, 9, 13, 30, 0, 4, 69, -1], "title": "Keynote: Paul Graham, YCombinator", "last_updated_iso": [2012, 2, 15, 16, 55, 1, 2, 46, -1], "name": "Keynote: Paul Graham, YCombinator", "start": [2012, 3, 9, 12, 50, 0, 4, 69, -1], "description": "", "tags": "plenary", "end_iso": "2012-03-09T13:30:00", "conf_key": "", "released": true, "authors": "", "start_iso": "2012-03-09T12:50:00", "room": "Plenary", "license": "", "url": null, "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<h1>Metaclasses</h1>\n<ul>\n<li>Introduction (2.5m)<ul>\n<li>Python's metaclasses grant the Python OOP ecosystem all the power of more complex object inheritance systems in other languages, while retaining the simplicity of the straightforward class structure that traditional C++ and Java programmers learned, and is taught in programming courses.</li>\n</ul>\n</li>\n<li>Classes are Objects, Too! (5m)<ul>\n<li>Classes are first-class objects in Python, like functions/methods</li>\n<li>Classes, like other objects, can be assigned to variables and passed as arguments</li>\n<li>...and this ability is one of the tricks in the reusable code toolbox</li>\n</ul>\n</li>\n<li>Concept: Metaclasses generate classes. (5m)<ul>\n<li>The hierarchy starts with \"type\"</li>\n<li>Classes are themselves instances of their metaclasses</li>\n<li>By extension, classes provide code that runs when instances are created, while metaclasses provide code that runs when classes are created.</li>\n<li>Remember the \"analogies\" section on standardized tests in the United States (and many other countries)?<ul>\n<li>Babylon 5 : J. Michael Strazynski :: Star Trek : <strong><em>_</em></strong>__</li>\n<li>Instances : Classes :: Classes : Metaclasses</li>\n</ul>\n</li>\n<li>Think about a self-enclosed machine that creates, say, t-shirts. The machine is the class; the individual shirts are the instances. The guy who builds the t-shirt machines is the metaclass.</li>\n</ul>\n</li>\n<li>Concrete Code Examples (10m)<ul>\n<li>will cover 3.0 and 2.7</li>\n<li>(stub: I haven't decided what my example will be yet)</li>\n</ul>\n</li>\n<li>Is metaclassing wise? (2.5m)<ul>\n<li>There's nothing inherently wrong or bad about it. Furthermore, sometimes it's by far the best way to solve a problem.</li>\n<li>Beware, though: Some people find metaclassing confusing.<ul>\n<li>\"Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.\" (Brian Kernighan)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Questions (5m)</li>\n</ul>", "presenters": "Luke Sneeringer", "duration": 40, "id": 103, "end": [2012, 3, 9, 14, 30, 0, 4, 69, -1], "title": "Introduction to Metaclasses", "last_updated_iso": "2012-02-28T13:42:58.801400", "name": "Introduction to Metaclasses", "start": [2012, 3, 9, 13, 50, 0, 4, 69, -1], "description": "Python's metaclasses grant the Python OOP ecosystem all the power of more complex object inheritance systems in other languages, while retaining for most uses the simplicity of the straightforward class structures most developers learn when being introduced to object-oriented programming. This talk is an explanation of metaclasses: first, what they are, and second, how to use them.", "tags": "Talk, experienced", "end_iso": "2012-03-09T14:30:00", "room_name": "Grand Ballroom H/G", "conf_key": "", "released": true, "authors": "Luke Sneeringer", "start_iso": "2012-03-09T13:50:00", "room": "Track IV (E3)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/64/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>Graphs are a fundamental computer science datatype, and graphs show up in all sorts of models in all sorts of places. So when you have a graph, what can you do with it? Particularly if it is really big? </p>\n<p>Thirty minutes isn't a lot of time to discuss graph processing as a topic, so there won't be a lot of discussion relative to graph theory generally or the terminology of graphs. Instead, this is inspired by Raymond Hettinger's \"mastering team play\" - a series of exercises showing the lowering of a problem into a graph representation, followed by a demonstration of how the problem can be solved through graph processing. There will also be a little bit of compare-and-contrast between the available graph libraries to show differences. Each problem will be given 8-10 minutes.</p>\n<h2>Problem 1: Python's (legal) history</h2>\n<p>Python has developed over time under a number of organizations - each with their own license. What portions of Python's codebase are under each license?</p>\n<ul>\n<li>The CVS/SVN/HG trees as graphs modeling change in time</li>\n<li>Identifying and labeling node types</li>\n<li>Graphing and reporting on results</li>\n</ul>\n<h2>Problem 2: Development Cliques</h2>\n<p>Linux is famously developed with \"lieutenants\" in charge of different subsystems of the kernel. Python doesn't have lieutenants... or does it? Put another way, if you have a patch, who should you submit it to?</p>\n<ul>\n<li>Mailing list connections as a graph </li>\n<li>Analysis of connections, cliques, and centrality</li>\n<li>Graphing and reporting on results</li>\n</ul>\n<h2>Problem 3: Let's get social</h2>\n<p>Your employer has decided that its website should be turned into a social network - you know, because there aren't enough of those.</p>\n<ul>\n<li>Bootstrapping a graph by looking at pairwise analysis of products </li>\n<li>How to suggest who people \"might know\"?</li>\n</ul>", "presenters": "Van Lindberg", "duration": 40, "id": 126, "end": [2012, 3, 9, 14, 30, 0, 4, 69, -1], "title": "Graph Processing in Python", "last_updated_iso": "2012-02-28T13:42:58.819696", "name": "Graph Processing in Python", "start": [2012, 3, 9, 13, 50, 0, 4, 69, -1], "description": "Graphs are everywhere - from your distributed source code control to Twitter analytics. This session presents a set of three problems and shows how they can be decomposed into operations on graphs, and then demonstrates solutions using the various graph libraries available for (or accessible to) Python. ", "tags": "Talk, experienced", "end_iso": "2012-03-09T14:30:00", "room_name": "Grand Ballroom F/E", "conf_key": "", "released": true, "authors": "Van Lindberg", "start_iso": "2012-03-09T13:50:00", "room": "Track V (E4)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/225/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<ul>\n<li>My background (how did I get this far without mucking with servers?)</li>\n<li>Lesson one: The first step is not to install the OS yourself<ul>\n<li>Get a Rackspace account!</li>\n<li>Rough cost analysis</li>\n</ul>\n</li>\n<li>Lesson two: Use Ubuntu<ul>\n<li>The CentOS saga</li>\n<li>Why Ubuntu? </li>\n</ul>\n</li>\n<li>Lesson three: Automate everything<ul>\n<li>What you need to know about fabric</li>\n</ul>\n</li>\n<li>Lesson four: Don't mess with production<ul>\n<li>The cost of a new slice</li>\n<li>The cost of ruining everything forever</li>\n<li>The magic of cloning</li>\n</ul>\n</li>\n<li>Lesson five: Your next steps<ul>\n<li>Security!</li>\n<li>Virtualenv</li>\n</ul>\n</li>\n</ul>", "presenters": "Katie Cunningham", "duration": 40, "id": 80, "end": [2012, 3, 9, 14, 30, 0, 4, 69, -1], "title": "A Noob Speaks to Noobs: Your First Site in the Cloud", "last_updated_iso": "2012-02-28T13:42:57.759547", "name": "A Noob Speaks to Noobs: Your First Site in the Cloud", "start": [2012, 3, 9, 13, 50, 0, 4, 69, -1], "description": "A developer talks about her lessons learned with setting up her first server, and offers advice to others about to tread that path.", "tags": "Talk, novice", "end_iso": "2012-03-09T14:30:00", "room_name": "Grand Ballroom C/D", "conf_key": "", "released": true, "authors": "Katie Cunningham", "start_iso": "2012-03-09T13:50:00", "room": "Track III (E2)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/101/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>When launched, Project Hosting\u2019s testing consisted of the stock Subversion test suite and a handful of ad hoc smoke test scripts that required starting the entire system and manually inspecting the test\u2019s output.</p>\n<p>Over six years of codebase evolution, tests have been added with varying degrees of coverage and maintainability. Early system design decisions made adding tests difficult: the first tests added to the system used mock objects unwisely and large numbers of mock objects made refactoring costly in time and effort.</p>\n<p>Frustration with the difficulty of enhancing the service led us to reevaluate our testing practice and led to the discovery of better ways to test applications of this complexity. We will share our experiences with testing and discuss designing for maintainability and testability and appropriate use of testing tools such as frameworks and mocks.</p>", "presenters": "Augie Fackler, Nathaniel Manista", "duration": 40, "id": 34, "end": [2012, 3, 9, 14, 30, 0, 4, 69, -1], "title": "Stop Mocking, Start Testing", "last_updated_iso": "2012-02-28T13:42:57.215359", "name": "Stop Mocking, Start Testing", "start": [2012, 3, 9, 13, 50, 0, 4, 69, -1], "description": "Project Hosting at Google Code is a large, well-established system written mostly in Python. We'll share our battle-born convictions about creating tests for test-unfriendly code and the larger topic of testing.", "tags": "Talk, novice", "end_iso": "2012-03-09T14:30:00", "room_name": "Mission City Ballroom", "conf_key": "", "released": true, "authors": "Augie Fackler, Nathaniel Manista", "start_iso": "2012-03-09T13:50:00", "room": "Track I (D5)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/315/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<h2>PBS KIDS website overview</h2>\n<ul>\n<li>Types of games and activities online</li>\n<li>Stats - 1.5 millions video streams a day</li>\n</ul>\n<h2>Who comes to PBS KIDS?</h2>\n<ul>\n<li>Ages 2-17</li>\n<li>Some don't have a home computer</li>\n<li>Generally divided into two age groups</li>\n</ul>\n<h2>Why do we need a login system?</h2>\n<ul>\n<li>Humans like to see progress</li>\n<li>Competition with friends</li>\n<li>User generated content</li>\n</ul>\n<h2>Challenges</h2>\n<ul>\n<li>Children's Online Privacy Protection (COPPA)\n-- Cannot store emails\n-- No personally identifing information</li>\n<li>Additional standards we hold ourselves to\n-- Foul language</li>\n</ul>\n<h2>How this is different than other login systems</h2>\n<ul>\n<li>No emails</li>\n<li>No password recovery by email</li>\n<li>No complex questions</li>\n<li>No Mother's maiden name or high school mascot questions</li>\n</ul>\n<h2>Moderation</h2>\n<ul>\n<li>Every username and user generated content must be moderated</li>\n<li>Time committment</li>\n<li>Cannot be automated, but automation can help</li>\n</ul>\n<h2>Our solution - Picking a username</h2>\n<ul>\n<li>Namespace collisions</li>\n<li>Alternate suggestions</li>\n</ul>\n<h2>Passwords</h2>\n<ul>\n<li>Research about password length and memory retention</li>\n</ul>\n<h2>Secret Code</h2>\n<ul>\n<li>Using visual representation instead of questions</li>\n<li>Security integrity: size of brute force search space</li>\n</ul>\n<h2>How to remember</h2>\n<ul>\n<li>Cookies are set, but watch out for public computer</li>\n<li>Messaging and instructions</li>\n</ul>\n<h2>Architecture</h2>\n<ul>\n<li>System loads and configuration</li>\n<li>Python/Django custom implementation</li>\n<li>Performance statistics</li>\n</ul>\n<h2>Moderation</h2>\n<ul>\n<li>Django adminstration</li>\n<li>Implications on how to handle un-moderated content</li>\n</ul>\n<h2>More</h2>\n<ul>\n<li>Compatible with PHP, Flash, Ruby</li>\n<li>Cross site login challenges</li>\n</ul>", "presenters": "Edgar Roman", "duration": 40, "id": 57, "end": [2012, 3, 9, 14, 30, 0, 4, 69, -1], "title": "PBS KIDS: Building a login system for kids and teens in Python", "last_updated_iso": "2012-02-28T13:42:58.306933", "name": "PBS KIDS: Building a login system for kids and teens in Python", "start": [2012, 3, 9, 13, 50, 0, 4, 69, -1], "description": "Our challenge was to create a login system for little people who might barely read, maybe no email, perhaps no home computer. And we had to watch out for privacy laws - especially tough for minors. But these kids want to play games, write stories, and create online avatars to share and compete against their buddies.  Listen to how we developed the PBS KIDS login and moderation system in Django.", "tags": "Talk, novice", "end_iso": "2012-03-09T14:30:00", "room_name": "Grand Ballroom A/B", "conf_key": "", "released": true, "authors": "Edgar Roman", "start_iso": "2012-03-09T13:50:00", "room": "Track II (E1)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/433/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>Music Information Retrieval technology has gotten good enough that you extract musical metadata from your sound files with some degree of accuracy. Find out how to use Python (along with third-party APIs) to determine everything from the key/tempo of a song to the pitch/timbre of individual notes. Then we'll do some amusing analysis of popular tunes.</p>\n<ol>\n<li>Getting basic data about sounds.</li>\n<li>Visualizing waveforms.</li>\n<li>Parsing musical information at the level of song.</li>\n<li>Detecting individual notes (\"segments\").</li>\n<li>What fun can we have?</li>\n</ol>", "presenters": "Adrian Holovaty", "duration": 40, "id": 81, "end": [2012, 3, 9, 15, 10, 0, 4, 69, -1], "title": "Extracting musical information from sound", "last_updated_iso": "2012-02-28T13:42:58.793314", "name": "Extracting musical information from sound", "start": [2012, 3, 9, 14, 30, 0, 4, 69, -1], "description": "Music Information Retrieval technology has gotten good enough that you extract musical metadata from your sound files with some degree of accuracy. Find out how to use Python (along with third-party APIs) to determine everything from the key/tempo of a song to the pitch/timbre of individual notes. Then we'll do some amusing analysis of popular tunes.", "tags": "Talk, experienced", "end_iso": "2012-03-09T15:10:00", "room_name": "Grand Ballroom C/D", "conf_key": "", "released": true, "authors": "Adrian Holovaty", "start_iso": "2012-03-09T14:30:00", "room": "Track III (E2)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/6/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>Your unit test suite takes three minutes to run 500 tests. On a modern CPU, that's just shy of a billion instructions per test. Can something that takes a billion CPU instructions really be called a \"unit\"? What is that suite really testing?</p>\n<p>Many (and probably most) unit testing failures are related to size. Most common are the suite that takes half an hour to run (so no one runs it), the suite whose runtime scales like lines_of_code^2 (so, again, no one runs it), and the suite that requires huge maintenance for small changes (leading to the \"testing is slow\" myth).</p>\n<p>This talk is about the \"unit\" in \"unit test\": what does it really mean, why do we care, and how does it prevent the three crippling problems above? And, of course, if we do shift our focus toward unit tests, what trade-offs are we really making?</p>", "presenters": "Gary Bernhardt", "duration": 40, "id": 35, "end": [2012, 3, 9, 15, 10, 0, 4, 69, -1], "title": "Fast Test, Slow Test", "last_updated_iso": "2012-02-28T13:42:58.259993", "name": "Fast Test, Slow Test", "start": [2012, 3, 9, 14, 30, 0, 4, 69, -1], "description": "Most unit tests aren't and their authors suffer for it. What is a unit test, really? How can writing them prevent classic testing problems? If you do write them, what trade-offs are you implicitly making?", "tags": "Talk, experienced", "end_iso": "2012-03-09T15:10:00", "room_name": "Mission City Ballroom", "conf_key": "", "released": true, "authors": "Gary Bernhardt", "start_iso": "2012-03-09T14:30:00", "room": "Track I (D5)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/429/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>Every day, people watch an average of 3 <em>billion</em> videos on YouTube.  Every minute, people upload an average of 48 <em>hours</em> of video to YouTube.  YouTube operates at a scale that few other websites will ever see, and it's written mostly in Python.</p>\n<p>Mike Solomon is one of the original engineers at YouTube.  In this informal, \nhigh-level talk, he'll give an overview of the lessons he's learned as he's brought YouTube to scale.  He'll also point out ways in which his philosophy on scaling, testing, and writing Python fly in the face of accepted wisdom.  Last of all, we'll also be giving a very short introduction to YouTube APIs and how you can integrate your application with YouTube.</p>", "presenters": "Shannon -jj Behrens, Mike Solomon", "duration": 40, "id": 58, "end": [2012, 3, 9, 15, 10, 0, 4, 69, -1], "title": "Scalability at YouTube", "last_updated_iso": "2012-02-28T13:42:57.838339", "name": "Scalability at YouTube", "start": [2012, 3, 9, 14, 30, 0, 4, 69, -1], "description": "This talk covers scalability at YouTube.  It's given by one of the original engineers at YouTube, Mike Solomon.  It's a rare glimpse into the heart of YouTube which is one of the largest websites in the world, and one of the few extremely large websites to be written in Python.", "tags": "Talk, experienced", "end_iso": "2012-03-09T15:10:00", "room_name": "Grand Ballroom A/B", "conf_key": "", "released": true, "authors": "Shannon -jj Behrens, Mike Solomon", "start_iso": "2012-03-09T14:30:00", "room": "Track II (E1)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/128/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>There are several different types of Assistive Technology designed to help disabled users access the web.  However a lot of websites don't work well with some Assistive Technologies and in this talk we'll show how to uncover the accessibility problems in a website and fix them.  I'll provide a demonstration by using some common Assistive Technology on a few different example websites built with Python web frameworks that are problematic and then I'll show the modifications necessary to make each website accessible.</p>", "presenters": "Robbie Clemons", "duration": 40, "id": 127, "end": [2012, 3, 9, 15, 10, 0, 4, 69, -1], "title": "How to make your websites more accessible", "last_updated_iso": "2012-02-28T13:42:58.512726", "name": "How to make your websites more accessible", "start": [2012, 3, 9, 14, 30, 0, 4, 69, -1], "description": "Is your website accessible? Have you tested it? What does it even mean for a website to be accessible?  In this talk we'll show some of the most common problems disabled users have and demonstrate how to fix them.  I'll also introduce you to some tools that are written in Python to help you determine how accessible your site is.", "tags": "Talk, novice", "end_iso": "2012-03-09T15:10:00", "room_name": "Grand Ballroom F/E", "conf_key": "", "released": true, "authors": "Robbie Clemons", "start_iso": "2012-03-09T14:30:00", "room": "Track V (E4)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/449/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>Avoid the common pitfalls and learn everything you need to know about how subclass in Python.</p>\n<ul>\n<li>Overriding and extending</li>\n<li>Calling your parents</li>\n<li>The ellipse / circle problem</li>\n<li>What does a subclass mean?</li>\n<li>Liskov Substitution Principle</li>\n<li>Open Closed Principle</li>\n<li>Facts of life when subclassing builtin types</li>\n<li>Cooperative Multiple Inheritance</li>\n<li>Common subclassing patterns</li>\n<li>Use of the double underscore</li>\n</ul>", "presenters": "Raymond Hettinger", "duration": 40, "id": 104, "end": [2012, 3, 9, 15, 10, 0, 4, 69, -1], "title": "The Art of Subclassing", "last_updated_iso": "2012-02-28T13:42:58.833473", "name": "The Art of Subclassing", "start": [2012, 3, 9, 14, 30, 0, 4, 69, -1], "description": "All problems have simple, easy-to-understand, logical wrong answers. Subclassing in Python is no exception. Avoid the common pitfalls and learn everything you need to know about making effective use of inheritance in Python.", "tags": "Talk, experienced", "end_iso": "2012-03-09T15:10:00", "room_name": "Grand Ballroom H/G", "conf_key": "", "released": true, "authors": "Raymond Hettinger", "start_iso": "2012-03-09T14:30:00", "room": "Track IV (E3)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/399/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>Classes must be nouns but not every noun must be a class.  If your class only has two methods and one of them is <strong>init</strong> you probably meant to write a function.<br/>\n</p>\n<p>MuffinMail recently refactored their API;  it went from 20 classes scattered in 22 modules down to 1 class just 15 lines long.  It was a welcome change, but we'll further refactor that down to a single function 3 lines long.</p>\n<p>The Python stdlib is an example of a namespace that is relatively flat.  You won't find packages that consist of a single module defining an exception, and you won't find many exceptions at all - just 165 kinds in 200k lines of code.  That's a tiny ratio compared to most projects including Django.</p>\n<p>Of course there are things, like containers, that <em>should</em> be classes. As a final example we'll add a Heap type to the heapq module (admit it, you already have one in your utils.py).</p>", "presenters": "Jack Diederich", "duration": 30, "id": 105, "end": [2012, 3, 9, 15, 40, 0, 4, 69, -1], "title": "Stop Writing Classes", "last_updated_iso": "2012-02-28T13:42:58.208399", "name": "Stop Writing Classes", "start": [2012, 3, 9, 15, 10, 0, 4, 69, -1], "description": "Classes are great but they are also overused.  This talk will describe examples of class overuse taken from real world code and refactor the unnecessary classes, exceptions, and modules out of them.", "tags": "Talk, experienced", "end_iso": "2012-03-09T15:40:00", "room_name": "Grand Ballroom H/G", "conf_key": "", "released": true, "authors": "Jack Diederich", "start_iso": "2012-03-09T15:10:00", "room": "Track IV (E3)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/352/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>A partial outline:</p>\n<ul>\n<li>Intro<ul>\n<li>Motivation: a test not run is no test at all.</li>\n<li>For most web apps, the easiest test speed win is a conquest of I/O.</li>\n</ul>\n</li>\n<li>The nose testrunner<ul>\n<li>Test discovery lets you organize tests well.</li>\n<li>Pluggability</li>\n<li>Gluing to projects with custom testrunners: django-nose and test-utils</li>\n</ul>\n</li>\n<li>py.test<ul>\n<li>Compare to nose. Nose forked from it. Explain history.</li>\n<li>Very cool assertion re-evaluation</li>\n<li>Plugin compatibility between py.test and nose</li>\n</ul>\n</li>\n<li>Profiling<ul>\n<li>Start here. Premature optimization sucks.</li>\n<li><code>time</code> on the commandline to divide CPU from I/O</li>\n<li>--with-profile</li>\n</ul>\n</li>\n<li>Killing I/O for speedy justice: case study of support.mozilla.com<ul>\n<li>Fixture speed hacks (a 5x improvement!)<ul>\n<li>Once-per-class setup<ul>\n<li>How to use DB transactions to avoid repetitive I/O</li>\n</ul>\n</li>\n<li>Dynamic test reordering and fixture sharing</li>\n<li>DB reuse and other startup optimizations</li>\n<li>37,583 queries to 4,116. Watch them fly by!</li>\n</ul>\n</li>\n<li>What to do instead of fixtures: the model-maker pattern<ul>\n<li>Lexical proximity</li>\n<li>Lower coupling</li>\n<li>Speed</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Using mocking to kill the fixtures altogether<ul>\n<li>mock, the canonical lib</li>\n<li>fudge, new declarative hotness<ul>\n<li>Syntax, capabilities</li>\n<li>Example: oedipus, a better API for the Sphinx search engine. I used fudge to unit-test oedipus without requiring devs to set up and populate Sphinx.</li>\n</ul>\n</li>\n<li>Dangers of mocking<ul>\n<li>Don't mock out your caching unless your invalidation is perfect.</li>\n<li>Some of our mistakes in oedipus</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>The nose-progressive display engine<ul>\n<li>Test results that are a pain to read don't get read.</li>\n<li>Progress indication</li>\n<li>Elision of junk frames</li>\n<li>Easier round-tripping from test failure to source code</li>\n</ul>\n</li>\n<li>Continuous integration<ul>\n<li>Motivation</li>\n<li>Jenkins</li>\n<li>Buildbot</li>\n<li>IRC bots</li>\n</ul>\n</li>\n<li>Next steps: what to do once you're CPU-bound<ul>\n<li>More parallelization. <ul>\n<li>Multithreading really buys you no speed bump for CPU-bound (or I/O bound?) tasks in Python due to the GIL. (Ref: PyCodeConf talk by David Beazley.)</li>\n<li>State of multiprocess plugins in various testrunners.</li>\n</ul>\n</li>\n<li>Mozilla's Jenkins test farm</li>\n<li>QA's big stacks of Mac Minis</li>\n<li>What global warming? ;-)</li>\n</ul>\n</li>\n</ul>", "presenters": "Erik Rose", "duration": 45, "id": 36, "end": [2012, 3, 9, 15, 55, 0, 4, 69, -1], "title": "Speedily Practical Large-Scale Tests", "last_updated_iso": "2012-02-28T13:42:58.412516", "name": "Speedily Practical Large-Scale Tests", "start": [2012, 3, 9, 15, 10, 0, 4, 69, -1], "description": "Mozilla's projects have thousands of tests, so we've had to venture beyond vanilla test runners to keep things manageable. Our secret sauce can be used with your project as well. Reach beyond the test facilities that came with your project, harnessing pluggable test frameworks, dynamically reordering tests for speed, exploring various mocking libraries, and profiling your way to testing nirvana.", "tags": "Talk, experienced", "end_iso": "2012-03-09T15:55:00", "room_name": "Mission City Ballroom", "conf_key": "", "released": true, "authors": "Erik Rose", "start_iso": "2012-03-09T15:10:00", "room": "Track I (D5)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/473/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>The goal of the talk is to sufficiently familiarize the audience with CPython's internal structure such that a programmer versed in C and Python but having never dealt with an interpreter would be able to comfortably dive in and start hacking on CPython.</p>\n<p>The program examined will be simple but deliberately designed to exercise most of CPython's runtime behavior.  This will include loading modules implemented in C and in Python, loading bytecode cached on disk, and a cross-section of bytecodes.  (For example, I only need to examine one of the BINARY_* math operands, I don't need to walk through every single one.)</p>\n<p>Areas I expect to examine:\n<em> built-in modules, including ones that are automatically loaded before your program starts\n</em> bytecode, including\n * the various implementations of the inner loop (switch statement, labels-as-values)\n * the peephole optimizer\n * on-disk format\n    * marshal\n    * the magic version number\n    * mention lnotab but probably skip the gory details\n<em> the stack machine\n * unwinding the stack after an exception (and producing tracebacks)\n * contrast CPython's approach with Stackless\n</em> All the possible fields of PyObject, an overview of fields in PyType\n<em> built-in types\n  * the implementations of a few key internal types\n    * list, dict, tuple, str, byte, int, bool, None\n    * though not to the level of detail that Hettinger or Rhodes did in past talks\n  * interned values\n</em> the GIL and reference counting\n  * weakrefs\n  * garbage collection\n  * Py_TRASHCAN\n<em> CPython's small-block and arena allocators\n</em> The parser, though I don't want to spend a lot of time on it (runtime is where the fun is ;)\n<em> Internal utility functions like PyArg_Parse</em></p>\n<p>I'll be giving the talk based on CPython 3.2.</p>", "presenters": "Larry Hastings", "duration": 45, "id": 82, "end": [2012, 3, 9, 15, 55, 0, 4, 69, -1], "title": "Stepping Through CPython", "last_updated_iso": "2012-02-28T13:42:58.843010", "name": "Stepping Through CPython", "start": [2012, 3, 9, 15, 10, 0, 4, 69, -1], "description": "Ever wondered how CPython actually works internally?  This talk will show you.  We start with a simple Python program, then slowly step through CPython, showing in exhaustive detail what happens when it runs that program.  Along the way we'll examine the design and implementation of various major CPython subsystems and see how they fit together.  The audience should be conversant in C and Python.", "tags": "Talk, intermediate", "end_iso": "2012-03-09T15:55:00", "room_name": "Grand Ballroom C/D", "conf_key": "", "released": true, "authors": "Larry Hastings", "start_iso": "2012-03-09T15:10:00", "room": "Track III (E2)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/21/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>This is the age of data.  As more companies expose their datasets through APIs, it's becoming increasingly easier to pull information about users, places, and things.  But having this data isn't always enough; we want to understand it, find correlations, and identify trends.  Fortunately, the area of computer science known as machine learning has a variety of algorithms specifically designed to do this sort of data wrangling.  For the python application developer, there are many off-the-shelf toolkits that include implementations of these algorithms (Orange, NLTK, SHOGUN, PyML and scikit-learn to name just a few), but choosing which one to use can be daunting.<br/>\n</p>\n<p>There are a number of tradeoffs one makes when making a selection, depending on the specifics of the implementation and the needs of the application.  In this talk, I'll give an overview of some of the packages available and discuss what factors might go into deciding which one to use.  I'll also offer some python-specific tricks you can use to work with large amounts of data efficiently.</p>", "presenters": "Matt Spitz", "duration": 30, "id": 59, "end": [2012, 3, 9, 15, 40, 0, 4, 69, -1], "title": "Practical Machine Learning in Python", "last_updated_iso": "2012-02-28T13:42:58.445652", "name": "Practical Machine Learning in Python", "start": [2012, 3, 9, 15, 10, 0, 4, 69, -1], "description": "There are a plethora of options when it comes to deciding how to add a machine learning component to your python application.  In this talk, I'll discuss why python as a language is well-suited to solving these particular problems, the tradeoffs of different machine learning solutions for python applications, and some tricks you can use to get the most out of whatever package you decide to use.\r\n", "tags": "Talk, experienced", "end_iso": "2012-03-09T15:40:00", "room_name": "Grand Ballroom A/B", "conf_key": "", "released": true, "authors": "Matt Spitz", "start_iso": "2012-03-09T15:10:00", "room": "Track II (E1)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/119/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>Data visualization is a hot field right now\u2014and for good reason. In our age of info-saturation, true value is found in distilling large amounts of data into a form that is easy to comprehend and act upon. This talk provides an overview of tools and techniques which you can use to level up your data presentation, regardless of application.</p>\n<p>As humans, we are adept at evaluating visual information. From an early age, we learn to make inferences about things based on their visual properties\u2014large and small, near and far, motion, direction, and other attributes. Taking advantage of the visual process we\u2019ve been practicing since birth is an easy way to optimize delivery of your data into the brains of your audience.</p>\n<p>Unfortunately, it isn\u2019t enough to appeal to the part of our brains responsible for figuring out whether we can successfully hit an animal with a rock. A great visualization must appeal to our sense of beauty. Structure, layout, typography, and color are all tools which can be used (and abused) to delight your audience and direct their attention where you want it to go.</p>\n<p>Whether you\u2019re building an information dashboard for a webapp or presenting scientific data, an understanding of these techniques will make your data more accessible to your audience, and more of a delight to read and learn from.</p>", "presenters": "Idan Gazit", "duration": 45, "id": 128, "end": [2012, 3, 9, 15, 55, 0, 4, 69, -1], "title": "Data, Design, Meaning", "last_updated_iso": "2012-02-28T13:42:58.103079", "name": "Data, Design, Meaning", "start": [2012, 3, 9, 15, 10, 0, 4, 69, -1], "description": "The ultimate goal of data visualization is to tell a story and supply meaning. There are tools and science that can inform your choice of data to present and how best to present it. We reflexively evaluate data and fit it into a narrative which aids decisionmaking; learn how to take advantage of this tendency in order to deliver meaning, not just numbers and charts.", "tags": "Talk, novice", "end_iso": "2012-03-09T15:55:00", "room_name": "Grand Ballroom F/E", "conf_key": "", "released": true, "authors": "Idan Gazit", "start_iso": "2012-03-09T15:10:00", "room": "Track V (E4)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/249/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>Learn the magic of writing programs that monitor, alter and react to the execution of program code by responding to imports, changes to variables, calls to functions and invocations of the builtins. This talk goes beyond the static world of metaclasses and class decorators.</p>\n<p>We'll cover how to slide a class underneath a module to intercept reads/writes, place automatic type checking over your object attributes and use stack peeking to make selected attributes private to their owning class.  We'll cover import hacking, metaclasses, descriptors and decorators and graphically describe how they work internally.  Source examples and color technical diagrams.</p>\n<h1>Table-of-Contents</h1>\n<ul>\n<li>What is Metaprogramming?</li>\n<li>Tools At Our Disposal</li>\n<li>Orientation Diagram: What is Metaprogramming</li>\n</ul>\n<h2>First Third of Talk: Import Hooking</h2>\n<ul>\n<li>Sample Problem #1: Subclassing an Embedded Class</li>\n<li>A Solution to #1: Post-Import Hooking</li>\n<li>A Solution to #1 (Packaged Up)</li>\n<li>Alternate Solution: Pre-Import Hooking</li>\n<li>What Does a Subclassed Module Look Like?</li>\n<li>Some Benefits of Subclassing Modules</li>\n</ul>\n<h2>2nd Third of Talk: Metaclasses</h2>\n<ul>\n<li>Orientation Diagram: Instances, Classes and Metaclasses</li>\n<li>Facts About Metaclasses</li>\n<li>Example #2: Define a Class from an SQL Table Definition</li>\n<li>Example Problem #2 (cont'd)</li>\n<li>Metaclasses versus Class Decorators</li>\n<li>About Meta-Inheritance</li>\n<li>Example #3: Log the Arguments/Return Value of Method Calls</li>\n<li>Lull After Metaclasses, Before Descriptors</li>\n</ul>\n<h2>Last Third of Talk: Descriptors</h2>\n<ul>\n<li>Python's Mechanism of Attribute Lookup</li>\n<li>When to Use Which Lookup Mechanism</li>\n<li>Example 4: Overriding <strong>getattr</strong></li>\n<li>Example 4: Using a Descriptor Instead</li>\n<li>Python's Mechanism of Attribute Lookup (descriptors)</li>\n<li>So What is a descriptor again?</li>\n<li>Where are descriptors used?</li>\n<li>Example 5: Caching an Attribute Value</li>\n<li>Example 6: Declare an Attribute Private to a Class</li>\n<li>Example 7: Tracking Changes in a Value</li>\n</ul>", "presenters": "Jeff Rush", "duration": 55, "id": 107, "end": [2012, 3, 9, 17, 40, 0, 4, 69, -1], "title": "The Magic of Metaprogramming", "last_updated_iso": "2012-02-28T13:42:57.600992", "name": "The Magic of Metaprogramming", "start": [2012, 3, 9, 16, 45, 0, 4, 69, -1], "description": "Learn the magic of writing programs that monitor, alter and react to the execution of program code by responding to imports, changes to variables, calls to functions and invocations of the builtins. This talk goes beyond the static world of metaclasses and class decorators.\r\n", "tags": "Talk, intermediate", "end_iso": "2012-03-09T17:40:00", "room_name": "Grand Ballroom H/G", "conf_key": "", "released": true, "authors": "Jeff Rush", "start_iso": "2012-03-09T16:45:00", "room": "Track IV (E3)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/45/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>If your Python application has users (even if it's used offline), you should be worried about security. This talk will cover advanced material, highlighting common mistakes. </p>\n<p>Hashing and encryption can be tricky to get right. We'll discuss when to use hashing to sign data, and how to choose the right encryption algorithm (spoiler: don't). We'll demonstrate length extension attacks, and discuss how to prevent them.</p>\n<p>Another common mistake is the incorrect use of pseudo-random number generators. We'll discuss the fix, and some of the dangers associated with it.</p>\n<p>Timing attacks are relatively exotic, but as applications move into shared data centers (and shared virtual machines) they have become easier to implement and more dangerous. They're a very common class of bugs, but fixing them (and proving they're fixed) can be difficult. </p>\n<p>Pickle is a common and easy to use serialization format for Python objects. Unfortunately, it's also insecure when attackers can send or modify the pickled data. We'll discuss strategies for signing pickled objects, and alternate serialization formats.</p>\n<p>The final portion of the talk will discuss a meta security problem within the Python community. I'll be demonstrating live code that can compromise even the most locked down of servers, and discussing the steps we need to take as a community to mitigate this threat moving forward.</p>", "presenters": "Paul McMillan", "duration": 55, "id": 61, "end": [2012, 3, 9, 17, 40, 0, 4, 69, -1], "title": "Advanced Security Topics", "last_updated_iso": "2012-02-28T13:42:58.454734", "name": "Advanced Security Topics", "start": [2012, 3, 9, 16, 45, 0, 4, 69, -1], "description": "If your Python application has users, you should be worried about security. This talk will cover advanced material, highlighting common mistakes. Topics will include hashing and salts, timing attacks, serialization, and much more. Expect eye opening demos, and an urge to go fix your code right away.", "tags": "Talk, intermediate", "end_iso": "2012-03-09T17:40:00", "room_name": "Grand Ballroom A/B", "conf_key": "", "released": true, "authors": "Paul McMillan", "start_iso": "2012-03-09T16:45:00", "room": "Track II (E1)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/467/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>We will show how to leverage ZeroMQ to build a simple yet powerful RPC for Python code. We will focus on simplicity, the goal being to expose almost any Python module or class to network calls \u2013 with very few (if any!) modification to existing code.</p>\n<p>We will then explain the purpose and show some use-cases for ZeroMQ special socket types (PUSH/PULL, PUB/SUB, ROUTER/DEALER) to build fan-in and fan-out topologies, as well as asynchronous processing (to avoid blocking when doing long-running requests). A by-product is the ability to scale up job-processing tasks with a message queue, which can even be made broker-less (you don\u2019t have to deploy heavy machinery if you don\u2019t need it).</p>\n<p>We will also demonstrate how introspection can make development and debugging easier, exposing docstrings, and provideing a few command-line helpers to poke, debug, and experiment directly from the shell.</p>\n<p>At the end of the talk (or in a separate talk), we will explain how to implement a tracing framework for distributed RPC. By hooking into the right places, we will show how to get full tracebacks and profiling information; more precisely:</p>\n<ul>\n<li>how each complex call (involving multiple subcalls) can be accurately traced;</li>\n<li>how to handle exceptions, and know easily when and where they happened (without checking dozens of log files);</li>\n<li>which complex calls take too long, and where they spend their time (distributed profiling).</li>\n</ul>\n<p>Those guidelines are the result of an on-going development work at dotCloud, and actively used and implemented at the core of our leading Platform-as-a-Service offering.</p>\n<p>We don\u2019t expect the audience to be familiar with ZeroMQ or RPC. However, it will certainly help to have basic knowledge of serialization (e.g. pickle) and sockets.</p>", "presenters": "J\u00e9r\u00f4me Petazzoni", "duration": 40, "id": 130, "end": [2012, 3, 9, 17, 40, 0, 4, 69, -1], "title": "Build reliable, traceable, distributed systems with ZeroMQ", "last_updated_iso": "2012-02-28T13:42:58.113518", "name": "Build reliable, traceable, distributed systems with ZeroMQ", "start": [2012, 3, 9, 17, 0, 0, 4, 69, -1], "description": "We will show how to build simple yet powerful RPC code with ZeroMQ, with very few (if any!) modification to existing code. We will build fan-in and fan-out topologies with ZeroMQ special socket types to implement PUB/SUB patterns and scale up job-processing tasks. Thanks to introspection, the resulting services will be self-documented. Finally, we will show how to implement distributed tracing.\r\n", "tags": "Talk, experienced", "end_iso": "2012-03-09T17:40:00", "room_name": "Grand Ballroom F/E", "conf_key": "", "released": true, "authors": "J\u00e9r\u00f4me Petazzoni", "start_iso": "2012-03-09T17:00:00", "room": "Track V (E4)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/260/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>Lessons and techniques in testing infrastrcuture as a service provided by OpenStack</p>", "presenters": "Joe Heck", "duration": 40, "id": 38, "end": [2012, 3, 9, 17, 40, 0, 4, 69, -1], "title": "Infrastructure testing", "last_updated_iso": "2012-02-28T13:42:58.218762", "name": "Infrastructure testing", "start": [2012, 3, 9, 17, 0, 0, 4, 69, -1], "description": "OpenStack is about providing an Open Source infrastructure as a service. This session will cover the lessons learned and techniques used in testing infrastructure to verify OpenStack. Related code for this talk is available at https://github.com/openstack/openstack-integration-tests", "tags": "Talk, experienced", "end_iso": "2012-03-09T17:40:00", "room_name": "Mission City Ballroom", "conf_key": "", "released": true, "authors": "Joe Heck", "start_iso": "2012-03-09T17:00:00", "room": "Track I (D5)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/339/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<h1>Why Code Generation?</h1>\n<p>It seems like the general consensus for code generation in many dynamic language communities is: eval is evil, do not use it.  However if done properly code generation solves a lot of problems easily, securely and with much better performance than an interpreter written on top of an interpreted language like Python.</p>\n<p>Code generation is what powers most template languages in Python, what powers object relational mappers and more.  It is also an excellent tool to simplify debugging.</p>\n<h1>Why Codegen is no Silver Bullet</h1>\n<p>Just because you generate code does not mean you're faster than an interpreter written in Python.  This part of the talk focuses on why compiling Django templates to Python bytecode does not automatically make it fast.</p>\n<h1>Design of Jinja2</h1>\n<p>Jinja2 underwent multiple design iterations, most of which were made to either improve performance or debug-ability.  The internals however are largely undocumented and confusing unless you're familiar with the code.  In it however are a few gems hidden and interesting tricks to make code generation work in the best possible way.</p>\n<h1>Python's Support for Code Generation</h1>\n<p>Over the years Python's support for code generation was steadily improved with different ways to access the abstract syntax tree and to compiling it back to bytecode.  This section highlights some alternative ways to do code generation that are not yet fully implemented in Jinja2 but are otherwise widely used.</p>", "presenters": "Armin Ronacher", "duration": 40, "id": 84, "end": [2012, 3, 9, 17, 40, 0, 4, 69, -1], "title": "Code Generation in Python: Dismantling Jinja", "last_updated_iso": "2012-02-28T13:42:58.050810", "name": "Code Generation in Python: Dismantling Jinja", "start": [2012, 3, 9, 17, 0, 0, 4, 69, -1], "description": "For many DSLs such as templating languages it's important to use code generation to achieve acceptable performance in Python.  The current version of Jinja went through many different iterations to end up where it is currently.  This talk walks through the design of Jinja2's compiler infrastructure and why it works the way it works and how one can use newer Python features for better results.", "tags": "Talk, intermediate", "end_iso": "2012-03-09T17:40:00", "room_name": "Grand Ballroom C/D", "conf_key": "", "released": true, "authors": "Armin Ronacher", "start_iso": "2012-03-09T17:00:00", "room": "Track III (E2)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/246/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>Talk Outline:</p>\n<ol>\n<li>What are Interfaces? (3 min)<ul>\n<li>modeling strict abstraction</li>\n<li>precedents in other languages</li>\n</ul>\n</li>\n<li>Interfaces in Python (6 min)<ul>\n<li>duck-typing</li>\n<li>Python \"protocols\"</li>\n<li>past proposals (PEP 245)</li>\n<li>how Python \"interfaces\" are different</li>\n</ul>\n</li>\n<li>Newer Interface Support (11 min)<ul>\n<li>annotations</li>\n<li>Abstract Base Classes</li>\n<li>why run-time validation?</li>\n<li>ABC vs. duck-typing</li>\n</ul>\n</li>\n<li>Third-party Libraries (5 min)<ul>\n<li>Peak's PyProtocols</li>\n<li>zope.interface</li>\n<li>Twisted</li>\n</ul>\n</li>\n<li>What Next? (3 min)<ul>\n<li>strict interfaces</li>\n<li>compile-time validation</li>\n<li>an example interface library</li>\n</ul>\n</li>\n</ol>\n<p>For more comprehensive coverage of interfaces in Python, check out <a href=\"http://reference-pages.rtfd.org/python_interfaces\">this reference</a>.</p>", "presenters": "Eric Snow", "duration": 40, "id": 108, "end": [2012, 3, 9, 18, 20, 0, 4, 69, -1], "title": "Interfaces and Python", "last_updated_iso": "2012-02-28T13:42:58.396298", "name": "Interfaces and Python", "start": [2012, 3, 9, 17, 40, 0, 4, 69, -1], "description": "In 2.6, Python introduced the Abstract Base Classes.  Before that we had \"protocols\" (and we still do).  In this talk we'll look at how the general concept of interfaces fits into today's Python.  We'll also look at some of the alternate proposals of the past, some of the controversies around ABCs, and the direction interfaces might go in the future.", "tags": "Talk, experienced", "end_iso": "2012-03-09T18:20:00", "room_name": "Grand Ballroom H/G", "conf_key": "", "released": true, "authors": "Eric Snow", "start_iso": "2012-03-09T17:40:00", "room": "Track IV (E3)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/126/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>As some have found, gevent is one of the best kept secrets of Python. It gives you fast, evented network programming without messes of callbacks, code that is more Pythonic, <strong>and</strong> lets you use most <em>regular</em> Python networking libraries and protocol implementations. Now, let's build on this. </p>\n<p>In this talk we learn how to throw together distributed services using gevent and a simple framework called gservice. We'll go from nothing to a distributed messaging system based on experiences building scalable, distributed systems at Twilio. </p>\n<p>This talk will be full of code, live coding, and real production applications with guest appearances by other fun technologies like ZeroMQ, WebSocket, and Doozer. </p>", "presenters": "Jeff Lindsay", "duration": 40, "id": 131, "end": [2012, 3, 9, 18, 20, 0, 4, 69, -1], "title": "Throwing Together Distributed Services With Gevent", "last_updated_iso": "2012-02-28T13:42:58.784750", "name": "Throwing Together Distributed Services With Gevent", "start": [2012, 3, 9, 17, 40, 0, 4, 69, -1], "description": "In this talk we learn how to throw together a distributed system using gevent and a simple framework called gservice. We'll go from nothing to a distributed messaging system ready for production deployment based on experiences building scalable, distributed systems at Twilio.", "tags": "Talk, experienced", "end_iso": "2012-03-09T18:20:00", "room_name": "Grand Ballroom F/E", "conf_key": "", "released": true, "authors": "Jeff Lindsay", "start_iso": "2012-03-09T17:40:00", "room": "Track V (E4)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/288/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<ul>\n<li>Very brief intro to Apache Cassandra</li>\n<li>What is Apache Cassandra and where do I get it?</li>\n<li>Using the Cassandra CLI to setup a keyspace (table) to hold our data</li>\n<li>Installing the Cassandra thrift API module</li>\n<li>Using Cassandra from the thrift API</li>\n<li>Connecting</li>\n<li>Writing</li>\n<li>Reading</li>\n<li>Batch operations</li>\n<li>Installing the pycassa module</li>\n<li>Using Cassandra from the pycassa module</li>\n<li>Connecting</li>\n<li>Reading</li>\n<li>Writing</li>\n<li>Batch operations</li>\n<li>Indexing in Cassandra</li>\n<li>Automatic vs Rolling your own</li>\n<li>Using Composite Columns</li>\n<li>Setting them up from the CLI</li>\n<li>How to using them from pycassa</li>\n<li>Lessons learned</li>\n</ul>", "presenters": "Jeremiah Jordan", "duration": 40, "id": 85, "end": [2012, 3, 9, 18, 20, 0, 4, 69, -1], "title": "Apache Cassandra and Python", "last_updated_iso": "2012-02-28T13:42:58.680217", "name": "Apache Cassandra and Python", "start": [2012, 3, 9, 17, 40, 0, 4, 69, -1], "description": "Using Apache Cassandra from Python is easy to do.  This talk will cover setting up and using a local development instance of Cassandra from Python.  It will cover using the low level thrift interface, as well as using the higher level pycassa library.", "tags": "Talk, experienced", "end_iso": "2012-03-09T18:20:00", "room_name": "Grand Ballroom C/D", "conf_key": "", "released": true, "authors": "Jeremiah Jordan", "start_iso": "2012-03-09T17:40:00", "room": "Track III (E2)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/122/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>PDB is an interactive debugging environment for Python programs. It allows\nyou to pause your program, look at the values of variables, and watch program\nexecution step-by-step, so you can understand what your program is actually\ndoing, as opposed to what you think it's doing.</p>\n<p>Effectively using PDB is arguably the most important skill a new Python\ndeveloper can learn.  This talk will show novice and intermediate Python\nusers how to use PDB to troubleshoot existing code.</p>\n<ul>\n<li>\n<p>When is it reasonable to use PDB?</p>\n<ul>\n<li>\n<p>\"I don't use a debugger\"</p>\n</li>\n<li>\n<p>When is it really not reasonable?</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Modes of pdb usage</p>\n<ul>\n<li>\n<p>set_trace mode, e.g. pdb.set_trace()</p>\n</li>\n<li>\n<p>postmortem mode, e.g. <code>python -m pdb buggy.py</code> or <code>pdb.pm()</code></p>\n</li>\n<li>\n<p>run mode, .e.g. <code>pdb.run('some.expression()')</code>.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Getting help</p>\n</li>\n<li>\n<p>Shortcut aliases (<code>c</code> vs. <code>continue</code>)</p>\n</li>\n<li>\n<p>The workhorse commands (list, print, pretty-print, next, continue, step,\n  return, until, where, up, down):</p>\n<ul>\n<li>\n<p><code>list</code>: displaying code in your current execution context</p>\n</li>\n<li>\n<p><code>p</code> and <code>pp</code>: displaying objects</p>\n</li>\n<li>\n<p><code>continue</code>, <code>step</code>, <code>return</code>, <code>next</code>, <code>return</code>, <code>until</code>:\nexecution control</p>\n</li>\n<li>\n<p><code>where</code>: showing the current location in the frame stack</p>\n</li>\n<li>\n<p><code>up</code>, <code>down</code>: navigating the frame stack</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Managing breakpoints (break, tbreak, ignore, enable, disable, clear):</p>\n<ul>\n<li><code>break</code>, <code>tbreak</code>, <code>ignore</code>, <code>enable</code>, <code>disable</code>, and\n<code>clear</code>: Managing breakpoints</li>\n</ul>\n</li>\n<li>\n<p>Lesser-used commands (args, !-prefixing, debug)</p>\n<ul>\n<li>\n<p><code>debug</code>: recursive debugging</p>\n</li>\n<li>\n<p><code>!</code>-prefixing: modifying variables</p>\n</li>\n<li>\n<p><code>args</code>: printing args to the current function</p>\n</li>\n<li>\n<p><code>commands</code>: scripting pdb</p>\n</li>\n</ul>\n</li>\n<li>\n<p>~/.pdbrc and PDB aliases</p>\n</li>\n<li>\n<p>Debugging in the face of threads (ie. web apps).</p>\n</li>\n<li>\n<p>\"Purple bags\"</p>\n<ul>\n<li>\n<p>Enhanced shells: ipdb, pudb, winpdb</p>\n</li>\n<li>\n<p>In-editor debugger integration (Wing, Eclipse PyDev, PyCharm, etc)</p>\n</li>\n</ul>\n</li>\n</ul>", "presenters": "Chris McDonough", "duration": 40, "id": 62, "end": [2012, 3, 9, 18, 20, 0, 4, 69, -1], "title": "Introduction to PDB", "last_updated_iso": "2012-02-28T13:42:57.774304", "name": "Introduction to PDB", "start": [2012, 3, 9, 17, 40, 0, 4, 69, -1], "description": "PDB is an interactive debugging environment for Python programs. It allows you to pause your program, look at the values of variables, and watch program execution step-by-step, so you can understand what your program is actually doing, as opposed to what you think it's doing. This talk will show novice and intermediate Python\r\nusers how to use PDB to troubleshoot existing code.\r\n", "tags": "Talk, novice", "end_iso": "2012-03-09T18:20:00", "room_name": "Grand Ballroom A/B", "conf_key": "", "released": true, "authors": "Chris McDonough", "start_iso": "2012-03-09T17:40:00", "room": "Track II (E1)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/149/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>The py.test tool presents a rapid and simple way to write tests for your Python code.  This talks introduces some common testing terminology and basic pytest usage.  Moreover, it discusses some unique pytest features for writing unit- or functional tests. For unit tests, the simple Python \"assert\" statement is used for coding assertions.  As of 2011, this assert support has been perfected for Python 2.6 or higher, finally removing what some people have formerly called \"magic side effects\".  For writing functional or acceptance tests py.test features a unique depdendency injection mechanism for managing test resources.  The talk shows how to setup these resources and how to configure it via command line options. More recently, QA folks from Mozilla and Redhat QA people have endorsed come to appreciate these unique features and the general customizability.  The talk concludes with a look on other features like distributing test load and other recently released plugins.</p>\n<p>This is the planned series of topics:</p>\n<ul>\n<li>\n<p>unit- and functional testing</p>\n</li>\n<li>\n<p>why pytest and not Python packaged unittest package?</p>\n</li>\n<li>\n<p>simple test example and assertions</p>\n</li>\n<li>\n<p>example of dependency injection</p>\n</li>\n<li>\n<p>example usage from webqa mozilla project</p>\n</li>\n<li>\n<p>mocking and monkeypatching</p>\n</li>\n<li>\n<p>distributed test load to processors</p>\n</li>\n<li>\n<p>non-python test discovery</p>\n</li>\n<li>\n<p>customized reporting</p>\n</li>\n<li>\n<p>outlook on future releases</p>\n</li>\n</ul>", "presenters": "Holger Krekel", "duration": 40, "id": 39, "end": [2012, 3, 9, 18, 20, 0, 4, 69, -1], "title": "pytest - rapid and simple testing with Python", "last_updated_iso": "2012-02-28T13:42:57.669088", "name": "pytest - rapid and simple testing with Python", "start": [2012, 3, 9, 17, 40, 0, 4, 69, -1], "description": "\r\nThe py.test tool presents a rapid and simple way to write tests.  This talks introduces common testing terms, basic examples and unique pytest features for writing unit- or functional tests: assertions and dependency injection mechanisms.  We also look at other features like distributing test load, new plugins and reasons why some Redhat and Mozilla people choose pytest over other approaches.", "tags": "Talk, novice", "end_iso": "2012-03-09T18:20:00", "room_name": "Mission City Ballroom", "conf_key": "", "released": true, "authors": "Holger Krekel", "start_iso": "2012-03-09T17:40:00", "room": "Track I (D5)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/171/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<h1>Overview</h1>\n<p>You've heard the gospel of 'test, test, test!' over and over again, and may\nhave even felt some jealousy or guilt because you're not using Test-Driven\nDevelopment. Maybe you've even seen talks or read blog posts about writing\n'testable code', but it just hasn't sunk in.</p>\n<p>The reality is that writing effective unit tests can be somewhat\ndifficult to wrap your head around. What's a unit test? When is a unit test\nnot a unit test? What's a functional test? When is a Mock really a fake or\nstub?  There's a good bit of lingo, a fair amount of religion, but not enough\ninstruction on effective testing patterns and idiomatic, Pythonic testing\npractices.</p>\n<p>As programming and application architecture is heavily influenced by the use\nof patterns, it's only logical that those patterns produce the side effect of\nmaking the way they'll be tested more predictable, and yet discussions of\npatterns regularly leave out coverage of testing, and most testing talks fail\nto link a methodology to patterns in the code. This changes now.</p>\n<p>In this talk, aimed at intermediate Pythonistas, we'll have a look at some\ncommon, simple patterns in code, and then have a look at the testing patterns\nthat go with them. We'll also discover what makes some code more testable than\nothers, and how mocks and fakes can help truly isolate the code to be tested\n(and why you really want to do that). Finally, we'll touch on some tools to\nhelp make writing and running tests easier.</p>\n<h1>Outline</h1>\n<h2>What is a unit test? (3 minutes)</h2>\n<ul>\n<li>Unit Test definition</li>\n<li>Unit tests vs. functional, integration, and acceptance tests</li>\n</ul>\n<h2>Why Unit Tests? (3 minutes)</h2>\n<ul>\n<li>\"Why isolate the code?\" (I get this question <em>a lot</em>)</li>\n<li>\"But, I use functional tests &amp; have 100% coverage!\"</li>\n</ul>\n<h2>Three pieces of code, and how to make it more testable. (8 minutes)</h2>\n<h2>Patterns in code, patterns in tests (15 minutes)</h2>\n<ul>\n<li>A Simple datetime abstraction library, its patterns and tests.</li>\n<li>A REST Client Module, its patterns and tests</li>\n<li>A cmd-module-based command shell, its patterns and tests</li>\n<li>A microframework-based service, its patterns and tests</li>\n</ul>\n<h2>Tools You Want to Use (5 minutes)</h2>\n<ul>\n<li>Mock</li>\n<li>Nose</li>\n<li>Coverage</li>\n<li>Tox</li>\n<li>TBD (Possibly PyCharm's test support, which is getting good w/ 2.0, but\nthere are many candidates)</li>\n</ul>", "presenters": "Brian K. Jones", "duration": 45, "id": 40, "end": [2012, 3, 9, 19, 5, 0, 4, 69, -1], "title": "Fake It Til You Make It: Unit Testing Patterns With Mocks and Fakes", "last_updated_iso": "2012-02-28T13:42:57.805781", "name": "Fake It Til You Make It: Unit Testing Patterns With Mocks and Fakes", "start": [2012, 3, 9, 18, 20, 0, 4, 69, -1], "description": "In this talk, aimed at intermediate Pythonistas, we'll have a look at some common, simple patterns in code, and the testing patterns that go with them. We'll also discover what makes some code more testable than others, and how mocks and fakes can help isolate the code to be tested (and why you want to do that). Finally, we'll touch on some tools to help make writing and running tests easier.", "tags": "Talk, experienced", "end_iso": "2012-03-09T19:05:00", "room_name": "Mission City Ballroom", "conf_key": "", "released": true, "authors": "Brian K. Jones", "start_iso": "2012-03-09T18:20:00", "room": "Track I (D5)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/336/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>Handling crashes is divided into two parts -- resilience (making sure that your software maintains correctness in the face of crashes) and speed of recovery (optimizing the time it takes back to get back to full working condition). I will talk about techniques to allow for resilience -- separating master data from cache data, minimizing the amount of master data, using atomic file operations, using databases and persisting structures in the right order. Then I will talk about speedy recovery techniques, among them process separation, working while restarting and more. I will conclude with surveying the options in testing all of these things so that the crashes are made to happen in the development/testing environment.</p>\n<p>Outline:</p>\n<ul>\n<li>Ways Python programs can crash<ul>\n<li>Infinite loops</li>\n<li>Getting stuck</li>\n<li>Memory leaks</li>\n<li>Exceptions<ul>\n<li>Catching exceptions considered scary</li>\n</ul>\n</li>\n<li>Threads dead-locks</li>\n</ul>\n</li>\n<li>Minimizing effects of a crash<ul>\n<li>Atomic file operations</li>\n<li>Databases</li>\n<li>Vertical process splitting</li>\n<li>Horizontal process splitting</li>\n<li>Limiting process lifetime</li>\n</ul>\n</li>\n<li>Detecting crashes<ul>\n<li>Process death</li>\n<li>Process inresponsiveness</li>\n<li>Test communication</li>\n<li>Helper checker processes</li>\n</ul>\n</li>\n<li>Restarting processes<ul>\n<li>Minimize master data</li>\n<li>Boot-up speed</li>\n<li>Order of start-up and communication</li>\n<li>Testing by killing processes</li>\n<li>Testing by pausing processes</li>\n</ul>\n</li>\n<li>Conclusions<ul>\n<li>Python processes can still crash</li>\n<li>Plan for crashes</li>\n<li>Test your plan for crashes</li>\n</ul>\n</li>\n</ul>", "presenters": "Moshe Zadka", "duration": 30, "id": 63, "end": [2012, 3, 9, 18, 50, 0, 4, 69, -1], "title": "Make Sure Your Programs Crash", "last_updated_iso": "2012-02-28T13:42:57.911973", "name": "Make Sure Your Programs Crash", "start": [2012, 3, 9, 18, 20, 0, 4, 69, -1], "description": "With Python, segmentation faults and the like simply don't happen -- programs do not crash. However, the world is a messy, chaotic place. What happens when your programs crash? I will talk about how to make sure that your application survives crashes, reboots and other nasty problems.", "tags": "Talk, experienced", "end_iso": "2012-03-09T18:50:00", "room_name": "Grand Ballroom A/B", "conf_key": "", "released": true, "authors": "Moshe Zadka", "start_iso": "2012-03-09T18:20:00", "room": "Track II (E1)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/114/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 56, 1, 59, -1], "abstract": "<p>Decorators wrap or modify your functions.  They are functions themselves, so you can pass parameters to them.  You can wrap a function with multiple decorators too.  We'll cover how to use decorators in all those situations and how to write them too.  Examples will be demonstrated with:</p>\n<ul>\n<li><code>@property</code></li>\n<li><code>@memoize</code></li>\n<li>mock/patch</li>\n<li>TurboGears</li>\n<li>Django</li>\n<li>Allura</li>\n</ul>\n<p>Context managers wrap a block of code using the 'with' statement to do something on the way into the block and something on the way out.  Opening and closing a file is a very common case, but there is a lot more you can do.  Examples include:</p>\n<ul>\n<li>modifying state</li>\n<li>capturing stdout</li>\n<li>mock/patch</li>\n<li>locks</li>\n<li>timing</li>\n<li>transactions</li>\n</ul>\n<p>More about decorators:</p>\n<ul>\n<li><a href=\"http://www.python.org/dev/peps/pep-0318/\">http://www.python.org/dev/peps/pep-0318/</a></li>\n<li><a href=\"http://micheles.googlecode.com/hg/decorator/documentation.html\">the decorator module</a></li>\n</ul>\n<p>More about context managers:</p>\n<ul>\n<li><a href=\"http://www.python.org/dev/peps/pep-0343/\">http://www.python.org/dev/peps/pep-0343/</a></li>\n<li><a href=\"http://docs.python.org/library/contextlib.html\">http://docs.python.org/library/contextlib.html</a></li>\n</ul>", "presenters": "Dave Brondsema", "duration": 30, "id": 109, "end": [2012, 3, 9, 18, 50, 0, 4, 69, -1], "title": "Decorators and Context Managers", "last_updated_iso": "2012-02-28T13:42:56.913756", "name": "Decorators and Context Managers", "start": [2012, 3, 9, 18, 20, 0, 4, 69, -1], "description": "Learn how decorators and context managers work, see several popular examples, and get a brief intro to writing your own.  Decorators wrap your functions to easily add more functionality.  Context managers use the 'with' statement to make indented blocks magical.  Both are very powerful parts of the python language; come learn how to use them in your code.", "tags": "Talk, experienced", "end_iso": "2012-03-09T18:50:00", "room_name": "Grand Ballroom H/G", "conf_key": "", "released": true, "authors": "Dave Brondsema", "start_iso": "2012-03-09T18:20:00", "room": "Track IV (E3)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/131/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>I've written a <a href=\"https://fedorahosted.org/gcc-python-plugin/\">plugin for GCC</a> that embeds Python inside the compiler, allowing you to write new C/C++ compilation passes in Python.</p>\n<p>I've used this to build a <a href=\"http://dmalcolm.livejournal.com/6560.html\">static analysis tool that understands the CPython extension API</a>, and can automatically detect various errors (e.g. reference counting mistakes).</p>\n<p>I'll be talking about how to use the GCC plugin to analyse C and C++ code with Python scripts, and giving a guided tour of the static analysis tool on some real-world Python extension modules.</p>", "presenters": "Dave Malcolm", "duration": 45, "id": 132, "end": [2012, 3, 9, 19, 5, 0, 4, 69, -1], "title": "Static analysis of Python extension modules using GCC", "last_updated_iso": "2012-02-28T13:42:57.957153", "name": "Static analysis of Python extension modules using GCC", "start": [2012, 3, 9, 18, 20, 0, 4, 69, -1], "description": "Want to analyse C/C++ code using Python?  I've written a plugin for GCC that embeds Python inside the compiler, allowing you to write new C/C++ compilation passes in Python.  I've used this to build a static analysis tool that understands the CPython extension API, and can automatically detect reference-counting bugs, and other errors.", "tags": "Talk, intermediate", "end_iso": "2012-03-09T19:05:00", "room_name": "Grand Ballroom F/E", "conf_key": "", "released": true, "authors": "Dave Malcolm", "start_iso": "2012-03-09T18:20:00", "room": "Track V (E4)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/78/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>Pushing logic in your database can be a blessing or a curse.  While these techniques aren't appropriate for most users in most situations, it's good to know what kind of power you have at your disposal with PL/Python if the need ever arises. </p>\n<p>Learn about how to:\n- Use triggers to off load data processing tasks\n- Fire off email and log alerts based on what is happening in your tables\n- Create more granular and detailed constraints such as verifying email address or credit card checksums at the database level\n- Replace batch jobs with in database triggers\n- Learn when and when NOT to use these techniques\n- Debugging techniques\n- Security concerns</p>", "presenters": "Frank Wiles", "duration": 45, "id": 86, "end": [2012, 3, 9, 19, 5, 0, 4, 69, -1], "title": "Putting Python in PostgreSQL", "last_updated_iso": "2012-02-28T13:42:57.685685", "name": "Putting Python in PostgreSQL", "start": [2012, 3, 9, 18, 20, 0, 4, 69, -1], "description": "PostgreSQL is pretty powerful all on it's own, but did you know you can use Python as a stored procedure language? Not only does using a familiar language make development easier, but you get the power of the standard library and PyPi to boot.  Come learn the ins and outs of putting Python in your DB. ", "tags": "Talk, experienced", "end_iso": "2012-03-09T19:05:00", "room_name": "Grand Ballroom C/D", "conf_key": "", "released": true, "authors": "Frank Wiles", "start_iso": "2012-03-09T18:20:00", "room": "Track III (E2)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/77/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 56, 1, 59, -1], "abstract": "<p>I'll start by introducing the motto \"It's easier to ask forgiveness than permission\" and the woman who used it, Rear Admiral Grace Murray Hopper, also known as the \"mother of Cobol\" and the author of the first ever programming-language compiler.</p>\n<p>I then move on to the Python context, where the motto supports the proper usage of exception-catching rather than preliminary checks; and the \"rule that proves the exception\" introduced by abstract base classes.</p>\n<p>Expanding the subject, I show how \"optimistic concurrency\" applies that motto (while locking would \"ask permission\", in essence, STM \"asks forgiveness\"), and how collision-detection focused networking protocols have similarly triumphed over more highly structured, \"ask permission\" ones like token-ring.</p>\n<p>Moving to the fuzzier context of real life, I then show how this daring approach does not work quite as well as in the technical realm -- except when applied correctly, in the right circumstances... and I try to evince a general law describing what the right circumstances for its application are, comparing and contrasting with the similar issue of \"do it right the first time\" versus \"launch and iterate\" (and the latter's cognate \"fail, but fail fast\" principle).</p>", "presenters": "Alex Martelli", "duration": 55, "id": 65, "end": [2012, 3, 9, 20, 20, 0, 4, 69, -1], "title": "Permission or Forgiveness?", "last_updated_iso": "2012-02-28T13:42:56.833751", "name": "Permission or Forgiveness?", "start": [2012, 3, 9, 19, 25, 0, 4, 69, -1], "description": "Grace Murray Hopper's famous motto, \"It's easier to ask forgiveness than permission\", has many useful applications -- in Python, in concurrency, in networking, as well of course as in real life.  However, it's not universally valid.  This talk explores both useful and damaging applications of this principle.\r\n", "tags": "Talk, experienced", "end_iso": "2012-03-09T20:20:00", "room_name": "Grand Ballroom A/B", "conf_key": "", "released": true, "authors": "Alex Martelli", "start_iso": "2012-03-09T19:25:00", "room": "Track II (E1)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/144/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>This talk covers the power and metaprogramming features of Python that cater to mad scientists and evil geniuses. This will also be of interest to others who just want to use of Python in a more power (hungry) way.</p>\n<p>Users of Python are not limited to the usual model of a one-to-one correspondence between source code and live objects. Python allows you to synthesize functions, classes and modules without a direct correspondence to source code. You can mutate third-party objects, classes, modules and applications through monkey patching -- changing their behavior without altering their source code. You can even \"chop-up\" third-party objects to create new objects from the pieces. Find out how to unleash your inner Mad Scientist!</p>\n<ul>\n<li>Thesis: Python is an ideal language for both:<ul>\n<li>Mad Scientists</li>\n<li>Evil Geniuses</li>\n</ul>\n</li>\n<li>Mad Scientist versus Evil Genius<ul>\n<li>Mad Scientist: creating new things because it's cool</li>\n<li>Evil Genius: practical applications</li>\n</ul>\n</li>\n<li>Typical Mad Science Goals<ul>\n<li>Create new living code objects from scraps without corresponding source code.</li>\n<li>Mutate third-party code to suite our purposes without modifying the third-party source code.</li>\n</ul>\n</li>\n<li>Synthetics<ul>\n<li>Synthetic Functions</li>\n<li>Synthetic Classes</li>\n<li>Synthetic Modules</li>\n<li>Applications of Synthetics</li>\n</ul>\n</li>\n<li>Monkey Patching<ul>\n<li>Monkey Patching Modules</li>\n<li>Monkey Patching Classes</li>\n<li>Monkey Patching Instances</li>\n</ul>\n</li>\n<li>sitecustomize.py</li>\n<li>Dealing with Angry Villagers</li>\n<li>Limitations: When not to do this</li>\n<li>For the Evil Geniuses</li>\n</ul>\n<p>Although most of the material is presented from the point of view of the Mad Scientist, it is equally useful to the Evil Genius.</p>\n<p>Since the Python community prides itself on diversity, I should emphasize that the sane, the non-evil, and \"do-gooders\" are all welcome.</p>", "presenters": "Walker Hale", "duration": 55, "id": 111, "end": [2012, 3, 9, 20, 20, 0, 4, 69, -1], "title": "Python Metaprogramming for Mad Scientists and Evil Geniuses", "last_updated_iso": "2012-02-28T13:42:58.612690", "name": "Python Metaprogramming for Mad Scientists and Evil Geniuses", "start": [2012, 3, 9, 19, 25, 0, 4, 69, -1], "description": "This talk covers the power and metaprogramming features of Python that cater to mad scientists and evil geniuses. This will also be of interest to others who just want to use of Python in a more power (hungry) way. The core concept is that you can synthesize functions, classes and modules without a direct correspondence to source code. You can also mutate third-party objects and apps.", "tags": "Talk, intermediate", "end_iso": "2012-03-09T20:20:00", "room_name": "Grand Ballroom H/G", "conf_key": "", "released": true, "authors": "Walker Hale", "start_iso": "2012-03-09T19:25:00", "room": "Track IV (E3)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/380/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<pre><code>Free, Libre and Open Source Software (FLOSS) began as a not-for-profit\nendeavor.  FLOSS licenses have, of course, always been designed to\npermit both commercial and non-commercial activity; however, the heart\nof FLOSS development remains in the not-for-profit space.  For\nexample, much of the early GNU software that makes up our modern\nGNU/Linux systems was written by staff developers employed by the Free\nSoftware Foundation (FSF) to write that software and release it under\nFree Software licenses.\n\nIn recent years, non-profits have been somewhat underutilized to\nadvance software freedom.  Most projects now organize informally, with\nboth volunteer contributors and corporate contributors.  Informal\naffiliations have their advantage, but the downside of no formal\norganization existing for the project itself can often lead to missed\nopportunities for the project.\n\nHowever, there are serious advantages of non-profit organizational\nstructure for FLOSS projects. Non-profits exist as \"neutral territory\"\nfor a project's community.  Funders -- including for-profit companies,\nnon-profit grant-making institutions and individuals -- can give\nthrough the non-profit to support the activity of the project\ngenerally instead of merely supporting one specific contributor.\nNon-profits can be used to advance the project's goals in a way that\nbenefits the public good, which adds an additional \"check\" to verify\nthe project has not been hijacked, for example, by a single for-profit\nvendor.\n\nThere are a variety of mechanisms that a project can use to become\nofficially a non-profit.  A project can create their own, or join an\nexisting non-profit \"fiscal sponsor\" who handles the non-profit\nactivity of the project on the project's behalf.  This talk will cover\nmany of the options that exist for FLOSS projects that wish to begin\noperating officially as an official not-for-profit organization.  Most\nof the talk will focus on the USA, but will also include some\ninternational considerations.\n</code></pre>", "presenters": "Bradley M. Kuhn", "duration": 40, "id": 134, "end": [2012, 3, 9, 20, 20, 0, 4, 69, -1], "title": "Non-Profit Centers of FLOSS Development", "last_updated_iso": "2012-02-28T13:42:58.977889", "name": "Non-Profit Centers of FLOSS Development", "start": [2012, 3, 9, 19, 40, 0, 4, 69, -1], "description": "Free, Libre & Open Source Software (FLOSS) began as a not-for-profit endeavor. FLOSS licenses permit commercial & non-commercial activity, but the heart of FLOSS remains in the not-for-profit space.  Kuhn will discuss advantages of non-profit structure and how non-profits facilitate neutral territory.  Kuhn will also present options for projects that seek to operate officially as a non-profit org.", "tags": "Talk, novice", "end_iso": "2012-03-09T20:20:00", "room_name": "Grand Ballroom F/E", "conf_key": "", "released": true, "authors": "Bradley M. Kuhn", "start_iso": "2012-03-09T19:40:00", "room": "Track V (E4)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/40/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>This talk is meant to give users a taste of what Sage is like, and why they might use it in the future.</p>\n<p>Intended for all levels of users, but the more Python you know, the easier it will be to use Sage.</p>\n<p>Sage is meant to be <em>the</em> open source platform for developing mathematical software, combining the best of other utilities. It uses Python as its primary development language, to give it a clean and powerful interface.</p>\n<p>This talk will introduce attendees to Sage, and demo some of its capabilities.</p>\n<p>Specifically, I'd cover some of the following features:</p>\n<ul>\n<li>Very quick intro: what Sage is and isn't, and how it compares to the Big Ms: Mathematica, Matlab, Magma, etc.</li>\n<li>Sage interpreter and notebook interface</li>\n<li>Standard Sage functions</li>\n<li>Plotting</li>\n<li>Algebra and Polynomials</li>\n<li>Number Theory</li>\n<li>Extending Sage: Python &amp; Cython</li>\n<li>Other things the audience cares about!</li>\n</ul>\n<p>This tutorial will not require any advanced math to understand and enjoy, but I will try to touch on as much of Sage as I can during the talk.</p>\n<p>I'm not a Sage expert, but merely an enthusiast.</p>", "presenters": "Christopher Swenson", "duration": 40, "id": 88, "end": [2012, 3, 9, 20, 20, 0, 4, 69, -1], "title": "Sage: Open Source Math in Python", "last_updated_iso": "2012-02-28T13:42:58.469256", "name": "Sage: Open Source Math in Python", "start": [2012, 3, 9, 19, 40, 0, 4, 69, -1], "description": "A quick introduction to Sage, an open-source mathematics package for experimentation in all areas of mathematics.  There will be some brief remarks and demos of what Sage is capable of.\r\n", "tags": "Talk, novice", "end_iso": "2012-03-09T20:20:00", "room_name": "Grand Ballroom C/D", "conf_key": "", "released": true, "authors": "Christopher Swenson", "start_iso": "2012-03-09T19:40:00", "room": "Track III (E2)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/39/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>Fundamentally, testing is about gaining confidence in the properties of your system- confidence that a refactor preserves behavior, that a new feature doesn't hurt performance, that your code is correct and operates as expected.</p>\n<p>Unfortunately, such tests seldom include the adversarial assumption- that one of your users (or admins, or ...) is out to get you. The goal of security testing is to cover this gap by building the tools to ensure that your code will not fail, even when an unusually clever or determined attacker tries to take you down.</p>\n<p>The talk is therefore divided into two major parts. The first ('mocking with malice') focuses on how to improve your existing test sequence and add the adversarial assumption. The second ('how to build a bad user') aims to help developers better understand their attack surface, the capabilities of their adversaries, and the tools available to help defeat them.</p>\n<p>By the end of the talk, developers should have a strong understanding of how to build security testing into their test regimen and how it can help them gain confidence in their code and better protect their users.</p>", "presenters": "Geremy Condra", "duration": 40, "id": 42, "end": [2012, 3, 9, 20, 20, 0, 4, 69, -1], "title": "Certainty in an Uncertain World: Gaining Confidence through Security Testing", "last_updated_iso": "2012-02-28T13:42:57.934630", "name": "Certainty in an Uncertain World: Gaining Confidence through Security Testing", "start": [2012, 3, 9, 19, 40, 0, 4, 69, -1], "description": "Nobody thinks you have to be a performance expert to write performance tests- why assume that you have to be a security expert to write security tests? During this presentation I'll show you how to use fuzzers, attack tools, and other simple techniques to help protect your users, improve the strength of your existing tests, and gain confidence in the security of your code. There will be demos!", "tags": "Talk, experienced", "end_iso": "2012-03-09T20:20:00", "room_name": "Mission City Ballroom", "conf_key": "", "released": true, "authors": "Geremy Condra", "start_iso": "2012-03-09T19:40:00", "room": "Track I (D5)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/48/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>Something is wrong with your web application. The time it\u2019s taking to serve requests is growing. Your logs don\u2019t contain enough. Your database appears bored. How do you know what\u2019s going wrong?</p>\n<p>In high-performance production servers it\u2019s vital to know as much about the internals of your system as possible. Traditionally this is done by simple methods like logging anything of potential interest or sending error emails with unexpected exceptions. These methods are insufficient, both due to the level of noise inherent in such systems and because of the difficulty in anticipating what metrics are important during an incident.</p>\n<p>Environments such as the JVM and .Net VM have advanced tools for communicating with the VM and for applications to expose internal state, but CPython has lacked similar tooling.</p>\n<p>This talk will cover what options CPython application developers have for introspecting their programs; new tools for instrumenting, exposing, and compiling performance and behavior metrics; and techniques for diagnosing runtime issues without restarting the process.</p>\n<h2>Outline</h2>\n<ul>\n<li>The problem<ul>\n<li>How do you know what your Python app is doing?</li>\n<li>How do you determine its current state without interrupting its current activity?</li>\n<li>What tools can you use to introspect, monitor, aggregate, and report that state?</li>\n</ul>\n</li>\n<li>Common and Uncommon Solutions<ul>\n<li>Logging (stdlib, logbook, twiggy)</li>\n<li>REPL Backdoors and gdb-heap</li>\n<li>Graphite and Scales</li>\n</ul>\n</li>\n<li>Other Platforms\u2019 Solutions<ul>\n<li>JVM: Metrics, JMX, jconsole, jstack, jmap</li>\n<li>.Net: WMI/System.Management, WinDbg, ManagedStackExplorer</li>\n<li>Ruby: ruby-metrics (Metrics/Scales for Ruby)</li>\n</ul>\n</li>\n<li>New Solutions for Python<ul>\n<li>socketconsole</li>\n<li>mmstats</li>\n</ul>\n</li>\n<li>Example instrumentation of a web application</li>\n</ul>", "presenters": "Adam Lowry", "duration": 40, "id": 66, "end": [2012, 3, 9, 21, 0, 0, 4, 69, -1], "title": "Introspecting Running Python Processes", "last_updated_iso": "2012-02-28T13:42:58.567318", "name": "Introspecting Running Python Processes", "start": [2012, 3, 9, 20, 20, 0, 4, 69, -1], "description": "Understanding the internal state of a running system can be vital to maintaining a high performance, stable system, but conventional approaches such as logging and error handling only expose so much. This talk will touch on how to instrument Python programs in order to observe the state of the system, measure performance, and identify ongoing problems.", "tags": "Talk, intermediate", "end_iso": "2012-03-09T21:00:00", "room_name": "Grand Ballroom A/B", "conf_key": "", "released": true, "authors": "Adam Lowry", "start_iso": "2012-03-09T20:20:00", "room": "Track II (E1)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/466/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 56, 1, 59, -1], "abstract": "<p>We host newspaper web sites and content management systems for several hundred newspapers.  The working set for all newspapers is too large to be effectively managed by individual application servers.  Manual distribution of load is inflexible and ineffective.  We created a resume-based dynamic and decentralized load balancer that distributed work to application servers in a way that greatly reduces the working set on each server.</p>\n<p>Outline:</p>\n<ul>\n<li>Problem</li>\n<li>Previous work</li>\n<li>Architecture<ul>\n<li>Request Classification</li>\n<li>Workers maintain their own resumes</li>\n<li>LB serves work to workers (and responses to browsers)</li>\n<li>Multiple load balancers</li>\n<li>WSGI integration</li>\n</ul>\n</li>\n<li>Results<ul>\n<li>Compare work distribution before and after</li>\n<li>Compare database cache utilization before and after</li>\n<li>Work distribution as workers are added and removed</li>\n<li>Limitations</li>\n</ul>\n</li>\n</ul>", "presenters": "Jim Fulton", "duration": 40, "id": 135, "end": [2012, 3, 9, 21, 0, 0, 4, 69, -1], "title": "A resume-based WSGI Load Balancer", "last_updated_iso": "2012-02-28T13:42:56.963189", "name": "A resume-based WSGI Load Balancer", "start": [2012, 3, 9, 20, 20, 0, 4, 69, -1], "description": "When a web application is large, it's a good idea to send different kinds of requests to different servers to reduce the content corpus managed by each server.  A decentralized load balancing-based approach is presented in which each application server keeps track of what it's good at and presents its resume to load balancers, which use application server resumes to distribute load.", "tags": "Talk, experienced", "end_iso": "2012-03-09T21:00:00", "room_name": "Grand Ballroom F/E", "conf_key": "", "released": true, "authors": "Jim Fulton", "start_iso": "2012-03-09T20:20:00", "room": "Track V (E4)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/210/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>Have you ever wondered what happens when you actually send some data over a TCP network connection?  To a Python programmer, it looks like you just call one method with some bytes.  But in reality, there's so much stuff that gets involved:</p>\n<ul>\n<li>Python hands off the data to the C library.</li>\n<li>The C library hands the data to your kernel.</li>\n<li>The kernel pokes some data into your ethernet card.</li>\n<li>Your ethernet card bounces some electrons off a switch.</li>\n<li>The switch sends those electrons out, possibly all the way to the internet.</li>\n<li>Later, they hit somebody else's ethernet card, which goes through the kernel, which reassembles the data stream, and wakes up a process, and gets read.</li>\n</ul>\n<p>I will talk about each of these different steps, how they work, what technology is involved, and, most relevant to your Python programs: how they can fail.</p>", "presenters": "Glyph", "duration": 40, "id": 112, "end": [2012, 3, 9, 21, 0, 0, 4, 69, -1], "title": "Through The Ether And Back Again: What Happens To A Packet When You Send It", "last_updated_iso": "2012-02-28T13:42:58.747083", "name": "Through The Ether And Back Again: What Happens To A Packet When You Send It", "start": [2012, 3, 9, 20, 20, 0, 4, 69, -1], "description": "Many - perhaps even most - Python software involves a network, at least a little bit.  You've probably written some yourself.  But do you really know what happens - to your kernel, to your ethernet card, to Python - when you call socket.send()?  Come to this talk and find out: if you dare.", "tags": "Talk, intermediate", "end_iso": "2012-03-09T21:00:00", "room_name": "Grand Ballroom H/G", "conf_key": "", "released": true, "authors": "Glyph", "start_iso": "2012-03-09T20:20:00", "room": "Track IV (E3)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/384/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<h2>Overview</h2>\n<p><a href=\"http://pandas.sourceforge.net\">pandas</a> is a Python library providing fast, expressive data structures for working with structured or relational data sets. In addition to being used for general purpose data manipulation and data analysis, it has also been designed to enable Python to become a competitive statistical computing platform. In this talk, I will discuss the library's features and show a variety of topical examples.</p>\n<p>In contrast to other tools in domain-specific data analysis languages like R, it features deeply integrated array axis indexing which enables intuitive data alignment, pivoting and reshaping, joining and merging, and other kinds of standard relational data manipulations. In particular, I would like to show how the library should be of interest to many Python users outside of the scientific Python community.</p>\n<h2>Outline</h2>\n<ul>\n<li>\n<p>Talk overview (1 min)</p>\n<ul>\n<li>Examples and survey of ecosystem</li>\n<li>What matters for structured / relational data problems</li>\n<li>pandas library deep dive with demos</li>\n<li>Example application or two</li>\n<li>Extensions and future direction</li>\n</ul>\n</li>\n<li>\n<p>Motivating examples (3 min)</p>\n<ul>\n<li>SQL databases</li>\n<li>Flat files</li>\n<li>Spreadsheet operations and pivot tables</li>\n<li>Statistical data sets (with missing data)</li>\n<li>Time series data</li>\n</ul>\n</li>\n<li>\n<p>Brief survey of non-scientific Python ecosystem (2 min)</p>\n<ul>\n<li>Python stdlib: collections, itertools, etc.</li>\n<li>Miscellaneous libraries: CSVKit, asciitable, others</li>\n<li>Database abstraction layers: SQLAlchemy, etc.</li>\n</ul>\n</li>\n<li>\n<p>Scientific Python Libraries (1 min)</p>\n<ul>\n<li>NumPy</li>\n<li>PyTables / HDF5</li>\n<li>pandas</li>\n<li>tabular</li>\n<li>larry, datarray</li>\n</ul>\n</li>\n<li>\n<p>Features that matter for structured data (5 min)</p>\n<ul>\n<li>Tabular data structures with heterogeneous columns</li>\n<li>Rich indexing capability, including hierarchical indexing</li>\n<li>Flexible organization of irregular data</li>\n<li>Integrated data alignment</li>\n<li>Missing data handling</li>\n<li>Group by / aggregation functionality</li>\n<li>Joining / merging capability</li>\n<li>Reshaping / pivoting operations</li>\n<li>\n<p>Other \"domain specific\" features</p>\n<ul>\n<li>Data visualization (matplotlib)</li>\n<li>Time series functionality</li>\n<li>Integration with statistical models</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>pandas library overview (3 min)</p>\n<ul>\n<li>A high-performance, NumPy-based library designed to solve all of the above\n  problems</li>\n<li>Intro to labeled vector (Series) object and tabular data structure, the\n  DataFrame</li>\n<li>Size mutability (table column insertion and deletion)</li>\n</ul>\n</li>\n<li>\n<p>Indexing (5 min)</p>\n<ul>\n<li>Simple indexing with unique labels</li>\n<li>Data alignment on labels</li>\n<li>Hierarchical indexing</li>\n<li>Reindexing and subset selection</li>\n</ul>\n</li>\n<li>\n<p>GroupBy and aggregation (5 minutes)</p>\n<ul>\n<li>How GroupBy relates to indexing</li>\n<li>Iterating over groups</li>\n<li>Aggregating, transforming</li>\n<li>Building custom grouping logic</li>\n</ul>\n</li>\n<li>\n<p>Pivoting and reshaping data sets (5 minutes)</p>\n<ul>\n<li>Simple Spreadsheet example (Excel, OpenOffice)</li>\n<li>Show same pivot table example in Python with pandas</li>\n<li>Reshaping functions: stack and unstack</li>\n<li>Relationship to GroupBy</li>\n</ul>\n</li>\n<li>\n<p>Data analysis and visualization (5 minutes)</p>\n<ul>\n<li>Descriptive statistics with missing data</li>\n<li>Binary operations between pandas data structures</li>\n<li>Integration with matplotlib</li>\n<li>Integration with statsmodels for statistics</li>\n</ul>\n</li>\n<li>\n<p>Time series functionality (3 minutes)</p>\n<ul>\n<li>Date range generation</li>\n<li>Resamping / frequency conversion</li>\n<li>Time series plotting</li>\n</ul>\n</li>\n<li>\n<p>Some basic performance benchmarks</p>\n</li>\n<li>\n<p>Comparisons with other tools (2 minutes)</p>\n<ul>\n<li>NumPy structured arrays (a.k.a. record arrays)</li>\n<li>Other SciPy libraries: larry, tabular,</li>\n<li>R language</li>\n</ul>\n</li>\n<li>\n<p>Future directions and other ideas (3 minutes)</p>\n<ul>\n<li>pandas-optimized database drivers (ODBC, MySQL, Postgres, etc.)</li>\n<li>Adapt pandas for big data processing, map reduce</li>\n</ul>\n</li>\n</ul>", "presenters": "Wes McKinney", "duration": 40, "id": 89, "end": [2012, 3, 9, 21, 0, 0, 4, 69, -1], "title": "pandas: Powerful data analysis tools for Python", "last_updated_iso": "2012-02-28T13:42:58.912815", "name": "pandas: Powerful data analysis tools for Python", "start": [2012, 3, 9, 20, 20, 0, 4, 69, -1], "description": "pandas is a Python library providing fast, expressive data structures for working with structured or relational data sets. In addition to being used for general purpose data manipulation and data analysis, it has also been designed to enable Python to become a competitive statistical computing platform. In this talk, I will discuss the library's features and show a variety of topical examples.\r\n", "tags": "Talk, experienced", "end_iso": "2012-03-09T21:00:00", "room_name": "Grand Ballroom C/D", "conf_key": "", "released": true, "authors": "Wes McKinney", "start_iso": "2012-03-09T20:20:00", "room": "Track III (E2)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/416/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>Continuous deployment (and testing) has started to become a reality for many companies. It brings to light one of the many problems that face large product teams, but also creates some of its own.</p>\n<p>This talk will focus on the pros and cons of continuous deployment, how DISQUS switched from the recurring release cycle to continuous releases, as well as providing tips and arguments for adopting it in your workplace.</p>", "presenters": "David Cramer", "duration": 40, "id": 43, "end": [2012, 3, 9, 21, 0, 0, 4, 69, -1], "title": "Practicing Continuous Deployment", "last_updated_iso": "2012-02-28T13:42:57.515045", "name": "Practicing Continuous Deployment", "start": [2012, 3, 9, 20, 20, 0, 4, 69, -1], "description": "Practice iterative development like the pros. Release sooner, faster, and more often.", "tags": "Talk, novice", "end_iso": "2012-03-09T21:00:00", "room_name": "Mission City Ballroom", "conf_key": "", "released": true, "authors": "David Cramer", "start_iso": "2012-03-09T20:20:00", "room": "Track I (D5)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/12/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 12, 16, 59, 1, 59, -1], "abstract": null, "presenters": "", "duration": 5, "id": 155, "end": [2012, 3, 9, 21, 5, 0, 4, 69, -1], "title": "Friday End of Day Address", "last_updated_iso": [2012, 2, 28, 12, 16, 59, 1, 59, -1], "name": "Friday End of Day Address", "start": [2012, 3, 9, 21, 0, 0, 4, 69, -1], "description": "", "tags": "plenary", "end_iso": "2012-03-09T21:05:00", "conf_key": "", "released": true, "authors": "", "start_iso": "2012-03-09T21:00:00", "room": "Plenary", "license": "", "url": null, "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 12, 17, 48, 1, 59, -1], "abstract": null, "presenters": "", "duration": 30, "id": 158, "end": [2012, 3, 10, 12, 0, 0, 5, 70, -1], "title": "Saturday Morning Lightning talks", "last_updated_iso": [2012, 2, 28, 12, 17, 48, 1, 59, -1], "name": "Saturday Morning Lightning talks", "start": [2012, 3, 10, 11, 30, 0, 5, 70, -1], "description": "", "tags": "plenary", "end_iso": "2012-03-10T12:00:00", "conf_key": "", "released": true, "authors": "", "start_iso": "2012-03-10T11:30:00", "room": "Plenary", "license": "", "url": null, "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 6, 18, 18, 21, 0, 37, -1], "abstract": null, "presenters": "", "duration": 5, "id": 159, "end": [2012, 3, 10, 12, 5, 0, 5, 70, -1], "title": "Introduction and Welcome", "last_updated_iso": [2012, 2, 6, 18, 18, 21, 0, 37, -1], "name": "Introduction and Welcome", "start": [2012, 3, 10, 12, 0, 0, 5, 70, -1], "description": "", "tags": "plenary", "end_iso": "2012-03-10T12:05:00", "conf_key": "", "released": true, "authors": "", "start_iso": "2012-03-10T12:00:00", "room": "Plenary", "license": "", "url": null, "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 15, 16, 55, 43, 2, 46, -1], "abstract": null, "presenters": "", "duration": 10, "id": 160, "end": [2012, 3, 10, 12, 15, 0, 5, 70, -1], "title": "Python Software Foundation Chairman's Address", "last_updated_iso": [2012, 2, 15, 16, 55, 43, 2, 46, -1], "name": "Python Software Foundation Chairman's Address", "start": [2012, 3, 10, 12, 5, 0, 5, 70, -1], "description": "", "tags": "plenary", "end_iso": "2012-03-10T12:15:00", "conf_key": "", "released": true, "authors": "", "start_iso": "2012-03-10T12:05:00", "room": "Plenary", "license": "", "url": null, "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 20, 7, 34, 28, 0, 51, -1], "abstract": null, "presenters": "", "duration": 45, "id": 163, "end": [2012, 3, 10, 13, 0, 0, 5, 70, -1], "title": "Keynote: David Beazley", "last_updated_iso": [2012, 2, 20, 7, 34, 28, 0, 51, -1], "name": "Keynote: David Beazley", "start": [2012, 3, 10, 12, 15, 0, 5, 70, -1], "description": "", "tags": "plenary", "end_iso": "2012-03-10T13:00:00", "conf_key": "", "released": true, "authors": "", "start_iso": "2012-03-10T12:15:00", "room": "Plenary", "license": "", "url": null, "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<h1 id=\"the_journey_to_give_every_scientist_a_supercomputer\">The Journey to Give Every Scientist a Supercomputer</h1>\n<h2 id=\"background_2_min\">Background (2 min)</h2>\n<p>The recent cloud buzz has largely benefited Python web application developers using web frameworks such as Django. Google AppEngine, for example, allows anybody in the world to easily host their own website. But, for Python's formidable scientific community, the cloud has been noticeably less helpful--until now.  PiCloud is a Python-based cloud platform that tackles a noble cause: giving every scientist in the world instant access to a supercomputer. The talk will cover how Python inspired the design of PiCloud, which has now processed over 100M jobs.</p>\n<h2 id=\"piclouds_vision_3_min\">PiCloud's Vision (3 min)</h2>\n<p>PiCloud offers the easiest way to utilize the cloud for compute-intensive applications; more specifically, applications in scientific computing, high-performance computing, and batch processing. With only a couple lines of Python code, scientists, developers, and engineers on our platform can leverage thousands of cores of computational power on-demand.</p>\n<p>Our goal is to make computing power a utility for scientists in the same way that electricity is for modern society: available to everyone, seemingly infinite in quantity, and readily accessible with a flip of a switch. We achieve this by being a serverless cloud. In other words, our users each get the power of a supercomputer at their fingertips without having to design, provision, or administer any servers.</p>\n<p><img src=\"http://www.floss4science.com/wp-content/uploads/2011/09/computing_power_as_a_utility-300x175.png\" alt=\"picture alt\" title=\"Computing Power as a Utility\"/></p>\n<h2 id=\"how_python_inspired_picloud_10_min\">How Python Inspired PiCloud (10 min)</h2>\n<p>PiCloud was started thanks to a serendipitous collision of computer vision and a curiosity for the Python language. In 2009, we were working on a fun application called AutoTagger to automatically tag peoples faces on Facebook. While we coded the project in Python and C++ using extensions, we realized we were spending over half of our time administering our cluster to process thousands of photos in parallel, rather than on our Python vision algorithms. At the same time, being fairly new to Python, we were exploring some of Python's more intricate features: pickling, function and module introspection, variable keyword arguments, and higher-order functions.</p>\n<p>With Python's amazing toolbox at our disposable, we realized we could provide a Pythonic way for anyone, but especially scientists, to use an innumerable number of cores without ever having to halt the development of their algorithms to manage servers. The result was the cloud package, which takes advantage of many of Python's introspective features to automatically move computational work to the cloud. Here's a simple example to showcase how easy it is:</p>\n<pre><code>import cloud\nfrom autotagger.vision import face_detector\nfrom autotagger.facebook import get_friends_photos\n\nlist_of_photos = get_friends_photos()\n\n# detect the faces of my friends in parallel on the cloud\njob_ids = cloud.map(face_detector, list_of_photos)\n</code></pre>\n<p>Two new lines of code unlock the power of potentially thousands of cores on the cloud. We'll also show the a-ha moment where we realized the automagic of PiCloud was possible.</p>\n<h2 id=\"accelerating_the_speed_of_science_8_min\">Accelerating the Speed of Science (8 min)</h2>\n<p>Python's strength is its diversity of users. Thanks to its readability, ease of use, and extensive libraries (NumPy, SciPy, etc...), Python is popular among all scientists, rather than just computer scientists. Likewise, PiCloud's focus on simplicitly caters to those who aren't necessarily programmers by training. We believe accessibility is critical in an age where science has become increasingly reliant on server farms for data analysis.</p>\n<p>Examples of what's been done on PiCloud with Python:</p>\n<ul>\n<li><a href=\"http://blog.picloud.com/2011/09/27/building-a-biological-database-and-doing-comparative-genomics-in-the-cloud/\">Bioinformaticians performing genomic sequencing</a></li>\n<li><a href=\"http://blog.picloud.com/2011/10/11/determining-life-cycles-of-natural-disasters-with-picloud/\">Social scientists crunching data from Twitter</a></li>\n<li>Geophysicists doing seismic analysis</li>\n<li>Neuroscientists analyzing images of neurons</li>\n<li>Computer scientists running natural language processing algorithms on large datasets</li>\n</ul>\n<p>We've opened up the accessibility and availability of computing to everyone in the world who doesn't work at a national laboratory, or a Google. It's for this reason that we were credited by a user as \"accelerating the speed of science.\" PiCloud has processed over 100 million jobs for our three thousand users worldwide.</p>\n<h2 id=\"going_from_concept_to_platform_5_min\">Going from Concept to Platform (5 min)</h2>\n<p>Initially as a two-man team, we were hard-pressed to develop fast and release quickly to validate our idea to ourselves and potential investors. Python was a great choice of language for us because it allowed us to develop fast without sacrificing readability with only modest sacrifices in performance; we made sure that all the heavy lifting was done in Python libraries that pushed worked to C. We're happy to share stories of features that had to be built in 0 days, and were thanks to Python. :)</p>\n<p>For audience members looking to start a new project: There are a lot of technology building blocks are readily available and robust that make it incredibly easy to go from concept to product in a short time frame with a small team.</p>\n<h2 id=\"architecture_5_min\">Architecture (5 min)</h2>\n<p>Since PiCloud is built almost entirely in Python for Python, we will share novel portions of our architecture. This section is dedicated to educating the audience on the next-generation of distributed systems that are made possible by the ease of server provisioning on the cloud and Python.</p>\n<ul>\n<li>PiCloud grows and shrinks on its own. Our automated scaling system written in Python using SciPy estimates the computational load on our servers in real-time and without human-intervention scales the number of servers in our farm to match demand.</li>\n<li>PiCloud has a customized serializer (we've open-sourced it), which allows for the automatic serialization of files, modules, and byte code for anonymous functions, to make the process of offloading computation to the cloud as easy as possible.</li>\n<li>Extremely fast scheduler written in pure Python</li>\n<li>Control Panel using Django</li>\n</ul>\n<h2 id=\"conclusion_1_min\">Conclusion (1 min)</h2>\n<p>We owe our gratitude to the entire Python community. More than just forming the bedrock of our platform, they've enabled us to change the face of parallel computing and empower thousands of scientists around the world.</p>", "presenters": "Ken Elkabany", "duration": 40, "id": 90, "end": [2012, 3, 10, 14, 5, 0, 5, 70, -1], "title": "The Journey to Give Every Scientist a Supercomputer", "last_updated_iso": "2012-02-28T13:42:58.350306", "name": "The Journey to Give Every Scientist a Supercomputer", "start": [2012, 3, 10, 13, 25, 0, 5, 70, -1], "description": "The recent cloud buzz has hugely benefited Python web devs. But, for Python's formidable scientific community, the cloud has been less ambitious--until now.  PiCloud is a Python-based cloud platform that tackles a noble cause: giving every scientist in the world instant access to a supercomputer. The talk will cover how Python inspired the design of PiCloud, which has now processed over 100M jobs.", "tags": "Talk, novice", "end_iso": "2012-03-10T14:05:00", "room_name": "Grand Ballroom C/D", "conf_key": "", "released": true, "authors": "Ken Elkabany", "start_iso": "2012-03-10T13:25:00", "room": "Track III (E2)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/463/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>Harness the power of Django templates to help present your data with ease!  Learn about:<br/>\n</p>\n<ul>\n<li>Basic block formations, common patterns, and using includes wisely.</li>\n<li>Tips and tricks in using the built-in template tags and filters.</li>\n<li>How to make custom tags and filters: examples, what you should and shouldn\u2019t do, and tools to help the process such as django-classy-tags.</li>\n<li>Different ways to load and render templates.</li>\n<li>Replacing Django\u2019s default template language: pros and cons</li>\n</ul>", "presenters": "Christine Cheung", "duration": 40, "id": 136, "end": [2012, 3, 10, 14, 5, 0, 5, 70, -1], "title": "Django Templating: More Than Just Blocks", "last_updated_iso": "2012-02-28T13:42:58.250280", "name": "Django Templating: More Than Just Blocks", "start": [2012, 3, 10, 13, 25, 0, 5, 70, -1], "description": "Django's template language is designed to strike a balance between power and ease of use; learn how to use this balance to create awesome looking websites. This talk will cover the basics and best practices of Django templating, from custom tag and filter creation, to the finer points of template rendering and loading, and even to replacing the default templating engine itself.  ", "tags": "Talk, experienced", "end_iso": "2012-03-10T14:05:00", "room_name": "Grand Ballroom F/E", "conf_key": "", "released": true, "authors": "Christine Cheung", "start_iso": "2012-03-10T13:25:00", "room": "Track V (E4)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/80/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>This talk with introduce the Arduino microcontroller and show how to interact with it using Python. With a serial line command protocol, Python code can easily turn on digital I/O pins to turn on LEDs, change the pulse width modulation (PWM) to alter brightness or move a stepper motor. Examples will be shown of a small robot that has a pair of 2 axis gimbles that serve as eyes and of controlling fire effect sequencing.</p>\n<p>Outline</p>\n<ul>\n<li>Introduction</li>\n<li>Overview of the Arduino</li>\n<li>Open Source Hardware and Software</li>\n<li>Hardware<ul>\n<li>Microcontroller</li>\n<li>I/O pins</li>\n<li>Serial port(s)</li>\n<li>USB port</li>\n</ul>\n</li>\n<li>Software<ul>\n<li>IDE</li>\n<li>Code in C</li>\n<li>Extensive library</li>\n</ul>\n</li>\n<li>Python controlling an Arduino</li>\n<li>USB based serial port</li>\n<li>Serial protocols<ul>\n<li>Home grown</li>\n<li>Modbus</li>\n<li>Firmata</li>\n<li>Errors will happen</li>\n</ul>\n</li>\n<li>Examples</li>\n<li>Exuro - robot with a pair of 2 axis gimbles</li>\n<li>Fire Effects - Solenoid sequence controls</li>\n<li>Questions and Comments</li>\n</ul>", "presenters": "Peter Kropf", "duration": 40, "id": 44, "end": [2012, 3, 10, 14, 5, 0, 5, 70, -1], "title": "Python Meets the Arduino", "last_updated_iso": "2012-02-28T13:42:58.656104", "name": "Python Meets the Arduino", "start": [2012, 3, 10, 13, 25, 0, 5, 70, -1], "description": "Arduino is an open-source electronics prototyping platform based on flexible, easy-to-use hardware and software. Python is our favorate programming language that allows you to integrate systems more effectively. Learn how to use Python to communicate with an Arduino and interact with sensors, solenoids and motors.", "tags": "Talk, experienced", "end_iso": "2012-03-10T14:05:00", "room_name": "Mission City Ballroom", "conf_key": "", "released": true, "authors": "Peter Kropf", "start_iso": "2012-03-10T13:25:00", "room": "Track I (D5)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/41/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<ul>\n<li>Defining an \"instant\"</li>\n<li>Silly timezones<ul>\n<li>In the <a href=\"http://lucumr.pocoo.org/2011/7/15/eppur-si-muove/\">words of Armin Ronacher</a>:<ul>\n<li>Always measure and store time in UTC</li>\n<li>Do not use offset aware datetimes</li>\n<li>If you are taking in user input that is in local time, immediately convert it to UTC. If that conversion would be ambiguous let the user know.</li>\n<li>Rebase for Formatting (then throw away that filthy offset aware datetime object)</li>\n</ul>\n</li>\n<li><a href=\"http://unix4lyfe.org/time/\">Emil Mikulik on time</a><ul>\n<li>UTC vs UT1 vs UNIX time</li>\n<li>Timezones are a presentation-layer problem!</li>\n</ul>\n</li>\n<li>Getting timezone information: <code>pytz</code> vs <code>python-dateutil</code></li>\n</ul>\n</li>\n<li>Na\u00efve vs Aware datetimes<ul>\n<li><code>datetime.now(tz)</code> vs <code>datetime.utcnow()</code></li>\n<li>What does <code>tm_isdst</code> actually <em>mean</em></li>\n<li><code>datetime</code> vs <code>struct_time</code> vs UNIX time</li>\n</ul>\n</li>\n<li>How to store them?<ul>\n<li>Using UNIX time: <code>time.gmtime()</code> and <code>calendar.timegm()</code></li>\n<li>Using MySQL (date, datetime, timestamp)</li>\n<li>Using Postgres (date, timestamp)</li>\n<li>Using Sqlite (text, real, integer)</li>\n<li>To talk to <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date\">JavaScript</a></li>\n</ul>\n</li>\n<li>Formatting with offsets<ul>\n<li><code>strftime</code> and <code>%z</code> and friends, e.g. to simulate syslog log lines</li>\n</ul>\n</li>\n</ul>", "presenters": "Taavi Burns", "duration": 40, "id": 113, "end": [2012, 3, 10, 14, 5, 0, 5, 70, -1], "title": "What you need to know about datetimes", "last_updated_iso": "2012-02-28T13:42:58.483767", "name": "What you need to know about datetimes", "start": [2012, 3, 10, 13, 25, 0, 5, 70, -1], "description": "`time`, `datetime`, and `calendar` from the standard library are a bit messy. Find out what to use where and how (particularly when you have users in many timezones), and what extra modules you might want to look into.\r\n", "tags": "Talk, novice", "end_iso": "2012-03-10T14:05:00", "room_name": "Grand Ballroom H/G", "conf_key": "", "released": true, "authors": "Taavi Burns", "start_iso": "2012-03-10T13:25:00", "room": "Track IV (E3)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/255/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>In this talk we'll talk about PyPy's present status and for what kinds\nof applications it might be useful. We'll also show examples of things\nthat are possible with PyPy that were impossible to do with Python before,\nlike real time video processing done in pure python. Our objective with\neach of the examples will be to highlight the type of work that is sped up\nand why this represents both a boon for existing Python programmers, as well\nas an opportunity for Python to expand to new audiences.</p>\n<p>We'll also explain a bit PyPy's accomplishements in the passing year that\nmake all of this possible, current status, its goals and the near future.</p>", "presenters": "Maciej Fijalkowski, Alex Gaynor, Armin Rigo", "duration": 40, "id": 67, "end": [2012, 3, 10, 14, 5, 0, 5, 70, -1], "title": "Why PyPy by example", "last_updated_iso": "2012-02-28T13:42:57.998524", "name": "Why PyPy by example", "start": [2012, 3, 10, 13, 25, 0, 5, 70, -1], "description": "One of the goals of PyPy is to make existing Python code faster, however an\r\neven broader goal was to make it possible to write things in Python that\r\nprevious would needed to be written in C or other low-level language.\r\nThis talk will show examples of this, and describe how they represent\r\nthe tremendous progress PyPy has made, and what it means for people looking\r\nto use PyPy.", "tags": "Talk, experienced", "end_iso": "2012-03-10T14:05:00", "room_name": "Grand Ballroom A/B", "conf_key": "", "released": true, "authors": "Maciej Fijalkowski, Alex Gaynor, Armin Rigo", "start_iso": "2012-03-10T13:25:00", "room": "Track II (E1)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/244/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>Strictly speaking, PyPy doesn't have a JIT; it has a JIT generator. I will describe how the JIT is generated during the translation of the interpreter as well as the advantages of the meta-JIT method.</p>\n<p>Next, we'll explore tracing, in which the JIT records operations in a hot loop. I'll introduce the meta interpreter and the JIT IR (intermediate representation).</p>\n<p>Optimizations are the next step of JITing. The focus will be on the most important optimizations for dynamic languages: virtuals and virtualizables. However, PyPy also includes the standard set of compiler peephole optimizations, like strength reduction, and well as some more complicated loop optimizations, like constant hoisting.</p>\n<p>The final topic will be assembly generation. We'll see register allocation and how specific high-level Python operations are compiled down to tight x86 instructions.</p>\n<p>Time permitting, additional topics may include how the garbage collector is integrated with the JIT and how the JIT bails back to the interpreter when a guard fails.</p>\n<p>Along the way, I will demonstrate how each phase of JITing acts on an example Python loop. This will also allow me to introduce the jitviewer, a program to view how PyPy is compiling your loops.</p>", "presenters": "Benjamin Peterson", "duration": 40, "id": 68, "end": [2012, 3, 10, 14, 45, 0, 5, 70, -1], "title": "How the PyPy JIT works", "last_updated_iso": "2012-02-28T13:42:57.583439", "name": "How the PyPy JIT works", "start": [2012, 3, 10, 14, 5, 0, 5, 70, -1], "description": "The Python community is abuzz about the major speed gains PyPy can offer pure Python code. But how does PyPy JIT actually work? This talk will discuss how the PyPy JIT is implemented. It will include descriptions of the tracing, optimization, and assembly generation phases. I will demonstrate each step with a example loop.", "tags": "Talk, intermediate", "end_iso": "2012-03-10T14:45:00", "room_name": "Grand Ballroom A/B", "conf_key": "", "released": true, "authors": "Benjamin Peterson", "start_iso": "2012-03-10T14:05:00", "room": "Track II (E1)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/58/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>This talk is aimed to the beginner to intermediate Python developer because it covers basic uses of certain parts of the standard library. it should also be of interest to people who are curious about digital fabrication and geometry.</p>\n<p>First, 2 personal fabrication machines are presented: A Sherline Milling machine and the latest Makerbot dual extruder 3D printer. A very quick functioning overview is presented, showing how electric pulses are translated to XYZ movements of the toolheads, as well as the difference between hot plastic extrusion onto a surface and milling away material.</p>\n<p>Then the rationale for a machine controller software is explained (being able to control the machine in terms of distances and feed rates rather than pulses), and an overview of gcode is provided.\nThe first python scripts demonstrated generate gcode for milling operation. They are based on the code behind http://machinetouch.appspot.com</p>\n<p>http://machinetouch.appspot.com/svgEngraver.py is presented with 2 or 3 slides of code and a Python logo is then engraved (live demo, 5 min) while an overview of the code is given:\n- how primitives map to python methods and gcode. \n- how it was easy to move from a console app to gui and to a web app using only the standard library features.\n- how this parametric approach to design allows the user to change certain aspects (materials, forms) and regenerate the tool path automatically (as opposed to a static drawing or the normal CAM based approach)</p>\n<p>The second part of the talk deals with 3D printing. The 3D printer is demoed first (loading a 3D model file, creating slices with the desired density and launching the tool), because the print will last about 10 minutes. \nAs the machine runs, the following python code will be shown:\n- extracting triangles from an stl file using generators\n- slicing: finding intersection contours at a given height\n- pathing: generating patterns for the extruder\n- hard core parallelization of certain tasks using pyOpenCl (TBD, depending on the code base available)\nThe presentation ends by assembling the new object made entirely from a digital representation (except for the LED circuit).<br/>\nThe code will be based on Skeinforge of Makerbot\u2019s new slicer (in development in Python3 right now).</p>\n<p>Makerbot operators are growing in numbers (more than 4000 units of open hardware sold) and all use Python to slice their 3D models and print them. </p>", "presenters": "Hugo Boyer", "duration": 40, "id": 45, "end": [2012, 3, 10, 14, 45, 0, 5, 70, -1], "title": "Python for makers", "last_updated_iso": "2012-02-28T13:42:57.824652", "name": "Python for makers", "start": [2012, 3, 10, 14, 5, 0, 5, 70, -1], "description": "Digital fabrication is the art of translating digital designs into physical objects. Using personal machines that are controlled via software, a live demonstration of CNC milling and 3D printing will also be performed. This talk is a walkthrough from 3D models to machine motion, that shows how we can use Python to write GCODE generators that create endless form.  ", "tags": "Talk, experienced", "end_iso": "2012-03-10T14:45:00", "room_name": "Mission City Ballroom", "conf_key": "", "released": true, "authors": "Hugo Boyer", "start_iso": "2012-03-10T14:05:00", "room": "Track I (D5)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/282/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>Django Form processing often takes a back seat to flashier, more visible parts of the framework. But Django forms are an integral part of the framework that can help developers be more productive and write more cohesive, well tested code. This talk will dive deep into the stock Django forms package, providing an examples of: </p>\n<ul>\n<li>custom validation and validation patterns</li>\n<li>processing multiple forms at once (form sets)</li>\n<li>persisting validated form data to models (model forms)</li>\n</ul>\n<p>We'll also discuss ways to build on Django forms, including:</p>\n<ul>\n<li>writing unit and integration tests for forms, and how writing tests can help you understand code cohesion</li>\n<li>abstracting validation for forms to provide tiered validation (for example, one set of criteria to save, additional criteria to publish)</li>\n<li>approaches to working with multiple, heterogeneous forms simultaneously</li>\n</ul>", "presenters": "Nathan Yergler", "duration": 40, "id": 137, "end": [2012, 3, 10, 14, 45, 0, 5, 70, -1], "title": "Django Form Processing Deep Dive ", "last_updated_iso": "2012-02-28T13:42:58.190023", "name": "Django Form Processing Deep Dive ", "start": [2012, 3, 10, 14, 5, 0, 5, 70, -1], "description": "Django Form processing often takes a back seat to flashier, more visible parts of the framework. But Django forms, fully leveraged, can help developers be more productive and write more cohesive code. This talk will dive deep into the stock Django forms package, as well as discuss a strategy for abstracting validation for forms, and the use of unit and integration tests with forms.", "tags": "Talk, experienced", "end_iso": "2012-03-10T14:45:00", "room_name": "Grand Ballroom F/E", "conf_key": "", "released": true, "authors": "Nathan Yergler", "start_iso": "2012-03-10T14:05:00", "room": "Track V (E4)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/420/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<h2>Detailed description</h2>\n<p>We will first discuss the data structures to efficiently load and hold\ntime-series using standard Numpy arrays, the recently modified\ndatetime package of Numpy and some domain specific libraries like scikits.timeseries, Pandas, Larry, etc. We will walk through the strength and use cases for each of these tools.<br/>\n</p>\n<p>Storing time-series has evolved drastically in the last years. Regular\nrelational databases written in all common languages (sqlite, PostgreSQL, Oracle, MySQL, ...) can be used and interfaced from Python using a set of standard modules. Python also provides access to standard hierarchical data formats (HDF5, netcdf, ..) with the needed packages to read and write them efficiently (pytables or h5py). We will\nillustrate with a few examples how relational databases and hierarchical datasets can be used for storing time series. The focus will be made on trade-offs between the two data models. </p>\n<p>Data analysis in Python can again leverage many open source packages\nin SciPy and the scikits ecosystem around. We will review packages in\nSciPy that can be useful for statistical analysis, and Monte Carlo simulations to deal with forecasts and statistical\nknowledge. Additional regression and statistical tools can also be found in the statsmodels scikits which will be illustrated if time permits. </p>\n<p>The final part of the talk will present tools to visualize these time-series in a powerful 2D visualization library: Chaco. Part of the Enthought Tool Suite, Chaco is an open source package that focuses on dealing with large datasets. It allows to quickly develop custom tools to interact with the plot: selection tools, overlays, ...<br/>\n</p>\n<p>Combining the Python language with some powerful packages like Numpy, Pytables and Chaco allow one to create a time-series data management platform that is robust, fast, maintainable and open. </p>\n<h2>Target audience</h2>\n<p>This talk aims at intermediate level scientific programmers with an interest in time-series management and won't assume any prior knowledge in the packages discussed, except regular Python and Numpy.</p>", "presenters": "Jonathan Rocher", "duration": 40, "id": 114, "end": [2012, 3, 10, 14, 45, 0, 5, 70, -1], "title": "Storing, manipulating and visualizing timeseries using open source packages in Python", "last_updated_iso": "2012-02-28T13:42:57.621623", "name": "Storing, manipulating and visualizing timeseries using open source packages in Python", "start": [2012, 3, 10, 14, 5, 0, 5, 70, -1], "description": "Analyzing, storing and visualizing time-series efficiently are recurring though difficult tasks in various aspects of scientific data analysis such as meteorological forecasting, financial modeling, ... In this talk we will explore the current Python ecosystem for doing this effectively, comparing options, using only open source packages that are mature yet still under active development.", "tags": "Talk, experienced", "end_iso": "2012-03-10T14:45:00", "room_name": "Grand Ballroom H/G", "conf_key": "", "released": true, "authors": "Jonathan Rocher", "start_iso": "2012-03-10T14:05:00", "room": "Track IV (E3)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/407/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>While drawing enlightening comparisons between SQLAlchemy, the Django ORM, and several NoSQL databases, this talk will focus most of its energy on understanding relational databases \u2014 a technology foundation that has been steadily improved since the early 1970s. The talk will first tackle the big questions that all databases have to answer, then teach specific SQLAlchemy techniques for taking advantage of relational queries.</p>\n<ol>\n<li>\n<p><strong>Records and Indexes:</strong> whether a database is relational, key-value, document-based, or hierarchical, it must both store some kind of record, and also allow indexes to be built across its collection of records. After reviewing why hardware speeds make indexes a necessity, we will consider their structure, performance, cost (especially for writing), and the trade-offs between building them directly from data versus through functions or map-reduce mechanisms.</p>\n</li>\n<li>\n<p><strong>The Relational Algebra and Query Optimization:</strong> we will learn \u2014 using concrete, well-illustrated examples \u2014 how relational databases use a combination of powerful indexes and intelligent query planning to support \u201cnormalized\u201d data storage. This will be briefly contrasted with the different normalizations approach encouraged by modern document databases.</p>\n</li>\n<li>\n<p><strong>Building Queries:</strong> with brief glances at pure SQL syntax for the very curious, we will learn how SQLAlchemy lets you build SQL queries as a series of Python method calls. We will see how queries can return either raw rows or ORM class instances, and how the use of joins reduces the number of round-trips to the database.</p>\n</li>\n<li>\n<p><strong>Advanced ORM:</strong> finally, we will use our knowledge of database structure and queries to see how high-level ORM operations can benefit from eager loading, query-specific indexes, query logging, and the EXPLAIN operator to learn how your database is \u2014 or is not \u2014 optimizing your operations. Finally, we will review the transactional nature of relational databases and learn about the SQLAlchemy object cache (pointing out the big difference between it and the Django ORM), the SQLAlchemy unit-of-work construct, and how these can vastly confuse you if you are not prepared for their behavior.</p>\n</li>\n</ol>", "presenters": "Brandon Rhodes", "duration": 40, "id": 91, "end": [2012, 3, 10, 14, 45, 0, 5, 70, -1], "title": "Flexing SQLAlchemy's Relational Power", "last_updated_iso": "2012-02-28T13:42:58.175144", "name": "Flexing SQLAlchemy's Relational Power", "start": [2012, 3, 10, 14, 5, 0, 5, 70, -1], "description": "How do you take the big step from casual SQLAlchemy user, who treats your database as a mysterious object store, to advanced power user, who optimizes critical queries, plans indexing and migrations, and generates efficient reports? This talk will teach you how databases think; why humanity invented the Relational Algebra; and how SQLAlchemy grants you access to relational power.", "tags": "Talk, experienced", "end_iso": "2012-03-10T14:45:00", "room_name": "Grand Ballroom C/D", "conf_key": "", "released": true, "authors": "Brandon Rhodes", "start_iso": "2012-03-10T14:05:00", "room": "Track III (E2)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/341/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<ul>\n<li>Hand Coded Apps<ul>\n<li>Isn't this term obvious?</li>\n<li>Examples where \"hand coded\" isn't obvious or even present</li>\n<li>Brief definition of \"Hand coded\"<ul>\n<li>Make decisions</li>\n<li>Decide conventions</li>\n<li>Implement decisions, automate conventions using high-quality,\n  fine grained tools</li>\n</ul>\n</li>\n<li>Myths of programming tools</li>\n<li>What common practices aren't so \"hand-coded\"?</li>\n<li>Example - the \"auth\" plugin</li>\n<li>Demystifying building a simple \"auth\" system specific to our needs</li>\n<li>Advantages to specific, in house libraries versus generic, off the shelf</li>\n<li>Sum up \"hand coded\"</li>\n</ul>\n</li>\n<li>Databases<ul>\n<li>Why do we use databases?</li>\n<li>Why do we use relational databases?</li>\n<li>When should we not use relational databases?</li>\n<li>how do we use relational databases with application code?</li>\n<li>what do we mean by \"database abstraction\" ?</li>\n<li>problems with \"abstraction == hiding\"</li>\n<li>object relational impedance mismatch</li>\n</ul>\n</li>\n<li>SQLAlchemy and the hand coded approach<ul>\n<li>A vanilla SQLAlchemy model</li>\n<li>Why is it verbose ?</li>\n<li>Automating conventions<ul>\n<li>building a base</li>\n<li>reducing verbosity</li>\n<li>define standard patterns/interactions</li>\n<li>build the ORM you want</li>\n</ul>\n</li>\n<li>Exposing the relational model<ul>\n<li>Simple queries, non-controversial</li>\n<li>A not-so-simple query<ul>\n<li>SQL programmer approach</li>\n<li>SQLAlchemy approach</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\"Leaky abstraction\"</li>\n</ul>\n</li>\n</ul>", "presenters": "Michael Bayer", "duration": 45, "id": 92, "end": [2012, 3, 10, 15, 30, 0, 5, 70, -1], "title": "Hand Coded Applications with SQLAlchemy", "last_updated_iso": "2012-02-28T13:42:57.633624", "name": "Hand Coded Applications with SQLAlchemy", "start": [2012, 3, 10, 14, 45, 0, 5, 70, -1], "description": "SQLAlchemy is the object relational mapper and database toolkit for Python, first introduced in 2005. In this talk I'll describe why SQLAlchemy has always been called a \"toolkit\", detailing the software construction mindset for which SQLAlchemy was designed to be used with - what I am currently referring to as the \"Hand Coded\" approach. ", "tags": "Talk, experienced", "end_iso": "2012-03-10T15:30:00", "room_name": "Grand Ballroom C/D", "conf_key": "", "released": true, "authors": "Michael Bayer", "start_iso": "2012-03-10T14:45:00", "room": "Track III (E2)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/165/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>Django has a fair bit of custom test code: a custom TestSuiteRunner, custom TestCase subclasses, some test-only monkeypatches to core Django code, and a raft of testing utilities. I'll cover as much of that code as I find interesting and non-trivial, taking a close look at what it's actually doing and what that means for your tests.</p>\n<p>This will be a highly opinionated talk. There are some things in Django's test code I really don't like; I'll talk about why, and how I'd like to see them changed. As a natural part of this, I'll also be outlining some principles I try to follow for writing effective and maintainable tests, and note where Django makes it easy or hard.</p>\n<p>This is an \"extreme\" talk, so I'll be assuming you've used Django and done some testing, and you're familiar with the basic concepts of each. This won't be an introductory \"testing with Django\" howto.</p>", "presenters": "Carl Meyer", "duration": 45, "id": 138, "end": [2012, 3, 10, 15, 30, 0, 5, 70, -1], "title": "Testing and Django", "last_updated_iso": "2012-02-28T13:42:58.713062", "name": "Testing and Django", "start": [2012, 3, 10, 14, 45, 0, 5, 70, -1], "description": "A deep dive into writing tests with Django, covering Django's custom test-suite-runner and the testing utilities in Django, what all they actually do, how you should and shouldn't use them (and some you shouldn't use at all!). Also, guidelines for writing good tests (with or without Django), and my least favorite things about testing in Django (and how I'd like to fix them).", "tags": "Talk, intermediate", "end_iso": "2012-03-10T15:30:00", "room_name": "Grand Ballroom F/E", "conf_key": "", "released": true, "authors": "Carl Meyer", "start_iso": "2012-03-10T14:45:00", "room": "Track V (E4)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/412/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>The archives of the Afro American Newspaper in Baltimore MD contain over 1.5 million historical photos spanning 115 years of the city\u2019s African American history. One of the largest Black history collections in the world, the Afro\u2019s archives include thousands of photos which have never been seen by the public.</p>\n<p>Why? Of the paper\u2019s 1.5 million photos, only around 10,000 exist in a digital form; the Afro, like many small archives, simply does not have the human resources to manually digitize its collections. As a result, photos with incredible value for scholars, educators and community members alike are available only to the select few with the access, specialized skills, and time to travel to the physical archive and locate them.</p>\n<p>Project Gado was founded in 2010 to address these challenges. The project seeks to create an open source archival scanning robot which small organizations like the Afro can use to autonomously digitize their photographic holdings. The Gado 1, a proof-of-concept machine built using Python and Arduino, has successfully scanned over 1,000 photos to date. </p>\n<p><img src=\"http://projectgado.org/wp-content/uploads/2011/10/JHU6211-1024x681.jpg\" alt=\"Gado 1\" title=\"Gado 1\"/></p>\n<p>At present, Project Gado is developing the Gado 2 (pictured below as an early prototype), a second-generation machine which will cut scanning time by a factor of four, occupy a footprint half the size of the Gado 1\u2019s, and require no specialized skills to assemble and operate. The project is also developing a photographic licensing site (launching May 2012) which will allow archival partners to generate a lasting revenue stream from their digital collections, creating an incentive for more small archives to adopt the Gado technology.</p>\n<p><img src=\"http://projectgado.org/wp-content/uploads/2011/10/Gado2smaller.jpg\" alt=\"Early prototype of Gado 2\" title=\"Early Prototype of Gado 2\"/></p>\n<p>This talk will provide an overview of Project Gado and the Gado 2, and will address specific challenges faced and lessons learned from using Python as the primary language for an open robotics project and a major archival digitization initiative.</p>\n<p>Technical topics covered will include Python and Arduino interfacing for machine control, Python/TWAIN integration, use of PIL and OpenCV for post-processing, and MySQL integration for image management and metadata annotation. These topics will be presented primarily in the context of a case study, rather than a tutorial; the main goal will be to show how Project Gado used these Python technologies to solve problems, and to demonstrate how the technologies could be used to solve similar problems in other cases.</p>\n<p>The talk will conclude with a discussion of opportunities for interested developers to contribute to the Gado codebase, and for interested institutions to implement the Gado 2 in their own archives.</p>\n<p><strong>Outline:</strong></p>\n<ol>\n<li><strong>Brief overview of Project Gado </strong></li>\n<li>\n<dl>\n<dt><strong>The Hardware</strong></dt>\n<dd>Overview of the Gado 2</dd>\n<dd>Machine demo</dd>\n</dl>\n</li>\n<li>\n<dl>\n<dt><strong>The Gado Codebase: Design strategies, Problems faced, Modules used</strong></dt>\n<dd>Interfacing with Arduino</dd>\n<dd>Scanning with TWAIN</dd>\n<dd>Capturing metadata and performing OCR with Tesseract</dd>\n<dd>OpenCV and PIL for automatic post-processing</dd>\n<dd>Collection management with MySQL</dd>\n</dl>\n</li>\n<li><strong>Challenges, Pythonic solutions, next steps</strong></li>\n<li>\n<dl>\n<dt><strong>Get involved!</strong></dt>\n<dd>Opportunities for developers</dd>\n<dd>Options for partner archives/organizations</dd>\n<dd>Pieces of the codebase with relevance to other problems/projects and how to steal them</dd>\n</dl>\n</li>\n</ol>", "presenters": "Thomas Smith", "duration": 45, "id": 46, "end": [2012, 3, 10, 15, 30, 0, 5, 70, -1], "title": "Project Gado: Building an Open Archival Scanning Robot Using Python and Arduino", "last_updated_iso": "2012-02-28T13:42:57.887864", "name": "Project Gado: Building an Open Archival Scanning Robot Using Python and Arduino", "start": [2012, 3, 10, 14, 45, 0, 5, 70, -1], "description": "Project Gado is an initiative which aims to create an open-source archival scanning robot which small archives can purchase for $500 and use to autonomously scan their photographic collections. This talk presents the Gado 2, a prototype scanning robot built around Python and Arduino, and shares lessons learned from using Python as the primary language in a large-scale archival scanning project. ", "tags": "Talk, experienced", "end_iso": "2012-03-10T15:30:00", "room_name": "Mission City Ballroom", "conf_key": "", "released": true, "authors": "Thomas Smith", "start_iso": "2012-03-10T14:45:00", "room": "Track I (D5)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/189/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>Python has great Unicode support, but it's still your responsibility to handle it properly.  Even expert programmers get tripped up with the encodings and decodings that can happen implicitly, throwing errors in unexpected places.</p>\n<p>This talk will present a quick overview of what Unicode is, why it exists, and how it works, but only enough to get your program working properly.  Unicode can be intricate and fascinating, but really, who cares?  You just want your code to work without throwing a UnicodeEncodeError every time an accented character sneaks in somehow.</p>\n<p>I'll describe strategies to make your code work, and keep it working, without getting too far afield in Unicode la-la-land.</p>\n<p>How Unicode is handled is one of the biggest changes in Python 3.  I'll touch on what those changes are, and how you can use them to keep even your Python 2 code running smoothly.</p>\n<h2>Outline</h2>\n<ul>\n<li>Bytes vs. text</li>\n<li>ASCII, 8859-1, etc.</li>\n<li>Unicode</li>\n<li>Encodings</li>\n<li>Python 2: str vs unicode</li>\n<li>encode and decode</li>\n<li>implicit conversions!!</li>\n<li>Python 3: bytes vs str</li>\n<li>Everybody's happy!</li>\n</ul>", "presenters": "Ned Batchelder", "duration": 30, "id": 115, "end": [2012, 3, 10, 15, 15, 0, 5, 70, -1], "title": "Pragmatic Unicode, or, How do I stop the pain?", "last_updated_iso": "2012-02-28T13:42:58.693577", "name": "Pragmatic Unicode, or, How do I stop the pain?", "start": [2012, 3, 10, 14, 45, 0, 5, 70, -1], "description": "Python has great Unicode support, but it's still your responsibility to handle it properly.  I'll do a quick overview of what Unicode is, but only enough to get your program working properly.  I'll describe strategies to make your code work, and keep it working, without getting too far afield in Unicode la-la-land.\r\n", "tags": "Talk, novice", "end_iso": "2012-03-10T15:15:00", "room_name": "Grand Ballroom H/G", "conf_key": "", "released": true, "authors": "Ned Batchelder", "start_iso": "2012-03-10T14:45:00", "room": "Track IV (E3)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/141/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>Jython demonstrates that it is quite possible to fit Python\u2019s dynamic features on the Java Virtual Machine (JVM) to provide for seamless integration, while also taking advantage of the breadth of the Java platform. My favorite aspect of this blending is certainly is the amazing java.util.concurrent package.</p>\n<p>However, from a performance perspective, it\u2019s an awkward fit. In certain cases, the JVM is able to aggressively inline Python codepaths through its JIT. But generally it cannot for a variety of technical reasons. In addition, while Jython can conveniently call Java code, and support callbacks, it\u2019s not at all convenient right now to go the opposite way. This mismatch is perhaps best seen now in Jython\u2019s lack of support for Java annotations.</p>\n<p>Consider how you, as a human translator, might attempt to optimize Python code for the JVM, or to fix the Java integration issues. Your plan of attack is simple: translate idiomatic Python to similarly idiomatic (and highly JIT-able) Java. Python developers signal their intent through a variety of mechanisms. They use builtin names like True/False or range/xrange, which through common convention, no one would seriously expect to see changed. They rarely monkey patch namespaces (action at a distance), although import time can get quite interesting. Importing packages from the java.* namespace means something when integrating from Jython. The challenge would be in supporting the dynamic functionality, however. Rewriting truly dynamic code into statically-typed code is just not the right way. It is non-trivial, error prone, and certainly not fun.</p>\n<p>Enter the invokedynamic bytecode and the java.lang.invoke package, introduced with Java 7. It enables a wide range of optimizations, while allowing for the correctness of Python code, with its full range of dynamic features, no matter how crazy, to be maintained. There are some obvious wins, such as ensuring that a callsite (the point in the code where a call to a given function is invoked), a MethodHandle to a function in that namespace is linked, with all parameters properly permuted so that it\u2019s a straight call through the Java calling convention. If there\u2019s a namespace change, simply relink.</p>\n<p>But there are also opportunities to use static analysis. For example, iterating over an xrange looks like a Java for loop, and can be optimistically compiled as such. If the builtin is rebound, the controlling SwitchPoint  in invalidated and a continuation is setup to re-execute into an interpreter using unoptimized code (actually running Python bytecode). Other static analysis opportunities include being able to control the construction of frames for functions, use of decorators and function annotations to describe gradual typing (especially useful for Java integration), and so forth. This talk will cover a variety of these translations, demonstrate how we support both the fast and slow paths, and also describe some of the current performance benchmarks. I will also describe the pitfalls: obvious optimizations frequently result in bad performance due to the number of moving parts.</p>\n<p>In addition, this talk with cover the state of Jython 2.6+. In particular, I will describe forthcoming changes to the Jython API (for embedding into Java). These include limited backwards breaking changes in ThreadState and PySystemState, to support increased performance, cleanup APIs, and remove issues in the garbage collection of ClassLoader objects.</p>", "presenters": "Jim Baker", "duration": 30, "id": 69, "end": [2012, 3, 10, 15, 15, 0, 5, 70, -1], "title": "Making Jython Faster and Better", "last_updated_iso": "2012-02-28T13:42:58.519432", "name": "Making Jython Faster and Better", "start": [2012, 3, 10, 14, 45, 0, 5, 70, -1], "description": "As a dynamic language, Python is difficult to optimize. In addition, these dynamic features make using Python code from Java currently too complex. However, Java 7 adds the invokedynamic bytecode and corresponding library support, making it possible to finally address these problems in Jython. This talk will describe work in progress to make Jython faster and better (improving Java integration).", "tags": "Talk, experienced", "end_iso": "2012-03-10T15:15:00", "room_name": "Grand Ballroom A/B", "conf_key": "", "released": true, "authors": "Jim Baker", "start_iso": "2012-03-10T14:45:00", "room": "Track II (E1)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/446/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>This talk will have multiple parts:</p>\n<ul>\n<li>What is GIS?</li>\n<li>Cartography</li>\n<li>Analysis</li>\n<li>Geodatabases</li>\n<li>Types of data<ul>\n<li>Vector</li>\n<li>Raster</li>\n</ul>\n</li>\n<li>\n<p>How do you talk about spots on earth?</p>\n</li>\n<li>What is a datum and why does it matter?</li>\n<li>Spatial reference systems: WUT?</li>\n<li>Map projections: what's appropriate and what's web mercator</li>\n<li>\n<p>Great circle distances and geodesy (or, your lines are wrong and you should feel bad)</p>\n</li>\n<li>\n<p>Analysis</p>\n</li>\n<li>Overlay operators<ul>\n<li>Clementini operators</li>\n<li>Buffer, clip their friends</li>\n</ul>\n</li>\n</ul>\n<p>Will demonstrate concepts with commercial tools (the ArcGIS stack) and some open source (GDAL, OGR, QGIS).</p>", "presenters": "Jason Scheirer", "duration": 55, "id": 117, "end": [2012, 3, 10, 17, 15, 0, 5, 70, -1], "title": "A Gentle Introduction to GIS", "last_updated_iso": "2012-02-28T13:42:57.965673", "name": "A Gentle Introduction to GIS", "start": [2012, 3, 10, 16, 20, 0, 5, 70, -1], "description": "Datums! Coordinate systems! Map projections! Topologies! Spatial applications are a nebulous, daunting concept to most Pythonistas. This talk is a gentle introduction into the concepts, terminology and tools to demystify the world of the world.", "tags": "Talk, experienced", "end_iso": "2012-03-10T17:15:00", "room_name": "Grand Ballroom H/G", "conf_key": "", "released": true, "authors": "Jason Scheirer", "start_iso": "2012-03-10T16:20:00", "room": "Track IV (E3)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/79/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>This talk aims to provide both a practical guide and theoretical underpinnings to the use of generator-based lightweight concurrency in Python.</p>\n<ol>\n<li>Lightning tour of generator constructs.  Why generator-based scheduling is particularly useful for event-based programming.</li>\n<li>Simple example of a \"trampoline\" or scheduler.</li>\n<li>Slightly fleshed out example of scheduler with discussion of data-passing issues.</li>\n<li>Examples using GTasklet to make coroutine code look more like familiar sequential code (the framework is based on greenlets rather than generators, but accomplishes similar purpose).</li>\n<li>Brief examples of Twisted Reactors and Deferreds.</li>\n<li>Limits of generator-based concurrency (i.e. doesn't help with multiple cores and multiple servers).  \"Throw at the wall\" list of ways to generalize to larger scales than single cores.</li>\n</ol>", "presenters": "David Mertz", "duration": 55, "id": 71, "end": [2012, 3, 10, 17, 15, 0, 5, 70, -1], "title": "Coroutines, event loops, and the history of Python generators", "last_updated_iso": "2012-02-28T13:42:57.137628", "name": "Coroutines, event loops, and the history of Python generators", "start": [2012, 3, 10, 16, 20, 0, 5, 70, -1], "description": "This talk traces lightweight concurrency from Python 2.2's generators, which enabled semi-coroutines as a mechanism for scheduling \"weightless\" threads; to PEP 342, which created true coroutines, and hence made event-driven programming easier; to 3rd party libraries built around coroutines, from older GTasklet and peak.events to the current Greenlet/gevent and Twisted Reactor.", "tags": "Talk, intermediate", "end_iso": "2012-03-10T17:15:00", "room_name": "Grand Ballroom A/B", "conf_key": "", "released": true, "authors": "David Mertz", "start_iso": "2012-03-10T16:20:00", "room": "Track II (E1)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/104/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>A benchmark of a hello world application is often what developers use to make the all important decision of what web hosting infrastructure they use. Worse is that in many cases this is the only sort of performance testing or monitoring they will ever do. When it comes to their production applications they are usually flying blind and have no idea of how it is performing and what they need to do to tune their web application stack.</p>\n<p>This talk will discuss different limiting factors or bottlenecks within your WSGI server stack and system that can affect the performance of your Python web application. It will illustrate the impacts of these by looking at typical configurations for the more popular WSGI hosting mechanisms of Apache/mod_wsgi, gunicorn and uWSGI, seeing how they perform under various types of traffic and request loads and then tweaking the configurations to\nsee whether they perform better or worse.</p>\n<p>Such factors that will be discussed will include:</p>\n<ul>\n<li>Use of threads vs processes.</li>\n<li>Number of processors available.</li>\n<li>Python global interpreter lock (GIL)</li>\n<li>Amount of memory available.</li>\n<li>Slow HTTP browsers/clients.</li>\n<li>Browser keep alive connections.</li>\n<li>Need to handle static assets.</li>\n</ul>\n<p>From this an attempt will be made to provide some general guidelines of what is a good configuration/architecture to use for different types of Python web applications. The importance of continuous production monitoring will also be covered to ensure that you know when the performance of your system is dropping off due to changing traffic patterns as well as code changes you have made in your actual web application.</p>", "presenters": "Graham Dumpleton", "duration": 40, "id": 140, "end": [2012, 3, 10, 17, 15, 0, 5, 70, -1], "title": "Web Server Bottlenecks And Performance Tuning", "last_updated_iso": "2012-02-28T13:42:57.943820", "name": "Web Server Bottlenecks And Performance Tuning", "start": [2012, 3, 10, 16, 35, 0, 5, 70, -1], "description": "New Python web developers seem to love running benchmarks on WSGI servers. Reality is that they often have no idea what they are doing or what to look at. This talk will look at a range of factors which can influence the performance of your Python web application. This includes the impact of using threads vs processes, number of processors, memory available, the GIL and slow HTTP clients.", "tags": "Talk, experienced", "end_iso": "2012-03-10T17:15:00", "room_name": "Grand Ballroom F/E", "conf_key": "", "released": true, "authors": "Graham Dumpleton", "start_iso": "2012-03-10T16:35:00", "room": "Track V (E4)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/275/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<ul>\n<li>Introduction</li>\n<li>Prerequisities</li>\n<li>Kinect Device</li>\n<li>Kinect SDK</li>\n<li>Kinect API Overview</li>\n<li>Skeleton Tracking</li>\n<li>Video</li>\n<li>Depth</li>\n<li>Audio / Voice Recognition</li>\n<li>PyGame Integration</li>\n<li>Post Kinect events to PyGame event queue</li>\n<li>Processing skeleton data, drawing skeletons, working w/ video stream</li>\n<li>The Game</li>\n</ul>", "presenters": "Dino Viehland", "duration": 40, "id": 48, "end": [2012, 3, 10, 17, 15, 0, 5, 70, -1], "title": "Building a Kinect game with Python", "last_updated_iso": "2012-02-28T13:42:57.728785", "name": "Building a Kinect game with Python", "start": [2012, 3, 10, 16, 35, 0, 5, 70, -1], "description": "This talk will show you how to develop a game using Kinect from Python.  I'll start w/ an introduction to the Kinect API including skeleton tracking, normal video, depth video, and audio APIs including speech recognition.  I\u2019ll then show how the Kinect APIs can be incorporated into a game using PyGame.  After the talk you\u2019ll be able to start developing your own Python based Kinect games!", "tags": "Talk, novice", "end_iso": "2012-03-10T17:15:00", "room_name": "Mission City Ballroom", "conf_key": "", "released": true, "authors": "Dino Viehland", "start_iso": "2012-03-10T16:35:00", "room": "Track I (D5)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/241/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<h1>Abstract</h1>\n<p>HDF5 (Hierarchical Data Format) allows to store large amounts of data fast. Many scientists use HDF5 for numerical data. Multidimensional arrays and database-like tables can be nested. This makes HDF5 useful for other user groups such as people working with image data.</p>\n<p>The main objective of HDF5 is the storage of data in the GB and TB range. A HDF5 file has a hierarchical structure with groups and sub-groups similar to file system with directories and sub-directories. The analogy to files are homogeneous, multidimensional arrays or database-like tables. The hierarchical structure uses B-trees that may span several files.</p>\n<p>HDF5 comes with compression options that allow a compact data storage. Therefore, write and read rates can be faster than the maximum rate of the hard drive compared to the stored data.</p>\n<p>Users from scientific and technical fields like to use HDF5. It has proven valuable for a variety of applications. The speed is often considerably higher than that of user defined binary formats. HDF5 is very attractive because its storage capacity is practically unlimited and the data access is very convenient. In addition, there are many tools that help visualize and interpret data stored in HDF5 files.</p>\n<p>HDF5 can be interesting not only for scientific application. Multidimensional arrays can be stored in tables. This opens new possibilities for an efficient and easy storage of image data including indexing. Another application could be platform independent virtual file systems based on HDF5.</p>\n<p>There are HDF5 libraries for different programming languages such as C, C++ and Fortran. There are two libraries for Python:</p>\n<ul>\n<li>h5py exposing the full C-API with all options to Python and</li>\n<li>PyTables that adds pythonic features to simplify especially the work with tables.</li>\n</ul>\n<p>This presentation gives examples for how to work with both libraries. Python programs for reading and writing HDF5 data are typically multiple times shorter than their counterparts in C or Fortran. Combining the elegance of Python with the extraordinary speed of HDF5 makes programming as well as program execution highly effective.</p>", "presenters": "Mike M\u00fcller", "duration": 40, "id": 94, "end": [2012, 3, 10, 17, 15, 0, 5, 70, -1], "title": "Python and HDF5 - Fast Storage for Large Data", "last_updated_iso": "2012-02-28T13:42:58.630810", "name": "Python and HDF5 - Fast Storage for Large Data", "start": [2012, 3, 10, 16, 35, 0, 5, 70, -1], "description": "The presentation introduces the possibilities to\r\nuse HDF5 (Hierarchical Data Format) from Python.\r\nHDF5 is one of the fastest ways to store large\r\namounts of numerical data.\r\nThe talk is for scientist who would like\r\nto store their measured or calculated data as well\r\nas for programmers who are interested in non-relational\r\ndata storage. ", "tags": "Talk, novice", "end_iso": "2012-03-10T17:15:00", "room_name": "Grand Ballroom C/D", "conf_key": "", "released": true, "authors": "Mike M\u00fcller", "start_iso": "2012-03-10T16:35:00", "room": "Track III (E2)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/231/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>Python's import statement has been a powerful feature since the first release, and only gotten better with age.  Understanding how imports work under the hood will let you take advantage of that power.</p>\n<p>A big key to customizing Python's imports is the importers introduced by PEP 302.  That's a tool that you want in your belt!  We'll be covering such import hooks as well as a couple other customization methods.</p>\n<p><strong>Talk Outline</strong></p>\n<ol>\n<li>introduction and overview (2 min)</li>\n<li>under the hood (5 min)<ul>\n<li>import syntax</li>\n<li>builtins.<strong>import</strong></li>\n<li>PEP 302</li>\n<li>import state</li>\n</ul>\n</li>\n<li>customizing Python (5 min)</li>\n<li>examples in the wild (5 min)</li>\n<li>2 \"walk-through\" examples (5 min)<ul>\n<li>trying out new Python syntax</li>\n<li>stat-averse imports</li>\n</ul>\n</li>\n<li>5 \"flavor\" examples (5 min)<ul>\n<li>descriptors for module objects</li>\n<li>circumventing gotchas</li>\n<li>sneaking directives into import names</li>\n<li>managing multiple import hooks</li>\n<li>context manager for sys.path</li>\n</ul>\n</li>\n<li>\"lightning\" examples (5 min)<ul>\n<li>quick look at a bunch of working examples of cool stuff you can do with imports</li>\n<li>here's a sample:</li>\n<li>post-import hooks</li>\n<li>a python preprocessor</li>\n<li>naive macros and inline functions</li>\n<li>packages win noisily</li>\n<li>lazy imports</li>\n</ul>\n</li>\n<li>conclusion</li>\n</ol>\n<p><strong>Supplemental Information</strong></p>\n<p>I have a lot more information at my <a href=\"http://reference-pages.rtfd.org/python_imports\">Python Imports</a> reference page. </p>", "presenters": "Eric Snow", "duration": 40, "id": 72, "end": [2012, 3, 10, 17, 55, 0, 5, 70, -1], "title": "Getting the Most Out of Python Imports", "last_updated_iso": "2012-02-28T13:42:57.707171", "name": "Getting the Most Out of Python Imports", "start": [2012, 3, 10, 17, 15, 0, 5, 70, -1], "description": "To really take advantage of Python you must understand how imports work and how to use them effectively.  In this talk we'll discuss both of these.  After a short introduction to imports, we'll dive right in and look at how customizing import behavior can make all your wildest dreams come true.", "tags": "Talk, experienced", "end_iso": "2012-03-10T17:55:00", "room_name": "Grand Ballroom A/B", "conf_key": "", "released": true, "authors": "Eric Snow", "start_iso": "2012-03-10T17:15:00", "room": "Track II (E1)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/17/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>This talk will demystify the different parts of a usual map stack, including:</p>\n<ul>\n<li>GeoSpatial Datastores (RDBMS &amp; NoSQL)</li>\n<li>Map servers (that query the geodata)</li>\n<li>Tile servers (that chunk the data into tiles and cache it)</li>\n<li>Browser UIs (and the difference between different Javascript slippy maps)</li>\n</ul>", "presenters": "Zain Memon", "duration": 40, "id": 118, "end": [2012, 3, 10, 17, 55, 0, 5, 70, -1], "title": "Making maps with Python", "last_updated_iso": "2012-02-28T13:42:58.532470", "name": "Making maps with Python", "start": [2012, 3, 10, 17, 15, 0, 5, 70, -1], "description": "Python makes it easy to store, query, and transform geodata. We will run through a handful of useful GIS libraries and patterns that let you do magical things with your maps. If you want to make maps that are more interactive and more interesting, this talk is for you.", "tags": "Talk, experienced", "end_iso": "2012-03-10T17:55:00", "room_name": "Grand Ballroom H/G", "conf_key": "", "released": true, "authors": "Zain Memon", "start_iso": "2012-03-10T17:15:00", "room": "Track IV (E3)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/474/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<ul>\n<li>Who am I? (Primary author of Tastypie)</li>\n<li>Why REST?</li>\n<li>\n<p>A touch of philosophy</p>\n<ul>\n<li>Use HTTP the best we can</li>\n<li>Flexible serialization (not everyone wants JSON)</li>\n<li>What you can GET should be able to be POST/PUT</li>\n<li>Should be reasonable by default but easy to extend</li>\n<li>URIs Everywhere!</li>\n</ul>\n</li>\n<li>\n<p>Why Tastypie?</p>\n<ul>\n<li>Works with Django</li>\n<li>Full GET/POST/PUT/DELETE/PATCH</li>\n<li>Any data source (Not just ORM)</li>\n<li>Designed to be extensible</li>\n<li>Supports a variety of serialization formats (JSON/XML/YAML/bplist)</li>\n<li>URIs everywhere by default</li>\n<li>Lots of hooks for customization</li>\n</ul>\n</li>\n<li>\n<p>Demonstrate a simple setup</p>\n<ul>\n<li>Then explore the API based on that trivial setup</li>\n</ul>\n</li>\n<li>\n<p>Demonstrate adding authentication/authorization</p>\n</li>\n<li>Demonstrate adding custom serialization</li>\n<li>Demonstrate adding a different data source</li>\n<li>Demonstrate adding a custom endpoint</li>\n</ul>", "presenters": "Daniel Lindsley", "duration": 40, "id": 141, "end": [2012, 3, 10, 17, 55, 0, 5, 70, -1], "title": "RESTful APIs With Tastypie", "last_updated_iso": "2012-02-28T13:42:58.035276", "name": "RESTful APIs With Tastypie", "start": [2012, 3, 10, 17, 15, 0, 5, 70, -1], "description": "Providing full-featured REST APIs is an increasingly popular request. Tastypie allows you to easily implement a customizable REST API for your Python or Django applications.", "tags": "Talk, experienced", "end_iso": "2012-03-10T17:55:00", "room_name": "Grand Ballroom F/E", "conf_key": "", "released": true, "authors": "Daniel Lindsley", "start_iso": "2012-03-10T17:15:00", "room": "Track V (E4)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/61/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>Has your garden been ravaged by the marauding squirrel hordes? Has your bird feeder been pillaged? Tired of shaking your fist at the neighbor children? Learn how to use Python to tap into computer vision libraries and build an automated sentry water cannon capable of soaking intruders.</p>\n<p>Using the Python bindings for the computer vision library, OpenCV, we will investigate the components and steps needed to power a sentry gun.  In addition to basic object and motion tracking, concepts of object recognition (friend or foe) will be discussed.  Communication and control of the underlying hardware is performed using Python and will also be covered.</p>\n<p>Additional peace-time applications of the above technology will be demonstrated.</p>\n<ul>\n<li>OpenCV</li>\n<li>Object detection</li>\n<li>Motion tracking</li>\n<li>Friend-or-foe object recognition</li>\n<li>Stereo vision</li>\n<li>Building training sets with Amazon Mechanical Turk</li>\n<li>Python-Arduino communication</li>\n<li>Python + Kinect</li>\n</ul>", "presenters": "Kurt Grandis", "duration": 40, "id": 49, "end": [2012, 3, 10, 17, 55, 0, 5, 70, -1], "title": "Militarizing Your Backyard with Python: Computer Vision and the Squirrel Hordes", "last_updated_iso": "2012-02-28T13:42:58.125895", "name": "Militarizing Your Backyard with Python: Computer Vision and the Squirrel Hordes", "start": [2012, 3, 10, 17, 15, 0, 5, 70, -1], "description": "Has your garden been ravaged by the marauding squirrel hordes? Has your bird feeder been pillaged? Tired of shaking your fist at the neighbor children? Learn how to use Python to tap into computer vision libraries and build an automated sentry water cannon capable of soaking intruders.\r\n", "tags": "Talk, experienced", "end_iso": "2012-03-10T17:55:00", "room_name": "Mission City Ballroom", "conf_key": "", "released": true, "authors": "Kurt Grandis", "start_iso": "2012-03-10T17:15:00", "room": "Track I (D5)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/267/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>Storm is a high-volume, continuous, reliable stream processing system developed at BackType and recently open-sourced by Twitter. Though most of the system (and it's documentation) is written in Java-based languages, it is possible to use in a Python environment with Python-based analysis code. At DotCloud (our application-platform-as-a-service) we're doing just that, and we'll be showing how you can too.</p>\n<p>We collect a lot of data: we have tens of thousands of customers, many of whom have dozens of services running on our platform, each of which in turn produces dozens of metrics every second. All in all, we're dealing with millions of datapoints per minute. Storm will be the third iteration of our metrics system, an attempt at standardizing a number of previously-distinct pieces of our infrastructural software, to enable automated, real-time reactions to changes in the platform's state.</p>\n<p>We'll start by touching on what problems Storm is (and isn't) trying to solve and why it's model is so powerful, informed by our previous attempts to solve the stream processing problem. We'll then move on to a deep dive into how to get Storm up and running with the most Python and least Java-enduced-pain possible and finish up with tips to solve some of the challenges we've encountered while adopting Storm into our Python-based development process.</p>\n<h2 id=\"outline\">Outline</h2>\n<p>The Problem:</p>\n<ul>\n<li>What is stream processing?<ul>\n<li>High volume, Continuous, Reliable data analysis</li>\n</ul>\n</li>\n<li>How do people solve this today?</li>\n</ul>\n<p>The Solution:</p>\n<ul>\n<li>Storm's overall model</li>\n<li>Automatic parts</li>\n<li>Topologies</li>\n<li>ZeroMQ</li>\n<li>Why is this solution better?</li>\n</ul>\n<p>The Hard Part, Made Simple:</p>\n<ul>\n<li>Build a topology</li>\n<li>Code your processors</li>\n</ul>\n<p>The Simple Part, Made Hard (made simple):</p>\n<ul>\n<li>Development</li>\n<li>Testing</li>\n<li>Deployment</li>\n<li>Java (ugh)<ul>\n<li>Clojure (less ugh)</li>\n</ul>\n</li>\n</ul>", "presenters": "Gabriel Grant", "duration": 40, "id": 95, "end": [2012, 3, 10, 17, 55, 0, 5, 70, -1], "title": "Storm: the Hadoop of Realtime Stream Processing", "last_updated_iso": "2012-02-28T13:42:57.979897", "name": "Storm: the Hadoop of Realtime Stream Processing", "start": [2012, 3, 10, 17, 15, 0, 5, 70, -1], "description": "Twitter's new scalable, fault-tolerant, and simple(ish) stream programming system... with Python!", "tags": "Talk, experienced", "end_iso": "2012-03-10T17:55:00", "room_name": "Grand Ballroom C/D", "conf_key": "", "released": true, "authors": "Gabriel Grant", "start_iso": "2012-03-10T17:15:00", "room": "Track III (E2)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/478/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>Learn about powerful python libraries for analyzing all types of data, including spatial data, through the following illustrated examples. </p>\n<h5 id=\"example_1_explore_data\">Example 1: Explore data</h5>\n<p><strong>Problem:</strong> I have a large voter data file in CSV format. I want to examine it, check the column headings and data types, and do some basic stats, but I don\u2019t want to pull it into Excel or Access. What are my options? <br/>\n<strong>Solution:</strong> <a href=\"https://github.com/onyxfish/csvkit\">csvkit</a> -  I can explore my data, chop it up, sort it, summarize it, and prepare it for import to postgis.<br/>\n<strong>Bonus:</strong> Developers and journalists have been working hard to add functionality to csvkit. You can contribute! </p>\n<h5 id=\"example_2_analyze_data\">Example 2: Analyze data</h5>\n<p><strong>Problem:</strong> I have a bunch of data points from Twitter. How do I make sense of what I have in front of me, and where do I start? <br/>\n<strong>Solutions:</strong> <a href=\"http://matplotlib.sourceforge.net/\">matplotlib</a>, <a href=\"http://networkx.lanl.gov/\">networkx</a><br/>\n<strong>Bonus:</strong> Learn about how python libraries are plug and play with each other.</p>\n<h5 id=\"example_3_map_data\">Example 3: Map data</h5>\n<p><strong>Problem: </strong>I have a year\u2019s worth of crime incidents for a large city. I want to explore global and local patterns in the data and identify clusters. <br/>\n<strong>Solutions: </strong> <a href=\"http://code.google.com/p/pysal/\">PySal</a> (<a href=\"http://numpy.scipy.org/\">Numpy</a>, <a href=\"http://www.scipy.org/\">Scipy</a>)<br/>\n<strong>Bonus:</strong> We\u2019ll look at the full <a href=\"http://pysal.org/library/esda/index.html\">ESDA (Exploratory Spatial Data Analysis) module</a> in PySal, and we\u2019ll briefly touch on a selection of the rest of PySal\u2019s functionality.</p>\n<p>To wrap up the talk, we'll give some tips on using <a href=\"http://www.postgis.org/\">postgis</a> and <a href=\"http://geodjango.org/\">geodjango</a> to go from data analysis and mapping to building a web application.</p>", "presenters": "Jacqueline Kazil, Dana Bauer", "duration": 45, "id": 96, "end": [2012, 3, 10, 18, 40, 0, 5, 70, -1], "title": "Python for data lovers: explore it, analyze it, map it", "last_updated_iso": "2012-02-28T13:42:58.583517", "name": "Python for data lovers: explore it, analyze it, map it", "start": [2012, 3, 10, 17, 55, 0, 5, 70, -1], "description": "Exploring and analyzing data can be daunting and time-consuming, even for data lovers. Python can make the process fun and exciting. We will present techniques of data analysis, along with python tools that help you explore and map data. Our talk includes examples that show how python libraries such as csvkit, matplotlib, scipy, networkx and pysal can help you dig into and make sense of your data.", "tags": "Talk, experienced", "end_iso": "2012-03-10T18:40:00", "room_name": "Grand Ballroom C/D", "conf_key": "", "released": true, "authors": "Jacqueline Kazil, Dana Bauer", "start_iso": "2012-03-10T17:55:00", "room": "Track III (E2)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/426/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<ul>\n<li>Tasks</li>\n</ul>\n<p>We will look at task examples and rewrite them to better\n  fit the distributed paradigms.</p>\n<ul>\n<li>\n<p>Celery + Eventlet</p>\n</li>\n<li>\n<p>Task Routing</p>\n<ul>\n<li>direct/broadcast/topic</li>\n</ul>\n</li>\n<li>\n<p>Optimization techniques.</p>\n</li>\n<li>\n<p>Monitoring and troubleshooting.</p>\n<ul>\n<li>Logging (syslog, sentry, error-emails).</li>\n<li>Events.</li>\n<li>Tracing memory leaks.</li>\n</ul>\n</li>\n<li>\n<p>Writing a Celery worker in Ruby using celeryd as a proxy.</p>\n</li>\n<li>\n<p>RabbitMQ</p>\n<ul>\n<li>Clustering and HA</li>\n</ul>\n</li>\n<li>\n<p>Introducing Cyme</p>\n</li>\n<li>\n<p>Q/A</p>\n</li>\n</ul>", "presenters": "Ask Solem Hoel", "duration": 45, "id": 142, "end": [2012, 3, 10, 18, 40, 0, 5, 70, -1], "title": "Advanced Celery", "last_updated_iso": "2012-02-28T13:42:58.225142", "name": "Advanced Celery", "start": [2012, 3, 10, 17, 55, 0, 5, 70, -1], "description": "This talk will delve deep into advanced aspects of the Celery task queue and\r\necosystem.  Previous experience with task queues and message oriented\r\nmiddleware is beneficial.", "tags": "Talk, intermediate", "end_iso": "2012-03-10T18:40:00", "room_name": "Grand Ballroom F/E", "conf_key": "", "released": true, "authors": "Ask Solem Hoel", "start_iso": "2012-03-10T17:55:00", "room": "Track V (E4)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/81/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>This talk will show how you can use fabric to standardize the different tasks that are commonly performed during the development process. Such tasks can be grouped into categories like:</p>\n<ul>\n<li>bootstrap: initializing the development environment</li>\n<li>database: managing the database</li>\n<li>testing: running tests</li>\n<li>lint: validating the code against different standards</li>\n<li>deploy: automating the deployment process</li>\n</ul>", "presenters": "Ricardo Kirkner ", "duration": 30, "id": 119, "end": [2012, 3, 10, 18, 25, 0, 5, 70, -1], "title": "Using fabric to standardize the development process", "last_updated_iso": "2012-02-28T13:42:58.137187", "name": "Using fabric to standardize the development process", "start": [2012, 3, 10, 17, 55, 0, 5, 70, -1], "description": "By ensuring consistency and repeatability in setting up the development environments of a team of developers, errors can be avoided (by automating repetitive tasks). It also helps by lowering the entry barrier for new developers, and letting existing developers focus on development tasks without having to worry about infrastructure or process issues.", "tags": "Talk, novice", "end_iso": "2012-03-10T18:25:00", "room_name": "Grand Ballroom H/G", "conf_key": "", "released": true, "authors": "Ricardo Kirkner ", "start_iso": "2012-03-10T17:55:00", "room": "Track IV (E3)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/25/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<h1>Sharing is Caring: Posting to the Python Package Index</h1>\n<ul>\n<li>Introduction (2.5m)<ul>\n<li>Why?<ul>\n<li>I had been writing Python professionally for over a year before I learned how to do this. If I\u2019d known how easy it was, perhaps I would make more code available.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>What is the Python Package Index? (5m)<ul>\n<li>A repository of Python code written by thousands of different contributors</li>\n<li>Brief history (\u201cthe Cheese Shop\u201d), and bare-bones explanation of pip</li>\n<li><strong>Ultimately, it\u2019s a place to help you re-invent as few wheels as possible</strong></li>\n</ul>\n</li>\n<li>Reminders: Reusable Code (5m)<ul>\n<li>Everyone has a different use case.<ul>\n<li>Use options.</li>\n<li>Support subclassing.<ul>\n<li>Some best practices for this.</li>\n</ul>\n</li>\n<li>The bottom line: Think about general needs, not just your specific needs.</li>\n</ul>\n</li>\n<li>Python internal documentation</li>\n<li>...and write your own, too!</li>\n</ul>\n</li>\n<li>Walkthrough of Posting a Package (12.5m)<ul>\n<li>An explanation of setup.py<ul>\n<li>The file</li>\n<li>The setup function<ul>\n<li>Things you need: name, author, version, packages, scripts</li>\n<li>Bonus material</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Registering and uploading your project.</li>\n</ul>\n</li>\n<li>Questions? (5m)</li>\n</ul>", "presenters": "Luke Sneeringer", "duration": 30, "id": 73, "end": [2012, 3, 10, 18, 25, 0, 5, 70, -1], "title": "Sharing is Caring: Posting to the Python Package Index", "last_updated_iso": "2012-02-28T13:42:58.073197", "name": "Sharing is Caring: Posting to the Python Package Index", "start": [2012, 3, 10, 17, 55, 0, 5, 70, -1], "description": "Due to its robust namespacing, Python uniquely equips developers to write and distribute reusable code. The Python community has a tool for this: the Python Package Index. PyPI is a massive repository of code, and in this talk you'll learn how to take code that you've written it and register and distribute it for use by others.", "tags": "Talk, novice", "end_iso": "2012-03-10T18:25:00", "room_name": "Grand Ballroom A/B", "conf_key": "", "released": true, "authors": "Luke Sneeringer", "start_iso": "2012-03-10T17:55:00", "room": "Track II (E1)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/63/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>\"Are you caching?\" is a question asked early on in any yarn on web scaling advice. These conversations are much better steered by asking a more open and difficult questions \"What is your caching strategy?\" and \u201cHow are you implementing it?\u201d This talk aims to briefly introduce the core concepts of caching and quickly moves to cover the best practices using Django and Flask for example code. We will let the audience know what the important questions to ask are, give them advice on how to implement the right answers, and when even the built-in core backend isn\u2019t enough, point them to more advanced techniques and the right third party tools.</p>\n<p>Important questions covered:</p>\n<p>Why am I caching in the first place? Do I have to?</p>\n<p>What is your caching strategy?</p>\n<p>What are examples of good caching strategies?</p>\n<p>Where do I put my cache code?</p>\n<p>How dynamic is my content? Could I use a published cache?</p>\n<p>Should I cache Python objects/classes, or base Python types?</p>", "presenters": "Jacob Burch, Noah Silas", "duration": 45, "id": 50, "end": [2012, 3, 10, 18, 40, 0, 5, 70, -1], "title": "Cache Rules Everything Around Me", "last_updated_iso": "2012-02-28T13:42:57.565317", "name": "Cache Rules Everything Around Me", "start": [2012, 3, 10, 17, 55, 0, 5, 70, -1], "description": "This talk aims to briefly introduce the core concepts of caching and covers the best practices of implementing them, using a small variety of python web frameworks (Flask, Django) for example code.", "tags": "Talk, experienced", "end_iso": "2012-03-10T18:40:00", "room_name": "Mission City Ballroom", "conf_key": "", "released": true, "authors": "Jacob Burch, Noah Silas", "start_iso": "2012-03-10T17:55:00", "room": "Track I (D5)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/345/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>This talk is written to engage developers interested in exploring the different forms that polyglot programs can take. The examples all demonstrate techniques for integrating Python with Scala, but the concepts are applicable beyond the specific use case of Python/Scala interop, and the talk does not assume prior knowledge of Scala.</p>\n<p>Topics include: </p>\n<ul>\n<li>Brief intro to Scala (enough to be able to follow the examples)</li>\n<li>Basic script hosting APIs</li>\n<li>Python/Scala integration via Jython</li>\n<li>JEPP (CPython/JVM bridge)</li>\n<li>Leveraging Python\u2019s support for metaprogramming to make foreign function calls virtually indistinguishable from host language function calls</li>\n<li>Passing a Python function to a Scala function that takes a Scala function as an argument</li>\n<li>Interface Definition Language (IDL) and IDL-based strategies</li>\n<li>Using TCP for inter-language communication</li>\n</ul>\n<p>Attendees should be familiar Python's metaprogramming capabilities because I won\u2019t be providing background information about adding or modifying attributes dynamically or interrogating a Python object for attribute details.</p>", "presenters": "Andrea O. K. Wright", "duration": 55, "id": 75, "end": [2012, 3, 10, 19, 55, 0, 5, 70, -1], "title": "Polyglot Programming with Python: Python/Scala Interop", "last_updated_iso": "2012-02-28T13:42:58.294348", "name": "Polyglot Programming with Python: Python/Scala Interop", "start": [2012, 3, 10, 19, 0, 0, 5, 70, -1], "description": "I won't just demonstrate how to use projects that bridge programming languages, I'll walk through the lower-level code that allows inter-language communication to happen.", "tags": "Talk, intermediate", "end_iso": "2012-03-10T19:55:00", "room_name": "Grand Ballroom A/B", "conf_key": "", "released": true, "authors": "Andrea O. K. Wright", "start_iso": "2012-03-10T19:00:00", "room": "Track II (E1)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/376/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>This talk will be an overview of the Python libraries and applications available for handling spatial and geospatial data and creating maps for the web. It will cover libraries for open and transforming spatial data formats and representations, spatial operators and predicates for queries and relationships, spatial indexes for efficient queries, and compositing and rendering map tiles, as well as desktop applications extensible with Python that replace much of the functionality of \"enterprise\" GIS software.</p>", "presenters": "Paul Smith", "duration": 55, "id": 121, "end": [2012, 3, 10, 19, 55, 0, 5, 70, -1], "title": "Spatial data and web mapping with Python", "last_updated_iso": "2012-02-28T13:42:58.389304", "name": "Spatial data and web mapping with Python", "start": [2012, 3, 10, 19, 0, 0, 5, 70, -1], "description": "Spatial data are often seen as opaque to most developers, and while dealing with them does require a shift in approach from the data types we most regularly handle, they needn\u2019t be the domain of specialists. High-quality Python libraries and Python-based applications exist for operating on and transforming spatial data, and for creating visualizations, including maps for presentation on the web.", "tags": "Talk, experienced", "end_iso": "2012-03-10T19:55:00", "room_name": "Grand Ballroom H/G", "conf_key": "", "released": true, "authors": "Paul Smith", "start_iso": "2012-03-10T19:00:00", "room": "Track IV (E3)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/428/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p><a href=\"http://www.youtube.com/watch?v=x2e73HraePY\"><img src=\"https://s3.amazonaws.com/bitbeam/bitbeambot.png\" alt=\"BitbeamBot\" title=\"BitbeamBot\"/></a></p>\n<p>(Watch the <a href=\"http://www.youtube.com/watch?v=x2e73HraePY\">video of BitbeamBot playing Angry Birds</a>.)</p>\n<p>For the confidence that your mobile app truly works, you need an end-to-end test on an actual device. This means the full combination of device manufacturer, operating system, data network, and application. And since mobile devices were meant to be handled with the human hand, you need something like a real hand to do real end-to-end testing. At some point, after lots of repetitive manual testing, the inevitable questions is asked \"Can we / should we automate the testing of the old features, so I can focus the manual testing effort on the new features?\" </p>\n<p>That's where the BitbeamBot comes in. BitbeamBot is an Arduino-powered open-source hardware CNC robot that can test any application on any mobile device -- touching the screen of a mobile device just like a user would. It also uses Python and the Selenium automation API to work its magic. In the future your testing will be automated... with robots.</p>\n<p>At the moment, BitbeamBot is just a prototype, but it can play games with simple mechanics, like Angry Birds. However, it's not very smart; it can't yet \"see\" where objects are on the screen. From my computer, I send electrical signals to two motors to move the pin over any point on an iPhone screen. I then use a third motor to move the pin down to the screen surface and click or drag objects. This open loop, flying-blind approach to automation is how automated software testing was done years ago. It's the worst way to automate. Without any sense of what's actually visible on screen, the script will fail when there's a discrepancy between what's actually on the screen and what you expected to be on screen at the time you wrote the automation script.</p>\n<p>A better approach to testing with BitbeamBot will involve closing the feedback loop and have software determine where to click based on what is actually on screen. There are two styles I'll experiment with: black box and grey box. Black box testing is easier to get started with, but grey box testing is more stable long term. </p>\n<p>Black box testing requires no internal knowledge of the application. It treats the application like a metaphorical \"black box\". If something is not visible via the user interface, it doesn't exist. To get this approach to work with BitbeamBot, I'll place a camera over the phone, send the image to my computer, and use an image-based testing tool like Sikuli. Sikuli works by taking a screenshot and then using the OpenCV image recognition library to find elements like text or buttons in the screenshot. </p>\n<p>The other style is grey box testing. It's a more precise approach, but it requires access to and internal knowledge of the application. I'll implement this approach by extending the Selenium library and tethering the phone to my computer via a USB cable. With the USB debugging interface turned on, I can ask the application precisely which elements are on screen, and where they are before moving the BitbeamBot pin to the right location. </p>\n<p>BitbeamBot's home is <a href=\"http://bitbeam.org\">bitbeam.org</a>. The hardware, software, and mechanical designs are open source and available on <a href=\"https://github.com/hugs/bitbeam\">github</a>.</p>", "presenters": "Jason Huggins", "duration": 40, "id": 144, "end": [2012, 3, 10, 19, 55, 0, 5, 70, -1], "title": "Building a Robot that Can Play Angry Birds on a Smartphone, (or Robots are the Future of Testing)", "last_updated_iso": "2012-02-28T13:42:57.522095", "name": "Building a Robot that Can Play Angry Birds on a Smartphone, (or Robots are the Future of Testing)", "start": [2012, 3, 10, 19, 15, 0, 5, 70, -1], "description": "Can your robot play Angry Birds? On an iPhone? Mine can. I call it \"BitbeamBot\". It started as an art project, but it has a much more serious practical application: mobile web testing. To trust that your mobile app truly works, you need an end-to-end test on the actual device. BitbeamBot is an Arduino-powered open-source hardware CNC robot that can test any application on any mobile device. ", "tags": "Talk, novice", "end_iso": "2012-03-10T19:55:00", "room_name": "Grand Ballroom F/E", "conf_key": "", "released": true, "authors": "Jason Huggins", "start_iso": "2012-03-10T19:15:00", "room": "Track V (E4)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/470/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>The email package in Python2 was given the internal version number '4'.  The email package in Python3 bumped that to '5'.  We're now working on version '6', hoping that it will be in shippable state for the Python 3.3 release.</p>\n<p>An email message, to the user, consists of a few headers (from, to, subject, date), some text (possibly rich-formatted html), and possibly some attachments.  An email message sent over the Internet is a sequence of bytes formatted according to a very complex set of rules designed to make accurate interchange possible and backward compatibility with older software likely.</p>\n<p>The email package tries to bridge the gap between the ideal user representation and the network format.<br/>\n</p>\n<p>In the past, it has pretty much settled for providing basic tools that an application can use to do the translation itself.  Using those tools to do anything non-trivial (such as using non-ASCII characters!) required understanding far more about the relevant email RFCs than any application developer should have to deal with. Now that Python3 makes working with unicode a fundamental, easy to use part of the language, it makes sense to have the email package provide an easy to use way of manipulating non-ASCII text in email messages.  This talk will compare the old way of doing things with the new way.  In doing so it will provide an introduction to the new capabilities of the email package, as well as providing a brief tutorial on how these facilities can be used to create, manipulate, receive, and transmit complex email messages.</p>", "presenters": "R. David Murray", "duration": 40, "id": 98, "end": [2012, 3, 10, 19, 55, 0, 5, 70, -1], "title": "The Email Package: Past, Present, and Future", "last_updated_iso": "2012-02-28T13:42:58.602560", "name": "The Email Package: Past, Present, and Future", "start": [2012, 3, 10, 19, 15, 0, 5, 70, -1], "description": "The email package in the Python Standard library has had a somewhat rocky transition into the Python3 era, and still doesn't handle non-ASCII easily.  That is about to change. This talk will compare how things worked in Python2 (the past), how things work now (in Python3.2), and how things will work much better in the future (hopefully Python3.3).\r\n", "tags": "Talk, experienced", "end_iso": "2012-03-10T19:55:00", "room_name": "Grand Ballroom C/D", "conf_key": "", "released": true, "authors": "R. David Murray", "start_iso": "2012-03-10T19:15:00", "room": "Track III (E2)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/378/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<h3 id=\"outline_of_talk\">Outline of talk</h3>\n<ul>\n<li>Ground Rules:<ul>\n<li>This talk is on cross-compiling. Porting Python to your favourite OS is a whole other (much longer) talk</li>\n<li>Examples Focus on embedded Linux so that build host and target are the same OS. Different host and target OS is way harder</li>\n</ul>\n</li>\n<li>\n<p>What makes cross-compiling Python challenging?</p>\n</li>\n<li>\n<p>Why can't I just use OpenEmbedded?</p>\n<ul>\n<li>may not support most recent Python versions</li>\n<li>may not have a build recipe for a required extension</li>\n<li>won't support your custom extensions</li>\n<li>you must use another platform</li>\n</ul>\n</li>\n<li>\n<p>Building Python (a short overview)</p>\n<ul>\n<li>build, patch, cross-build</li>\n<li>build standard lib extensions</li>\n</ul>\n</li>\n<li>\n<p>Building Extensions</p>\n<ul>\n<li>satisfying C dependencies</li>\n<li>modifying setup.py</li>\n<li>building for your platform</li>\n<li>packaging for distribution</li>\n</ul>\n</li>\n<li>\n<p>Other Things to Look Out for:</p>\n<ul>\n<li>package dependencies</li>\n<li>virtualenv &amp; easy_install / pip</li>\n<li>Challenges you may encounter with platforms other than Linux</li>\n</ul>\n</li>\n<li>\n<p>Demo: </p>\n<ul>\n<li>Python 3.3 on hardware TBD</li>\n</ul>\n</li>\n<li>\n<p>Invitation to discuss ways to make Python more accessible to embedded developers</p>\n</li>\n</ul>", "presenters": "Chris Lambacher", "duration": 40, "id": 52, "end": [2012, 3, 10, 19, 55, 0, 5, 70, -1], "title": "Cross-Compiling Python & C Extensions for Embedded Systems", "last_updated_iso": "2012-02-28T13:42:58.721006", "name": "Cross-Compiling Python & C Extensions for Embedded Systems", "start": [2012, 3, 10, 19, 15, 0, 5, 70, -1], "description": "Cross-compiling is not a use case directly supported by the Python build and extension system. This talk will discuss the process of building python for your embedded platform, and the basics of getting C extensions compiled and running. It will focus on Linux so that the build host and the build target are the same.", "tags": "Talk, experienced", "end_iso": "2012-03-10T19:55:00", "room_name": "Mission City Ballroom", "conf_key": "", "released": true, "authors": "Chris Lambacher", "start_iso": "2012-03-10T19:15:00", "room": "Track I (D5)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/11/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<h2>Introduction</h2>\n<ul>\n<li>The difference between systems and web (and scientific) computing</li>\n<li>Why Pythonistas should care about systems programming</li>\n</ul>\n<h2>Concurrency</h2>\n<ul>\n<li>Why \"just use multiple processes\" is inadequate</li>\n<li>Why event loops are inadequate</li>\n<li>java.util.concurrent: low level (collections, synch primitives)</li>\n<li>j.u.c.: high level (executors, futures, fork/join)</li>\n</ul>\n<h2>The VM</h2>\n<ul>\n<li>State of the art GC</li>\n<li>Built-in (and extensible) telemetry</li>\n</ul>\n<h2>More functional than Python?!</h2>\n<ul>\n<li>immutability</li>\n<li>Guava: com.google.*</li>\n</ul>", "presenters": "Jonathan Ellis", "duration": 35, "id": 76, "end": [2012, 3, 10, 20, 30, 0, 5, 70, -1], "title": "What Python can learn from Java", "last_updated_iso": "2012-02-28T13:42:57.694416", "name": "What Python can learn from Java", "start": [2012, 3, 10, 19, 55, 0, 5, 70, -1], "description": "Java is in some ways a bogeyman to the Python community -- the language that parents scare their children with, the Cobol of the 21st century.  But if we look past the cesspool of JEE it turns out that Java has quietly become an excellent systems environment, one that is still in many ways ahead of its time.\r\n", "tags": "Talk, intermediate", "end_iso": "2012-03-10T20:30:00", "room_name": "Grand Ballroom A/B", "conf_key": "", "released": true, "authors": "Jonathan Ellis", "start_iso": "2012-03-10T19:55:00", "room": "Track II (E1)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/83/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<ul>\n<li>Intro - goal of talk (2 minutes)</li>\n<li>Debian vs Fedora vs source distributions vs building your own (5 minutes)</li>\n<li>Different from the Desktop (10 minutes)<ul>\n<li>user interfaces: toolkits vs. browsers</li>\n<li>setting the time</li>\n<li>network</li>\n<li>storage and backups</li>\n<li>upgrades: images vs packages vs deployment</li>\n</ul>\n</li>\n<li>Portability, or ifdefs are Harmful in Python too (5 minutes)</li>\n<li>Not Python: C extensions, Swig, and import subprocess (5 minutes)</li>\n<li>Summary (2 minutes)</li>\n</ul>", "presenters": "Mark Kohler", "duration": 35, "id": 53, "end": [2012, 3, 10, 20, 30, 0, 5, 70, -1], "title": "Designing Embedded Systems with Linux and Python", "last_updated_iso": "2012-02-28T13:42:58.238936", "name": "Designing Embedded Systems with Linux and Python", "start": [2012, 3, 10, 19, 55, 0, 5, 70, -1], "description": "The continual decrease in the cost of computer hardware is allowing more embedded systems to be built with Linux and Python, instead of the traditional approach of a real-time operating system and C. This talk reviews the differences between those approaches and describes problems, solutions, and tools that can be used when building embedded systems with Python.", "tags": "Talk, experienced", "end_iso": "2012-03-10T20:30:00", "room_name": "Mission City Ballroom", "conf_key": "", "released": true, "authors": "Mark Kohler", "start_iso": "2012-03-10T19:55:00", "room": "Track I (D5)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/373/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>Pyp is a linux command line text manipulation tool similar to awk or sed, but which uses standard python string and list methods as well as custom functions evolved to generate fast results in an intense production environment. Pyed Pyper was developed at Sony Pictures Imageworks to facilitate the construction of complex image manipulation unix commands during visual effects work on Alice in Wonderland, Green Lantern, and the upcoming The Amazing Spiderman.</p>\n<p>Because pyp employs its own internal piping syntax (\"|\") similar to unix pipes, complex operations can be proceduralized by feeding the output of one python command to the input of the next. This greatly simplifies the generation and troubleshooting of multistep operations without the use of temporary variables or nested parentheses.</p>\n<p>pyp output has been optimized for typical production scenarios. For example, if text is broken up into an array using the \"split()\" method, the output will be automatically numbered by field making selecting a particular field trivial. Numerous other conveniences have been included, such as an accessible history of all inter-pipe sub-results, an ability to perform mathematical operations, and a complement of variables based on common metacharcter split/join operations.</p>\n<p>For power users, commands can be easily saved and recalled from disk as macros, providing an alternative to quick and dirty scripting. For the truly advanced user, additional methods can be added to the pyp class via a config file, allowing tight integration with larger facilities data structures or custom toolsets. </p>", "presenters": "Toby Rosen", "duration": 35, "id": 145, "end": [2012, 3, 10, 20, 30, 0, 5, 70, -1], "title": "The Pyed Piper: A Modern Python Alternative to awk, sed and Other Unix Text Manipulation Utilities ", "last_updated_iso": "2012-02-28T13:42:57.538197", "name": "The Pyed Piper: A Modern Python Alternative to awk, sed and Other Unix Text Manipulation Utilities ", "start": [2012, 3, 10, 19, 55, 0, 5, 70, -1], "description": "\"The Pyed Piper\", or pyp, is a linux command line text manipulation tool similar to awk or sed, but which uses standard python string and list methods as well as custom functions evolved to generate fast results in an intense production environment.\r\n\r\n", "tags": "Talk, experienced", "end_iso": "2012-03-10T20:30:00", "room_name": "Grand Ballroom F/E", "conf_key": "", "released": true, "authors": "Toby Rosen", "start_iso": "2012-03-10T19:55:00", "room": "Track V (E4)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/14/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>GNU Mailman has been around since the early 1990's.  The current major version\n2.1 is used at thousands of sites around the world, to host countless number\nof mailing lists, both public and private.  Newsletter/announce style lists as\nwell as discussion lists, and everything in between are hosted on Mailman\nsystems.  If you participate in open source, you almost certainly use Mailman\nwhether you know it or not.  You might even occasionally curse some of\nMailman's mis-features such as password reminders, or multiple domain hosting\nlimitations.  Or you might have struggled with integrating Mailman into your\nown larger web site design.</p>\n<p>Mailman 3 is an initiative to address the biggest of the old architectural\nfaults by bringing the code base into modern Python best practices,\nintegrating a SQL database backend, and providing an administrative REST\ninterface to the system for controlling it and making it easier to integrate\ninto third party systems.  This talk will outline some of these changes,\nalways with an emphasis on the larger applicability of the solutions employed,\nand their lessons for the general Python programming public.</p>", "presenters": "Barry Warsaw", "duration": 35, "id": 99, "end": [2012, 3, 10, 20, 30, 0, 5, 70, -1], "title": "Mailman 3", "last_updated_iso": "2012-02-28T13:42:58.504639", "name": "Mailman 3", "start": [2012, 3, 10, 19, 55, 0, 5, 70, -1], "description": "Mailman 3 has been in development for several years.  This is an evolution of the ever popular mailing list management system that runs thousands of mailing lists around the world.  This talk describes how the code has been modernized and how the architectural deficiencies of Mailman 2 have been addressed using REST and other technologies.  This is a spinoff from the AOSA chapter on Mailman 3.", "tags": "Talk, experienced", "end_iso": "2012-03-10T20:30:00", "room_name": "Grand Ballroom C/D", "conf_key": "", "released": true, "authors": "Barry Warsaw", "start_iso": "2012-03-10T19:55:00", "room": "Track III (E2)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/196/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>The CherryPy project was the first web framework to support Python 3. At the same time, we needed to continue to support and improve the Python 2 implementation. It's taken plenty of time and lots of experimentation to find out the best way. We will explore four different ways to support both Python 2 and 3, commenting on the pros and cons of each.</p>\n<ol>\n<li>Intro</li>\n<li>Python 3 change highlights</li>\n<li>Special concerns for I/O, including WSGI</li>\n<li>Approach 1: 2to3</li>\n<li>Approach 2: separate branches</li>\n<li>Approach 3: setup.py switch</li>\n<li>Approach 4: compatibility layer</li>\n<li>Q&amp;A</li>\n</ol>", "presenters": "Robert Brewer", "duration": 35, "id": 122, "end": [2012, 3, 10, 20, 30, 0, 5, 70, -1], "title": "How CherryPy supports Python 2 and 3", "last_updated_iso": "2012-02-28T13:42:58.646671", "name": "How CherryPy supports Python 2 and 3", "start": [2012, 3, 10, 19, 55, 0, 5, 70, -1], "description": "CherryPy was the first web framework to be made available for use with Python 3, and we tried several approaches to support both Python 2 and 3 before settling on one. Learn about the ups and the downs of each approach, and ways you can make your own porting project easier.", "tags": "Talk, experienced", "end_iso": "2012-03-10T20:30:00", "room_name": "Grand Ballroom H/G", "conf_key": "", "released": true, "authors": "Robert Brewer", "start_iso": "2012-03-10T19:55:00", "room": "Track IV (E3)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/356/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 12, 17, 21, 1, 59, -1], "abstract": null, "presenters": "", "duration": 60, "id": 164, "end": [2012, 3, 10, 21, 30, 0, 5, 70, -1], "title": "Saturday Evening Lightning talks (60 minutes)", "last_updated_iso": [2012, 2, 28, 12, 17, 21, 1, 59, -1], "name": "Saturday Evening Lightning talks (60 minutes)", "start": [2012, 3, 10, 20, 30, 0, 5, 70, -1], "description": "", "tags": "plenary", "end_iso": "2012-03-10T21:30:00", "conf_key": "", "released": true, "authors": "", "start_iso": "2012-03-10T20:30:00", "room": "Plenary", "license": "", "url": null, "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>The main similarities and differences between Python and ABC will be shown, with tables showing features side-by-side, and a complete script in each language.</p>\n<p>Among the similarities, we will highlight:</p>\n<ul>\n<li>\n<p>foreach style for command, with tuple unpacking;</p>\n</li>\n<li>\n<p>block structure by indentation;</p>\n</li>\n<li>\n<p>syntactic support and extensive use of dicts and tuples (called \"tables\" and \"compounds\");</p>\n</li>\n<li>\n<p>unbounded strings;</p>\n</li>\n</ul>\n<p>Some ABC features that Python did not inherit will also be shown:</p>\n<ul>\n<li>\n<p>lists and dicts are only allowed to contain items of the same type;</p>\n</li>\n<li>\n<p>variables can only be bound to a single type during one function invocation;</p>\n</li>\n<li>\n<p>lists are automatically kept sorted (the rationale was: you either want a list to be sorted, or the ordering of the items is irrelevant);</p>\n</li>\n<li>\n<p>numbers are either exact (represented as a ratio of two unbounded integers) or approximate (represented as hardware floats) and division between exact numbers always produces another exact number;</p>\n</li>\n<li>\n<p>explicit files are not supported: instead, the environment auto-saves objects like functions and global variables in workspaces for use in future sessions;</p>\n</li>\n</ul>\n<p>ABC also includes an editor and interactive console with auto-completion, auto-indentation and other aids. Screen shots of the environment will be included.</p>\n<p>The merits of these and some other features that Python dropped or changed will be discussed in the context of Python usage by people learning to program. For instance, although implicit persistency and constrained file I/O may be unacceptable to some professional programmers, there are similar features in programming systems designed for non-programmers, such as Smalltalk, Hypercard and more recently, Processing. </p>", "presenters": "Luciano Ramalho", "duration": 5, "id": 186, "end": [2012, 3, 11, 11, 5, 0, 6, 71, -1], "title": "38. ABC: the mother of Python", "last_updated_iso": "2012-02-28T13:42:57.146811", "name": "38. ABC: the mother of Python", "start": [2012, 3, 11, 11, 0, 0, 6, 71, -1], "description": "Before Python, Guido was a contributor to the ABC language and environment. ABC was designed to teach programming, and introduced many \"Pythonic\" ideas: integrated dicts and tuples, structure by indentation, strong typing without declarations etc. With high demand for Python in education, the legacy of ABC is more relevant than ever as we design courses and environments for learners. ", "tags": "Poster, novice", "end_iso": "2012-03-11T11:05:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Luciano Ramalho", "start_iso": "2012-03-11T11:00:00", "room": "Poster IV", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/502/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 56, 1, 59, -1], "abstract": "<p>This project is aimed to provide a simple, feature-full and totally integrated IDE tool for Python (specifically something similar to Visual Basic classic, knowing its drawbacks and lesson learned after using it). To prevent common pitfalls of Rapid Application Development, this aproach will follow Personal Software Process guidelines to measure and gather metrics in order to help to estimate and improve quality.</p>\n<p>The goal of this project is to be as lightweight as possible, with a structure similar to IDLE, but solving its annoyances using a modern GUI toolkit and a web framework, integrating the Python development tool-chain.\nThis work is being done initially as part of an academic research (degree thesis), and it is intended to be used either for educational purposes and in real world commercial applications.</p>\n<p>Further information at: <a href=\"http://code.google.com/p/rad2py/\">http://code.google.com/p/rad2py/</a></p>\n<h1 id=\"poster_outline\">Poster outline</h1>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Context: research project for academic degree thesis started in 2006,coding has begun in 2011</li>\n<li><a href=\"http://cacm.acm.org/blogs/blog-cacm/101708-watts-humphrey-in-honor-of-a-pioneer/fulltext\">Why is this still relevant and possible</a>: looking for agility and discipline for open source develompent</li>\n<li>Motivation &amp; Objectives: why a new IDE for python?</li>\n<li><a href=\"http://en.wikipedia.org/wiki/Rapid_application_development\">Rapid Application Development</a>: risks and \"conceptual dispersion\"</li>\n<li><a href=\"http://en.wikipedia.org/wiki/Personal_Software_Process\">Personal Software Process</a>: effectiveness and adoption problem</li>\n<li>Who is Using PSP: <a href=\"http://www.sei.cmu.edu/tspsymposium/2009/2006/deliver.pdf\">Microsoft</a> (India), <a href=\"http://www.sei.cmu.edu/tspsymposium/2009/program.html\">Adobe</a>, <a href=\"http://www.sei.cmu.edu/tspsymposium/2010/abstracts.cfm#1-930\">massively introduction in Mexico</a>, <a href=\"http://www.sei.cmu.edu/tspsymposium/2010/abstracts.cfm#3-0115a\">agile projects</a>, etc.</li>\n<li>Un-obstructive Metrics recollection: Time and Defect recording logs, LOC accounting </li>\n</ul>\n<h2 id=\"current_similar_tools\">Current similar tools</h2>\n<p>2nd and 3rd generation PSP tools (Java):</p>\n<ul>\n<li><a href=\"http://www.processdash.com/\">The Software Process Dashboard</a>: External app (context switching and possible data inaccuracy problems)</li>\n<li><a href=\"http://code.google.com/p/hackystat\">Hackystat open source framework project</a>: Eclipse sensors (privacy concerns, low-level data and complex setup)</li>\n<li><a href=\"http://www.csie.ntut.edu.tw/labsdtl/95-summer/0823-1.pdf\">PSP Assistant</a> &amp; <a href=\"http://www.springerlink.com/content/1607282107g27767/\">\"Jasmine\" PSP Support tool</a>: Eclipse add-ons (closed source?)</li>\n</ul>\n<h2 id=\"proposed_solution\">Proposed solution</h2>\n<p>\"4th generation PSP tool\": <a href=\"http://code.google.com/p/rad2py/\">rad2py</a> is a platform (foundations -methodology and process- + framework + tools) including: </p>\n<ul>\n<li>ide2py: integrated IDE with automatic metric collection</li>\n<li>psp2py: web app to track historical data and estimation</li>\n<li><a href=\"http://www.web2py.com/\">web2py</a>: framework to develop web apps (enhancements required)</li>\n<li><a href=\"http://code.google.com/p/gui2py/\">gui2py</a>: framework to develop GUI apps using web2py and wxPython</li>\n</ul>\n<h2 id=\"implementation\">Implementation</h2>\n<ul>\n<li>Python tools and libraries used/inspired by: IDLE / PythonWin, wx.STC, PDB, wx.Py, PythonCard, PyFlakes/PEP8, Py2Exe, etc.</li>\n<li>Why web2py as framework? uniques features that made this possible at this stage </li>\n<li>Why wxpython as gui toolkit? advanced python-made features and interesting alternatives</li>\n<li>Architectural diagram and internal design details</li>\n</ul>\n<h2 id=\"ide2py_major_modules\">ide2py major modules:</h2>\n<ul>\n<li>main.py: AUI/MDI, .ini, PyAUIFrame + mixins</li>\n<li>editor.py: wx.STC: syntaxis, autocompletion, basic calltips</li>\n<li>browser.py: webkit (gtk/linux) or ie (windows)</li>\n<li>shell.py: wx.Py (wx.PyShell): integrated to console and debugger</li>\n<li>debugger.py: bdb, single thread/process (~ IDLE and PythonWin)</li>\n<li>repo.py + repo_hg.py: Mercurial tree + change notifies </li>\n<li>web2py.py: embedded WSGI webserver (mainloop)</li>\n<li>psp.py: defect list, time grid, toolbar (shelve/pickle -&gt; simplejsonrpc)</li>\n<li>wxpydiff.py: integrated visual diff tool</li>\n</ul>\n<h2 id=\"current_status\">Current Status</h2>\n<ul>\n<li>Progress report: <a href=\"http://code.google.com/p/rad2py/wiki/RoadMap\">Roadmap</a></li>\n<li><a href=\"http://code.google.com/p/rad2py/issues/list\">Issues</a> found &amp; lessons learned</li>\n<li>Initial conclusion and topics where help is needed</li>\n</ul>\n<h2 id=\"field_experiments\">Field experiments</h2>\n<p>Projects to be developed to gather metrics for empirical validation:</p>\n<ul>\n<li><a href=\"http://code.google.com/p/pyafipws/wiki/ProjectSummary\">PyRece</a>: Electronic invoice application</li>\n<li><a href=\"http://code.google.com/p/ampatu/\">Ampatu</a>: 911 emergency mgmnt system</li>\n<li><a href=\"http://code.google.com/p/gestionlibre/\">GestionLibre</a>: Simple ERP system</li>\n</ul>\n<h2 id=\"zero_defects_challenge\">\"Zero Defects\" Challenge:</h2>\n<p>You could help testing this tools and sending statistical data to formally prove the hypothesis of this research regarding that quality software can be developed faster with Python! \nAlso, not only you'll be teaching/learning python, you'll be practising sound software engineering principles to see if you can improve your skills, I bet you will ;-)</p>\n<p><em>Details to be defined</em></p>\n<h2 id=\"screenshot\">Screenshot:</h2>\n<p><img src=\"http://rad2py.googlecode.com/hg/screenshots/ide2py-0.05-ubuntu.png\" alt=\"ide2py debugging an web2py app\"/></p>\n<h1 id=\"references\">References</h1>\n<ul>\n<li>[AGILDIR03]   Abrahamsson, P., Warsta, J., Siponen, M. T., and Ronkainen, J. (2003). New directions on agile methods: a comparative analysis. In Proceedings of the 25th international Conference on Software Engineering (Portland, Oregon, May 03 - 10, 2003). International Conference on Software Engineering. IEEE Computer Society, Washington, DC, 244-254.</li>\n<li>[AISEMA09]    Irina Diana Coman, Alberto Sillitti, Giancarlo Succi. Free University of Bozen-Bolzano, Italy. A case-study on using an Automated In-process Software Engineering Measurement and Analysis system in an industrial environment. Proceedings of the 31st International Conference on Software Engineering IEEE Computer Society Washington DC, USA \u00a92009 ISBN: 978-1-4244-3453-4; http://www.inf.unibz.it/~gsucci/publications/images/ACase-studyonUsinganAutomated In-processSoftwareEngineering.pdf</li>\n<li>[HUMPHREY95]  Humphrey, Watts S. A Discipline for Software Engineering. Reading, MA: Addison-Wesley, 1995.</li>\n<li>[ISEMA07] Philip M. Johnson. Requirement and Design Trade-offs in Hackystat: An in-process software engineering measurement and analysis system. Proceedings of the 2007 International Symposium on Empirical Software Engineering and Measurement, Madrid, Spain, September, 2007.; http://csdl.ics.hawaii.edu/techreports/06-06/06-06.pdf</li>\n<li>[MUKESH08]    Mukesh Jain. Delivering Successful Projects with TSP and Six Sigma: A Practical Guide to Implementing Team Software Process. Auerbach Publications, November 2008. ISBN 978-1420061437</li>\n<li>[PROCEEDINGSTSP10]    2010 TSP Symposium Proceedings Document. Carnegie Mellon University. Software Engineering Institute; http://www.sei.cmu.edu/tspsymposium/past-proceedings/2010/2010_TSP_Proceedings.pdf</li>\n<li>[PSP00]   Watts S. Humphrey (2000) The Personal Software Process; Software Engineering Institute, Carnegie Mellon University</li>\n<li>[PSPA05]  Raymund Sison, David Diaz, Eliska Lam, Dennis Navarro, Jessica Navarro. Personal Software Process (PSP) Assistant. In Proceedings of APSEC'2005. pp.687~696; http://www.csie.ntut.edu.tw/labsdtl/95-summer/0823-1.pdf</li>\n<li>[PSPBEY03]    Johnson, P. M. et al (2003) Beyond the Personal Software Process: metrics collection and analysis for the differently disciplined. In Proceedings of the 25th international Conference on Software Engineering (Portland, Oregon, May 03 - 10, 2003). International Conference on Software Engineering. IEEE Computer Society, Washington, DC, 641-646.</li>\n<li>[PSPBOK09]    PSP BOK Official Release.The Personal Software Process (PSP) Body of Knowledge, Version 2.0. Special Report. August 2009 (Revised February 2010). CMU/SEI-2009-SR-018; http://www.sei.cmu.edu/library/abstracts/reports/09sr018.cfm</li>\n<li>[PSPDAT98]    Disney, A. M. and Johnson, P. M. (1998) Investigating data quality problems in the PSP. In Proceedings of the 6th ACM SIGSOFT international Symposium on Foundations of Software Engineering (Lake Buena Vista, Florida, United States, November 01 - 05, 1998). SIGSOFT '98/FSE-6. ACM Press, New York, NY, 143-152</li>\n<li>[PSPEMP97]    Will Hayes, James W. Over (1997) The Personal Software Process: An Empirical Study of Impact of PSP on Individual Engineers, Technical Report; Software Engineering Institute, Carnegie Mellon University</li>\n<li>[RAD91]   James Martin, (1991) Rapid Application Development; Macmillan Publishing Co., Inc.</li>\n<li>[RADRSK00]    Agarwal, R., et al (2000). Risks of rapid application development. Communications of the ACM 43, 11es (Nov. 2000)</li>\n<li>[RADSTN98]    Stephen E. Cross (1998) Toward Disciplined Rapid Application Development, Department of Defense Software TechNews; Volume 2 Number 1 - Rapid Application Development (RAD) issue; http://www.dacs.dtic.mil/awareness/newsletters/technews2-1/toc.html</li>\n<li>[ROIPSP]  Rico, David F., What is the Return on Investment (ROI) of PSPSM (p\u00e1gina web) http://davidfrico.com/roi-psppdf.htm</li>\n<li>[ROISPI04]    Rico, David F. (2004) ROI of Software Process Improvement: Metrics for Project Managers and Software Engineers; J. Ross Publishing; http://davidfrico.com/</li>\n<li>[ROISTN02]    Rico, David F. (2002) How to Estimate ROI for Inspections, PSPsm, TSPsm, SW-CMM\u00ae, ISO 9000, and CMMIsm, Department of Defense Software TechNews; Volume 5 Number 4 - Return-On-Investment from Software Process Improvement; http://www.dacs.dtic.mil/awareness/newsletters/stn5-4/</li>\n<li>[SWQ01]   Baltus, B et.al. , Software Quality: State of the Art in Management, Testing, and Tools; Springer</li>\n<li>[WEB2PY10]    Massimo Di Pierro, School of Computing, DePaul University. Web2py Enterprise Web Framework, 3rd Edition. Lulu.com. October 2010. ISBN 978-0557604142; http://www.web2py.com/book</li>\n<li>[WEB2PY11]    Massimo Di Pierro, \"web2py for Scientific Applications,\" Computing in Science and Engineering, vol. 13, no. 2, pp. 64-69, Mar./Apr. 2011, doi:10.1109/MCSE.2010.97</li>\n</ul>", "presenters": "Mariano Reingart", "duration": 5, "id": 184, "end": [2012, 3, 11, 11, 5, 0, 6, 71, -1], "title": "13. RAD2PY: platform+IDE for solid & predictable Rapid Application Development", "last_updated_iso": "2012-02-28T13:42:56.503259", "name": "13. RAD2PY: platform+IDE for solid & predictable Rapid Application Development", "start": [2012, 3, 11, 11, 0, 0, 6, 71, -1], "description": "Can we develop software faster without compromising quality, schedule or cost? Do we have the right tools? Do we measure and estimate well? Are we good developers?\r\nThis research attempts to answer these concerns, combining automated statistical methods with a lightweight but complete IDE for wx/web2py, alternative to IDLE resembling VB, for QA & self-improvement using Personal Software Process.\r\n", "tags": "Poster, novice", "end_iso": "2012-03-11T11:05:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Mariano Reingart", "start_iso": "2012-03-11T11:00:00", "room": "Poster II", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/147/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 56, 1, 59, -1], "abstract": "<p>The <a href=\"http://pythonsprints.com/\" title=\"sprint committee website\">PSF Sprint committee</a> offers up to $300 USD to groups that organize <a href=\"http://en.wikipedia.org/wiki/Sprint_(software_development)\" title=\"sprint definition\">sprint</a> efforts on open source projects in the Python world. From working on Python itself, to the vast array of projects in the community, we take great interest in keeping <em>you</em> interested. We're also interested in buying you dinner, providing a place to work at, and buying t-shirts or other goodies for sprint attendees.</p>\n<ol>\n<li>Committee Goals<ul>\n<li>Fund existing sprint groups</li>\n<li>Get new groups interested in sprinting</li>\n<li>Generate interest in contribution to Python projects</li>\n<li>Advertise sprint events, including those at conferences</li>\n<li>Have fun, learn, and contribute with other community members</li>\n</ul>\n</li>\n<li>How We Operate<ul>\n<li>Receive applications, vote, advertise, reimburse after event</li>\n</ul>\n</li>\n<li>Past Sponsorships<ul>\n<li>packaging, Genshi, matplotlib</li>\n</ul>\n</li>\n<li>Upcoming Sponsorships<ul>\n<li>PyCon (will update closer to conference)</li>\n</ul>\n</li>\n<li>How To Receive Funding<ul>\n<li>How to apply, how to be reimbursed</li>\n</ul>\n</li>\n</ol>", "presenters": "Brian Curtin", "duration": 5, "id": 179, "end": [2012, 3, 11, 11, 5, 0, 6, 71, -1], "title": "1. PSF Sprints - Supporting the community one sprint at at time", "last_updated_iso": "2012-02-28T13:42:56.644466", "name": "1. PSF Sprints - Supporting the community one sprint at at time", "start": [2012, 3, 11, 11, 0, 0, 6, 71, -1], "description": "Formed in 2010, the PSF Sprints committee set out to support local communities getting together to make great software by funding their sprints with up to $300 USD. No matter the project, the PSF wants to help you contribute to the Python ecosystem. Come see what we're doing, how we're doing it, who we've supported, and see how you can take part as well.", "tags": "Poster, novice", "end_iso": "2012-03-11T11:05:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Brian Curtin", "start_iso": "2012-03-11T11:00:00", "room": "Poster I", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/53/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>Python unique features such its interpretative, multiplatform and object oriented nature as well as being a free and open source programming software with an extensive libraries, creates the possibility that any user connected to the internet can download the entire package into any platform, install it and immediately begin to use it. Thus Python is gaining reputation as a preferred environment for introducing students and new beginners to elegant and all purpose programming. Therefore in Africa, the Python African Tour project has been launched and one of us (GEA) is coordinating its use in computational science and engineering (S &amp; E) code-named Python African Computational Science and Engineering Tour (PACSET). We present here an overview of the three projects currently under the PACSET : (1) teaching Python to students, new beginners as well as expert programmers in S &amp; E (2) using Python to model, simulate and visualize laboratory experiments to aid the teaching and learning of experimental S &amp; E and (3) using Python to model, simulate and visualize concepts, laws and  phenomena in S &amp; E  to compliment the teaching of theory and experiment. It is hoped that the PACSET can be extended, modified and adopted in many developing nations.</p>", "presenters": "Godfrey Ejiroghene Akpojotor , Louis Ehwerhemuepha", "duration": 5, "id": 185, "end": [2012, 3, 11, 11, 5, 0, 6, 71, -1], "title": "25. An Overview of the Python African Computational Science and Engineering Tour Project ", "last_updated_iso": "2012-02-28T13:42:57.369974", "name": "25. An Overview of the Python African Computational Science and Engineering Tour Project ", "start": [2012, 3, 11, 11, 0, 0, 6, 71, -1], "description": "Pervading of computer activities into the teaching/learning process and research make them constitute a third pillar in science and engineering (S & E) in addition to theory and experiment. Python African Computational S & E Tour is to ease the learners into programming with Python and to use it for modeling, simulation and visualization to aid teaching/learning process and research in Africa.", "tags": "Poster, novice", "end_iso": "2012-03-11T11:05:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Godfrey Ejiroghene Akpojotor , Louis Ehwerhemuepha", "start_iso": "2012-03-11T11:00:00", "room": "Poster III", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/494/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>Twisted created the <a href=\"http://twistedmatrix.com/highscores\" title=\"http://twistedmatrix.com/highscores\">high scores list</a> to help recognize many kinds of contribution and to encourage contributors to work on stalled tickets.</p>\n<p>You might be surprised by just how motivating it is to see your name climb up the ladder. It has helped attract new contributors and fuel friendly, hugely productive coding rivalries.</p>\n<p>Attempting to <a href=\"http://twistedmatrix.com/highscores/?time=2010-03-01\" title=\"http://twistedmatrix.com/highscores/?time=2010-03-01\">beat exarkun</a> is also just fun, if mostly futile.</p>\n<p>Stop by, check out the list, and swap stories about how your projects attract and retain contributors.</p>", "presenters": "Jessica McKellar", "duration": 5, "id": 180, "end": [2012, 3, 11, 11, 10, 0, 6, 71, -1], "title": "2. Twisted Matrix High Scores", "last_updated_iso": "2012-02-28T13:42:58.063035", "name": "2. Twisted Matrix High Scores", "start": [2012, 3, 11, 11, 5, 0, 6, 71, -1], "description": "Do you have what it takes to get to the top of http://twistedmatrix.com/highscores?", "tags": "Poster, experienced", "end_iso": "2012-03-11T11:10:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Jessica McKellar", "start_iso": "2012-03-11T11:05:00", "room": "Poster I", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/167/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 56, 1, 59, -1], "abstract": "<p>When distributing applications for the Microsoft Windows platform, documentation is often included in Compiled HTML Help form, one of Microsoft\u2019s native help formats.  Traditionally Compiled HTML Help, or CHM, files are normally constructed from HTML files using Microsoft\u2019s tools or a variety of wrappers that employ these tools. This workflow is sometimes suboptimal for many developers that are using non-Windows build servers and/or want to avoid authoring HTML directly.</p>\n<p>The package to be presented, <em>preshrunk-cotton</em>, is meant to solve two problems simultaneously: eliminate the need to directly author HTML files and allow building CHM files on any platform.  To avoid HTML authoring, <em>preshrunk-cotton</em> uses the Textile markup language to significantly accelerate the process of actually writing documentation.  Each \u201cpage\u201d of help is represented by a separate file in a directory structure written using Textile.  The directory structure itself is then used to generate the organizational tree of the resultant CHM file.  Images and any other files not written in Textile (including HTML files) are simply left as is, allowing for their inclusion in the CHM file.</p>\n<p>Building CHM files on a variety of platforms introduces an interesting issue.  Normally, Microsoft\u2019s HTML Help Workshop is used to compile CHM files from HTML and supporting files.  However, using the Microsoft tools implies that one has the ability to execute said tools on their build system, which is often not the case.  An alternative compiler from the Free Pascal project, <em>chmcmd</em>, also has the ability to build CHM files without the need for any Microsoft tools.  The tool was originally created in support of compiling Free Pascal\u2019s documentation, but the small utility has one extraordinary implication: the <em>chmcmd</em> utility allows for the creation of CHM files on any platform supported by FreePascal.</p>\n<p>The <em>chmcmd</em> utility is not particularly user-friendly, requiring some cryptic XML files to be present for the purposes of constructing the resultant CHM file.  <em>preshrunk-cotton</em> is able to automatically generate all the necessary input files and instructions required by <em>chmcmd</em>.  By traversing the directory structure of input files and examining some simple informational files, <em>preshrunk-cotton</em> can construct the proper XML for <em>chmcmd</em>, generate an educated guess at help file index entries, execute the utility, and return the name and location of a valid CHM file.</p>\n<p>The biggest strength of preshrunk-cotton is its ability to be integrated with existing build tools.  A command line script is available to accept a directory tree containing textile, HTML, and other supporting files and generate a CHM file, allowing simple integration with makefile-based build systems and similar tools.  Alternatively, if a build system is based on Python, <em>preshrunk-cotton</em> can be more directly integrated.</p>\n<p>This package was originally written to support a proprietary commercial software package, and it continues to be used  to construct documentation for said product.  However, the package would benefit from additional community involvement, and it may prove helpful to a significant number of developers distributing software for the Windows platform.<br/>\n</p>\n<p>More information:</p>\n<p><em>preshrunk-cotton</em>: <a href=\"http://code.google.com/p/preshrunk-cotton/\">http://code.google.com/p/preshrunk-cotton/</a></p>\n<p>Free Pascal\u2019s CHM implementation: <a href=\"http://wiki.freepascal.org/chm\">http://wiki.freepascal.org/chm</a></p>", "presenters": "Jeffrey Armstrong", "duration": 5, "id": 181, "end": [2012, 3, 11, 11, 10, 0, 6, 71, -1], "title": "14. preshrunk-cotton: Windows Help Files for Lazy People", "last_updated_iso": "2012-02-28T13:42:56.625830", "name": "14. preshrunk-cotton: Windows Help Files for Lazy People", "start": [2012, 3, 11, 11, 5, 0, 6, 71, -1], "description": "Generating a Compiled HTML Help (CHM) file is often necessary when distributing applications on Microsoft Windows platforms.  However, many developers may dislike authoring HTML and/or cannot use Microsoft\u2019s help tools.  preshrunk-cotton streamlines the creation of CHM files by allowing the author to quickly write documentation in Textile markup and build the help file on almost any platform.", "tags": "Poster, novice", "end_iso": "2012-03-11T11:10:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Jeffrey Armstrong", "start_iso": "2012-03-11T11:05:00", "room": "Poster II", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/89/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<ul>\n<li>What is Cscope</li>\n<li>Why use it for Python?</li>\n<li>How does it work?</li>\n<li>How does pycscope do its job?</li>\n<li>A closer look at parsing python</li>\n<li>Enhancing it to search for symbols in strings</li>\n<li>Questions</li>\n</ul>", "presenters": "Peter Portante", "duration": 5, "id": 183, "end": [2012, 3, 11, 11, 10, 0, 6, 71, -1], "title": "39. Python under PyCScope", "last_updated_iso": "2012-02-28T13:42:57.462702", "name": "39. Python under PyCScope", "start": [2012, 3, 11, 11, 5, 0, 6, 71, -1], "description": "CScope has been around for years, and is a very useful tool to get a handle on C source code. Pycscope is an attempt to bring those benefits to the world of Python. Unfortunately, the existing version is woefully out of date. We take a walk through an attempt to update it, correct some flaws and make it more generally useful to us, while giving us a view into the Python parser.", "tags": "Poster, experienced", "end_iso": "2012-03-11T11:10:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Peter Portante", "start_iso": "2012-03-11T11:05:00", "room": "Poster IV", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/492/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>The commercial programming languages such as Matlab and particularly IDL have been dominating the field of atmospheric sciences for the past few decades. However, the Python language and its scientific ecosystem have become a promising alternative owing to their open-source, easy-reproducible, and user-friendly natures. As a part\nof my dissertation, I study the early stages of rain formation, which is data intensive work, both from modeling and observational aspects. Analysis of observational data utilizes the netcdf4-python and PyNIO data accessing libraries, for data arithmetics and manipulation the NumPy package. Modeling work uses various functionality from the SciPy package, also benefits from the near 100X execution speed-ups of Cython hybrid language. Visualizations mostly in 2D form are created\nusing the matplotlib plotting library and seldom using MayaVi if 3D analysis is required.  High interactivity of IPython interpreter greatly eases the experimental investigation of the work. Single to multi-dimensional datasets from in-situ measurements, and remote radar/lidar/satellite retrievals of marine stratocumulus type clouds are at the center of this study. Analysis and visualization of numerous sensory information from these datasets help us to understand the linkages between particles afloat in the air and interactions taking place in clouds. Certainly, the data oriented use of Python has obvious advantages facilitating the computational life of atmospheric scientists.</p>", "presenters": "G\u00f6khan Sever", "duration": 5, "id": 182, "end": [2012, 3, 11, 11, 10, 0, 6, 71, -1], "title": "26. Data analysis and visualization in atmospheric sciences", "last_updated_iso": "2012-02-28T13:42:58.380617", "name": "26. Data analysis and visualization in atmospheric sciences", "start": [2012, 3, 11, 11, 5, 0, 6, 71, -1], "description": "This poster demonstrates the Python based data analysis and visualization in atmospheric sciences with particular focus on modeled and observational aspects of marine clouds.", "tags": "Poster, novice", "end_iso": "2012-03-11T11:10:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "G\u00f6khan Sever", "start_iso": "2012-03-11T11:05:00", "room": "Poster III", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/496/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 56, 1, 59, -1], "abstract": "<p>Location has become ubiquitous in today\u2019s society and is integral in everything from web applications, to smartphone apps, to automotive navigation systems. Spatial data, often derived from Geographic Information Systems (GIS), drives these applications at their core. More and more, non-spatial developers and programmers with little or no knowledge of spatial data formats are being tasked with working with and consuming spatial data in their applications. Spatial data exists in a wide variety of formats which often adds to the confusion and complexity. Fortunately, Python is tightly integrated, accepted, and used within the GIS community, and has been for some time. Python packages and other libraries that are accessible through Python exist to both read and write many common (and some not so common) spatial data formats. With the help of these packages and libraries, Python developers can easily manipulate, read, and write data formats such as ESRI shapefile, raster datasets, KML, and LiDAR.</p>", "presenters": "Chad Cooper", "duration": 5, "id": 189, "end": [2012, 3, 11, 11, 15, 0, 6, 71, -1], "title": "27. Reading and writing spatial data for the non-spatial programmer", "last_updated_iso": "2012-02-28T13:42:56.727745", "name": "27. Reading and writing spatial data for the non-spatial programmer", "start": [2012, 3, 11, 11, 10, 0, 6, 71, -1], "description": "Location has become mainstream in society and computing. Developers are being tasked with working with spatial data of varying formats. Lucky for Python developers, there are many packages and libraries that can help us make sense of and utilize spatial data, and this poster will explain some of those options.", "tags": "Poster, experienced", "end_iso": "2012-03-11T11:15:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Chad Cooper", "start_iso": "2012-03-11T11:10:00", "room": "Poster III", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/338/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>The poster will go over the basic idea and technology behind Read the Docs. I expect that some attendees will already be familiar with the site. For them, I can go more in depth into the technical workings and interesting anecdotes that have come from running a large open source Django site.</p>\n<p>For people that aren't familiar with the site, I can introduce them to the concept and ideas, and try and evangelize Sphinx and Read the Docs as the de facto documentation toolset for the Python and greater Open Source community.</p>", "presenters": "Eric Holscher", "duration": 5, "id": 188, "end": [2012, 3, 11, 11, 15, 0, 6, 71, -1], "title": "15. Read the Docs", "last_updated_iso": "2012-02-28T13:42:57.086818", "name": "15. Read the Docs", "start": [2012, 3, 11, 11, 10, 0, 6, 71, -1], "description": "This poster will feature the site Read the Docs. I think this is a better venue than a specific talk, because it can act more as evangelism, allowing more people to understand and learn about Read the Docs.\r\n\r\n", "tags": "Poster, experienced", "end_iso": "2012-03-11T11:15:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Eric Holscher", "start_iso": "2012-03-11T11:10:00", "room": "Poster II", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/488/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 59, 1, 59, -1], "abstract": "<p>A team of hackers/journalists formed at Random Hacks of Kindness to work on the task of creating a \"political ad truth detector,\" (http://www.rhok.org/solutions/cuibono-truth-detector-political-ads) using a Python web service to serve data to the mobile app.</p>\n<p>The CuiBono team is composed of a journalist, professional developers, and sometimes hackers. They formed at RHoK Philly Winter 2011, and have continued development on their app.</p>", "presenters": "Pam Selle, ", "duration": 5, "id": 187, "end": [2012, 3, 11, 11, 15, 0, 6, 71, -1], "title": "3. Hacking for Humanity with Python: The CuiBono political app", "last_updated_iso": "2012-02-28T13:42:59.223901", "name": "3. Hacking for Humanity with Python: The CuiBono political app", "start": [2012, 3, 11, 11, 10, 0, 6, 71, -1], "description": "This poster discusses the development of the CuiBono \"political ad truth detector\" app, from concept, to hackathon, to launch. The poster also talks about Python's prominence at the Philadelphia Random Hacks of Kindness hackathon (Winter 2011)", "tags": "Poster, novice", "end_iso": "2012-03-11T11:15:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Pam Selle, ", "start_iso": "2012-03-11T11:10:00", "room": "Poster I", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/521/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 22, 28, 12, 1, 59, -1], "abstract": "<p>From just a gleam in founder Chris Webber's eye to a full tilt media hosting project supporting photos, HTML5 video, and more, the road to federation has been a wild ride so far. We owe a lot to the huge community of fellow federators whose work on the ostaus library enabled us to start in the middle with our own not-quite-finished spin, Kuneco. Kudos to the GNU project for getting excited about the web with us. We're also thankful for the massive outpouring of project love that channeled itself through transifex and has made Media Goblin global-ready even though it isn't finished. Ever thought about switching databases midstream? Come talk to us, Mongo to SQL wasn't as bad as we'd been expecting. We'll also tell you all about our minimalist wsgi un-framework design and how we think it's working compared to Django or even Pylons/Pyramid. </p>\n<p>What's still left do? Smoother interoperations with allied projects like StatusNet and Diaspora. Support for more media types like 3D modelling and presentations. World domination... in a friendly way! Swing by if you're looking for a new project to get involved with or just want details to take back to your own.<br/>\n</p>", "presenters": "Deb Nicholson, Christopher Allan Webber", "duration": 5, "id": 190, "end": [2012, 3, 11, 11, 15, 0, 6, 71, -1], "title": "40. Media Goblin: the Road to Federation", "last_updated_iso": "2012-02-28T22:28:12.953419", "name": "40. Media Goblin: the Road to Federation", "start": [2012, 3, 11, 11, 10, 0, 6, 71, -1], "description": "From just a gleam in founder Chris Webber's eye to a full tilt media hosting project supporting photos, HTML5 video, and more, the road to federation has been a wild ride so far. Come talk to us about the challenges, the fun and the future. ", "tags": "Poster, novice", "end_iso": "2012-03-11T11:15:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Deb Nicholson, Christopher Allan Webber", "start_iso": "2012-03-11T11:10:00", "room": "Poster IV", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/508/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 56, 1, 59, -1], "abstract": "<p>Crab is a flexible, fast recommender engine for Python that integrates classic information filtering recommendation algorithms in the world of scientific Python packages (NumPy,SciPy, Matplotlib).</p>\n<p>This poster will introduce the basic concepts about recommender systems and how you can build, use and evaluate your custom recommender systems\nwith offline data and real word data using the Crab framework as also to invite more maintainers to help to improve and maintain the project. </p>\n<p>This framework started around 2010 and it is an alternative for the Mahout, which is a popular one for machine learning written in Java. Several demonstrations will be presented during the talk to illustrate his work and how you can apply it on your web sites, e-commerces and real systems.</p>\n<p>This project was presented at the Scipy Conference 2010 and the Brazilian Python Meeting 2010. For further information please visit the \nproject home link:</p>\n<p>https://github.com/muricoca/crab</p>", "presenters": "Marcel Pinheiro Caraciolo", "duration": 5, "id": 194, "end": [2012, 3, 11, 11, 20, 0, 6, 71, -1], "title": "44. Crab: A Python Framework for Building Recommender Systems ", "last_updated_iso": "2012-02-28T13:42:56.672497", "name": "44. Crab: A Python Framework for Building Recommender Systems ", "start": [2012, 3, 11, 11, 15, 0, 6, 71, -1], "description": "Crab is a framework written in Python focused on building recommender systems in the world of scientific computing using open-source\r\nlibraries such as Numpy, Scipy and Matplotlib.", "tags": "Poster, experienced", "end_iso": "2012-03-11T11:20:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Marcel Pinheiro Caraciolo", "start_iso": "2012-03-11T11:15:00", "room": "Poster IV", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/34/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 59, 1, 59, -1], "abstract": "<p>Tor is an open source anonymity network. Its client software routes Internet  <br/>\ntraffic through a worldwide volunteer network of servers in order to conceal a<br/>\nuser's location or usage from anyone conducting network surveillance or traffic \nanalysis.            <br/>\n</p>\n<p>Besides the core Tor client, which is written in C, the Tor project involves a<br/>\nnumber of Python-based pieces of software. These include a command-line       <br/>\nmonitor, status monitors providing an overview of the network's current       <br/>\nrelays, an email responder to obtain Tor packages over SMTP, a tool for doling<br/>\nout bridge relays on user request, among others.</p>\n<p>Interested in putting your Python skills to work on a Tor-related project? Or <br/>\njust want to take a peak at how Python is used to resist censorship and support \nanonymity\nonline? Stop by!</p>", "presenters": "Christine Spang", "duration": 5, "id": 191, "end": [2012, 3, 11, 11, 20, 0, 6, 71, -1], "title": "4. How the Tor Project uses Python", "last_updated_iso": "2012-02-28T13:42:59.240292", "name": "4. How the Tor Project uses Python", "start": [2012, 3, 11, 11, 15, 0, 6, 71, -1], "description": "While the Tor client software itself is written in C, there's more to the Tor project than just the core client. Come see how the Tor project uses Python for network analysis, metrics, and various front- and back-end services.", "tags": "Poster, experienced", "end_iso": "2012-03-11T11:20:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Christine Spang", "start_iso": "2012-03-11T11:15:00", "room": "Poster I", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/517/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>Materials discovery and development is a key innovation driver for new technologies and markets, and an essential part of the drive to a renewable energy future.</p>\n<p>Yet, it takes an average of 18 years to move new materials discoveries from lab to market. This is largely because materials designers operate with very little information and must painstakingly tweak new materials in the lab.</p>\n<p>Computational materials science is now powerful enough that it can predict many properties of materials before those materials are ever synthesized in the lab.</p>\n<p>By computing properties of all known materials, the Materials Project aims to remove guesswork from materials design in a variety of applications. By scaling materials computations over supercomputing clusters, we have computed some properties of over 80,000 materials and screened 25,000 of these for Li-ion batteries.</p>\n<p>We show how <strong>Python powers the framework and tools of the Materials Project</strong>, from the Django web interface, through the distributed processing engine running on supercomputers, to materials science apps, to the MongoDB database, and back again.</p>\n<p>To do your own exploration on the Materials Project, login with OpenID on the <a href=\"http://materialsproject.org/\">project website</a>.</p>", "presenters": "Dan Gunter, Michael Kocher, Shreyas Cholia", "duration": 5, "id": 193, "end": [2012, 3, 11, 11, 20, 0, 6, 71, -1], "title": "28. Python for Materials Discovery: Python use in the Materials Project", "last_updated_iso": "2012-02-28T13:42:57.548121", "name": "28. Python for Materials Discovery: Python use in the Materials Project", "start": [2012, 3, 11, 11, 15, 0, 6, 71, -1], "description": "Better materials -- faster computers, better solar cells, energy storage -- are central to technological progress. The Materials Project aims to dramatically reduce the time for materials to go from lab to market. We show how Python powers all aspects of the Materials Project, from the interface to the database to simulations running on supercomputers.", "tags": "Poster, novice", "end_iso": "2012-03-11T11:20:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Dan Gunter, Michael Kocher, Shreyas Cholia", "start_iso": "2012-03-11T11:15:00", "room": "Poster III", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/505/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 56, 1, 59, -1], "abstract": "<p>A simple cherrypy based app that will sync your static servers as users crawl your site. Removing the need for cron jobs and ensuring that what the process design on paper and what happens when your site when load balancers, distributed servers, and testing environments are involved stays simple and straightforward.</p>", "presenters": "Stephane Jolicoeur", "duration": 5, "id": 192, "end": [2012, 3, 11, 11, 20, 0, 6, 71, -1], "title": "16. Annelia -- http edge server, eventual consistency for your static files.", "last_updated_iso": "2012-02-28T13:42:56.752224", "name": "16. Annelia -- http edge server, eventual consistency for your static files.", "start": [2012, 3, 11, 11, 15, 0, 6, 71, -1], "description": "A simple cherrypy based app that will sync your static servers as users crawl your site", "tags": "Poster, novice", "end_iso": "2012-03-11T11:20:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Stephane Jolicoeur", "start_iso": "2012-03-11T11:15:00", "room": "Poster II", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/252/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 56, 1, 59, -1], "abstract": "<p>This poster covers the book contents and the author's experience writing programming books for adults and how the Creative Commons license has made publishing (and even profiting) books easier for independent authors.</p>", "presenters": "Al Sweigart", "duration": 5, "id": 195, "end": [2012, 3, 11, 11, 25, 0, 6, 71, -1], "title": "5. Teaching Python to Young Adults - \"Invent with Python\"", "last_updated_iso": "2012-02-28T13:42:56.702225", "name": "5. Teaching Python to Young Adults - \"Invent with Python\"", "start": [2012, 3, 11, 11, 20, 0, 6, 71, -1], "description": "Finding polished but free resources to teach programming to kids can be difficult. \"Invent Your Own Computer Games with Python\" is a book that is freely available under a Creative Commons license, and gives the source code for many simple games so that readers (young adults or adult adults) can see what programs \"look like\".", "tags": "Poster, novice", "end_iso": "2012-03-11T11:25:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Al Sweigart", "start_iso": "2012-03-11T11:20:00", "room": "Poster I", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/479/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>The <a href=\"http://chandra.harvard.edu/\">Chandra X-ray Observatory</a> has been producing\nsignificant astronomical discoveries since its launch by NASA in July of 1999.\nNow in Chandra's second decade of science, the Chandra operations team is using\nPython to create predictive thermal models of key spacecraft components.  These\nmodels are part of the mission planning and command load review process\nto ensure that the series of planned observations and attitudes for each week\nwill maintain a safe thermal environment.  This poster describes the <a href=\"https://github.com/sot/xija\">Xija\nmodeling framework</a> that is used to create,\ncalibrate, and compute Chandra thermal models.  This package provides a generalized\nframework to model complex time series data using a network of connected nodes\nwith pluggable model components that define the node interactions.  At present\nthe model components include thermal conduction and passive and active heating\nelements, but the framework itself is general and could be used for other\napplications.  A key feature is a GUI fitting tool that allows for rapid\nevaluation of model fit results and interactive many-parameter fits of large\ntime-series datasets using the Sherpa fitting package.</p>", "presenters": "Tom Aldcroft", "duration": 5, "id": 197, "end": [2012, 3, 11, 11, 25, 0, 6, 71, -1], "title": "29. Keeping the Chandra satellite cool with Python and Xija", "last_updated_iso": "2012-02-28T13:42:57.068621", "name": "29. Keeping the Chandra satellite cool with Python and Xija", "start": [2012, 3, 11, 11, 20, 0, 6, 71, -1], "description": "The Chandra X-ray Observatory has been producing significant astronomical discoveries since its launch by NASA in July of 1999.  The Chandra operations team uses Python for predictive thermal modeling of the spacecraft to maintain a safe thermal environment.  This poster describes the Xija modeling framework that is used to create, calibrate, and compute these thermal models.", "tags": "Poster, experienced", "end_iso": "2012-03-11T11:25:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Tom Aldcroft", "start_iso": "2012-03-11T11:20:00", "room": "Poster III", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/506/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 56, 1, 59, -1], "abstract": "<h1>Background</h1>\n<p>On February 3rd, 2011 the world ran out of the IPv4 addresses that we know and love. The Internet continues to work thanks to technologies like NAT that enable private IP addresses like 192.168.1.1 and 10.0.0.1 to be reused across organizations. However, even these large blocks of private IP addresses are not large enough for large ISPs like Comcast in the United States that give several IP addresses to each customer (ex. cable set top box, voip, cable modem).</p>\n<p>To continue adding new customers large ISPs have begun deploying two technologies: IPv6 and large scale NAT.</p>\n<p>Large scale NAT is a way for large ISPs to put several of their customers behind a single public IP address. This means that the one public IPv4 address you used to have to yourself is now shared by you and several of your neighbors. It means that as a website owner it is now more difficult to discern anything useful from the IP addresses visiting your website.</p>\n<p>IPv6 solves the address exhaustion problem by moving from approximately 4 billion IP addresses to 3.4\u00d710^38 IP addresses; more than the number of atoms on Earth. With plenty of IP addresses ISPs can now return to giving out unique, public IP addresses to each customer.</p>\n<p>Many mobile operators are already beginning to deploy IPv6. In 2009 Verizon issued a mandate that any LTE devices on its network support IPv6 with IPv4 support being listed as optional [1]. An IPv6-only device will still need access to the IPv4 Internet, however, IPv6 and IPv4 are not compatible. Providers like Verizon are putting in place protocol translation devices that inspect Internet traffic going through them and proxy IPv4-only websites to their IPv6 customers. While this may sound wonderful it means that mobile providers are inspecting and rewriting your packets. Making things more interesting is that this won't work securely over SSL. The solution is to enable IPv6 on your website so that IPv6-only hosts can directly access your content.</p>\n<h1>Joining the IPv6 bandwagon</h1>\n<p>Amazon's Elastic Load Balancer supports IPv6 and is already enabled in all east coast availability zones [2]. If you're already using ELB enabling IPv6 on your website is as easy as making a single DNS change. Or so we'd hope, there are still some impediments to a world where your site runs seamlessly on IPv6.</p>\n<h2>The user with broken IPv6</h2>\n<p>There are people in the world with broken or inferior IPv6 connectivity and a web browser or operating system that attempt to use IPv6 anyway. What this means is that if you turn on IPv6 on your website you have the potential to cut off those users from your site. In this talk I'll discuss methods for measuring and analyzing this loss before your broadly enable IPv6 so that you can make an informed decision about when and how to flip the switch.</p>\n<h2>Geo IP</h2>\n<p>Geo IP libraries today are still coming to terms with IPv6. One vendor in particular is working on IPv6 but only provides limited support in their free libraries and not yet in their python driver. In their commercial library, the one generally considered better, they do not support IPv6 yet due to lack of data [3].</p>\n<h2>IPv6 without Amazon</h2>\n<p>At Eventbrite we do development inside of Virtual Box virtual machines. In this talk I'll discuss how we configure IPv6 on both the host and guest operating systems so that we can test IPv6 before we push to Amazon.</p>\n<h2>IP Address Validation</h2>\n<p>If you accept IP addresses from end users check your IP address validation routines (Django has support, see GenericIPAddressField).</p>\n<h1>References</h1>\n<p>[1] http://www.circleid.com/posts/20090609_verizon_mandates_ipv6_support_for_next_gen_cell_phones/\n[2] http://www.allthingsdistributed.com/2011/05/aws_ipv6.html\n[3] http://www.maxmind.com/app/ipv6</p>", "presenters": "Bob Van Zant", "duration": 5, "id": 198, "end": [2012, 3, 11, 11, 25, 0, 6, 71, -1], "title": "43. What is IPv6 and why does my website I need it", "last_updated_iso": "2012-02-28T13:42:56.683459", "name": "43. What is IPv6 and why does my website I need it", "start": [2012, 3, 11, 11, 20, 0, 6, 71, -1], "description": "On February 3rd, 2011 the world ran out of the IPv4 addresses that we know and love. Clearly the Internet has survived even though hardly anyone has deployed IPv4's successor, IPv6. Drop by to learn about what IPv6 is, why you should deploy it and some of the hurdles to deployment.", "tags": "Poster, experienced", "end_iso": "2012-03-11T11:25:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Bob Van Zant", "start_iso": "2012-03-11T11:20:00", "room": "Poster IV", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/20/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>SAP is one of the most complex and advanced frameworks for business applications, with huge installed base. SAP Value Prototyping Center of Excellence built Python framework based on Pyramid, that can bring existing SAP business application to variety of devices and desktop devices, with very nice and simple user interfaces, so that very little or no training is required for the user. </p>", "presenters": "Srdjan Boskovic", "duration": 5, "id": 196, "end": [2012, 3, 11, 11, 25, 0, 6, 71, -1], "title": "20. SAPPy Framework for Native and Web Apps", "last_updated_iso": "2012-02-28T13:42:57.397326", "name": "20. SAPPy Framework for Native and Web Apps", "start": [2012, 3, 11, 11, 20, 0, 6, 71, -1], "description": "SAPPy is a Python framework, built by SAP Value Prototyping Center of Excellence, to bring SAP business applications to desktop, tablet and smartphone devices, for consumption through web browsers or native apps.  We want to present our experience from projects with SAPPy and discuss the solution architecture, challenges, solutions and open questions.", "tags": "Poster, experienced", "end_iso": "2012-03-11T11:25:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Srdjan Boskovic", "start_iso": "2012-03-11T11:20:00", "room": "Poster II", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/487/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>For the past several months, <a href=\"https://twitter.com/pystarphilly/\" title=\"PyStar Philly\">PyStar Philly</a> has been organizing Python workshops for women and their friends. They have received help and support from groups organizing similar workshops around the country, including the <a href=\"http://bostonpythonworkshop.com/\" title=\"Boston Python\">Boston Python Workshop</a>, <a href=\"http://pyladies.com/\" title=\"PyLadies\">PyLadies</a>, <a href=\"http://pystar.org/\" title=\"PyStar\">PyStar San Francisco, and PyStar Minneapolis</a>.</p>\n<p>In 2011, PyStar Philly held two workshops and one project night. In 2012, they are planning to offer <a href=\"http://www.meetup.com/phillypug/events/48198752/\" title=\"Python Workshop\">four workshops</a> and <a href=\"http://www.meetup.com/phillypug/events/47281392/\" title=\"Python Project Night\">six project nights</a>, all organized under the umbrella of the <a href=\"http://www.meetup.com/phillypug/\" title=\"PhillyPUG\">Philadelphia Python Users Group (PhillyPUG)</a>. This collaboration with PhillyPUG will create opportunities for PyStar Philly workshop graduates to continue their learning and network with professional programmers. </p>\n<p>This January, the PhillyPUG organizers had a special beginner-friendly <a href=\"http://www.meetup.com/phillypug/events/43988742/\" title=\"PhillyPUG PyStar lecture\">\u201cPyStar\u201d lecture</a> at the start of their meeting, followed by a more advanced feature talk.  This format was so successful that PhillyPUG plans to offer beginner and advanced talks at all of its meetings.</p>\n<p>Through all of these activities, the PyStar Phillly and PhillyPUG organizers hope to make the Python community in Philadelphia more diverse. The idea is that bringing fresh faces and new perspectives to the table will make an already terrific community stronger, more interesting, more welcoming, and more engaging. </p>\n<p>This poster will be a place where PyStar Philly staff discuss their experiences organizing Python workshops and working to increase diversity in the Philadelphia Python community. The poster will also capture the stories of Python workshop organizers in Boston, Los Angeles, San Francisco, Minneapolis, and Washington DC. </p>\n<p>Some of the key topics of discussion will be:</p>\n<ul>\n<li>the challenges of teaching Python to beginners</li>\n<li>the amazing things students can do with Python after learning it for one day</li>\n<li>how to help beginners move from a workshop to a first real project</li>\n<li>connecting workshop graduates to the larger Python community through project nights and user group events</li>\n<li>connecting workshop graduates to the women-in-Python network around the country</li>\n<li>the role of the user group in programming outreach</li>\n<li>making user groups more beginner-friendly</li>\n<li>helping women move from attending a workshop to completing projects to networking at user group events to landing a job as a developer</li>\n</ul>", "presenters": "Dana Bauer, ", "duration": 5, "id": 199, "end": [2012, 3, 11, 11, 30, 0, 6, 71, -1], "title": "6. Building a diverse Python community, one workshop at a time", "last_updated_iso": "2012-02-28T13:42:58.866769", "name": "6. Building a diverse Python community, one workshop at a time", "start": [2012, 3, 11, 11, 25, 0, 6, 71, -1], "description": "From Boston to Philly to DC to Minneapolis to San Fran to LA, women have been teaching women how to code in Python. As a result, the Python communities in these cities are becoming more diverse. This poster will highlight the work of PyStar Philly, but it is meant to provide a place for all PyCon participants to discuss the challenges and successes of Python outreach activities in their cities. ", "tags": "Poster, novice", "end_iso": "2012-03-11T11:30:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Dana Bauer, ", "start_iso": "2012-03-11T11:25:00", "room": "Poster I", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/520/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>Writing Cython code feels like being in Python and C at the same time, mixing the possibilities of both languages. There are two primary usecases for doing this: Speeding up code, and calling C/C++ libraries.</p>\n<p><strong>1. Speeding up code:</strong> Cython can give a small speed boost to most pure Python code, at the cost of an extra compilation step. With a little bit of extra annotation on top of your Python code, Cython can generate essentially pure C code, which, in the right situations, can give speedups in the range of 5 to 20 times faster than Python. In CPU-heavy number crunching code, Cython can be hundreds of times faster than Python.</p>\n<p>Optimizing all your code makes no sense. Since Cython is a superset of Python, it is convenient to first implement everything in Python, then use profiling and add Cython annotations only at the proven bottlenecks. Good Cython programmers use Cython sparingly, but with great effect.</p>\n<p>While everybody would <em>love</em> to have Python to run as fast as C without any manual typing, Cython represents proven and pragmatic technology that works well right now.</p>\n<p><strong>2. Binding to C/C++ code:</strong> Many Python library bindings are written in Cython. Unlike projects like SWIG, Cython does not encourage bringing the C or C++ API one-to-one into Python, but encourages the creation of a nice Pythonic interface. Unlike ctypes, it is easy to create fully portable wrappers that never segfaults (although ctypes has the advantage of not requiring compilation).</p>\n<p>Some examples of Cython wrappers are the ZeroMQ Python bindings (pyzmq) and the lxml project. \nWithin scientific programming, the use of Cython to interface with the large number of existing C/C++/Fortran libraries is quickly becoming the norm rather than the exception.</p>", "presenters": "Dag Sverre Seljebotn, Mark Florisson", "duration": 5, "id": 201, "end": [2012, 3, 11, 11, 30, 0, 6, 71, -1], "title": "30. Cython", "last_updated_iso": "2012-02-28T13:42:57.019112", "name": "30. Cython", "start": [2012, 3, 11, 11, 25, 0, 6, 71, -1], "description": "The Cython language is very close to the Python language, but Cython additionally supports calling C functions and declaring C types on variables and class attributes. The result is a natively compiled module that can be loaded into the regular Python interpreter. Cython can be used both to eliminate bottlenecks and for conveniently wrapping C/C++ libraries.", "tags": "Poster, experienced", "end_iso": "2012-03-11T11:30:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Dag Sverre Seljebotn, Mark Florisson", "start_iso": "2012-03-11T11:25:00", "room": "Poster III", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/507/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 56, 1, 59, -1], "abstract": "<h1>Millions of Genes with Python and Jython</h1>\n<p><strong>Clint Howarth</strong>, Maia Hansen, Jeffrey Larimer, Matthew Pearson, Andrew Roberts, Christian Stolte, Shailu Gargeya, Jennifer Wortman, Bruce Birren</p>\n<p><em>Broad Institute of Harvard and MIT, Genome Sequencing &amp; Analysis Program, Cambridge, MA, 02142</em></p>\n<p>The <a href=\"http://www.broadinstitute.org\">Broad Institute</a> is a world leader in genomic research. Our scientists sequence, analyze, and publish hundreds of genomes every year, containing millions of genes and billions of nucleotides. We study the bacteria that cause tuberculosis, the parasite responsible for malaria, the human and infant microbiomes, the West Nile and Dengue viruses, and many, many more organisms and projects of importance to human health. In so doing, we consume and produce a tremendous amount of data.</p>\n<p>The Analysis and Annotation Engineering group (A2E) uses cpython and jython as fundamental technologies to help our scientists keep up with every order of magnitude of growth. Jython powers our fast, nimble, and friendly application layer in front of a solid Java/Hibernate-managed database and job management model. We recently replaced our awkward Java web stack with a sleek cpython-Flask genome navigation web application (olive.broadinstitute.org). Finally, we have a growing suite of novel python applications to help the infectious diseases community in its work: gene naming (Genepidgin, open source), workflow management via an internal django application (Atomation), and visualizing genomes through multiple annotations over time (Accordion, open source, coming 2012).</p>\n<p>A2E is investing heavily in python as our primary development platform, because using python and jython allows our small team to accomplish big things.</p>\n<p><em>This project has been funded in part with Federal funds from the <a href=\"www.niaid.nih.gov\">National Institute of Allergy and Infectious Diseases</a>, <a href=\"www.nih.gov\">National Institutes of Health</a>, <a href=\"www.hhs.gov\">Department of Health and Human Services</a>, under Contract No.: HHSN272200900018C.</em></p>", "presenters": "Clint Howarth", "duration": 5, "id": 200, "end": [2012, 3, 11, 11, 30, 0, 6, 71, -1], "title": "19. Millions of Genes with Python and Jython", "last_updated_iso": "2012-02-28T13:42:56.761045", "name": "19. Millions of Genes with Python and Jython", "start": [2012, 3, 11, 11, 25, 0, 6, 71, -1], "description": "The Analysis and Annotation Engineering group at the Broad Institute uses cpython and jython as fundamental technologies to help sequence, analyze, and publish hundreds of bacterial and viral genomes every year. This poster outlines how we use python to allow our small team to accomplish big things.", "tags": "Poster, novice", "end_iso": "2012-03-11T11:30:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Clint Howarth", "start_iso": "2012-03-11T11:25:00", "room": "Poster II", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/234/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>The Python programming language has a \"batteries included\" philosophy where a wide range of tools and libraries are available out of the box as part of the standard library. In addition to the packages available in the standard library, thousands of third-party programs and packages are available on the Python Package Index (PyPI). How do you distribute your own software, and how do you discover and install software from other developers? This presentation covers the current methods and the upcoming improvements implemented by the new <code>distutils2</code>/<code>packaging</code> library.</p>\n<p>There are a number of Python libraries to help package your software for distribution, but they all leave a lot to be desired. <code>distutils</code> has been available in the standard library for years but leaves out many important features of modern packaging managers. The third-party <code>setuptools</code> package aims to fill some of the gaps and is currently used by many Python developers. <code>distribute</code> is a fork of <code>setuptools</code> that is more actively maintained and supports Python 3. The various options are confusing and lack standardization.</p>\n<p>The absence of good packaging standards has complicated the development of Python package managers. Installers have trouble finding the most recent version of packages due to the lack of a complete standard for package version numbers. Pip must create a nonstandard record of files installed for each package to support uninstallation. <code>Setuptools</code> had to introduce its own method of defining dependencies to work with the way packages are distributed. These nonstandard additions have helped address real problems, but have contributed to the fragmentation of the Python packaging ecosystem.</p>\n<p>The state of Python packaging is a mess, but the future is bright. New standards have been accepted to address these issues, and a new packaging library named <code>packaging</code> will be in the Python 3.3 standard library scheduled for release this summer. A backport of this library named <code>distutils2</code> is already available for Python 2.4 to 3.2. How can you support these new standards in your Python packages?</p>\n<p>The following topics will be covered:</p>\n<ul>\n<li>Overview of the current packaging libraries/tools and their limitations:<ul>\n<li><code>distutils</code>, <code>setuptools</code>, and <code>distribute</code></li>\n<li>easy_install, pip, and buildout</li>\n</ul>\n</li>\n<li>Improvements introduced by the new packaging standards:<ul>\n<li>Improved database of installed packages to support uninstallation (PEP 376)</li>\n<li>Standardized method for defining dependencies (PEP 345)</li>\n<li>Standardized package version numbers (PEP 386)</li>\n<li>Static package metadata via setup.cfg (obsoletes setup.py)</li>\n<li>More granular classification of data files to support OS packagers</li>\n</ul>\n</li>\n<li>Implementation of the new standards: <code>distutils2</code>/<code>packaging</code>:<ul>\n<li><code>distutils2</code> for Python 2.4 to 3.2, <code>packaging</code> in the 3.3+ standard library</li>\n<li>Modular design to support third-party tools</li>\n<li>Includes pysetup, a barebones Python package manager</li>\n</ul>\n</li>\n<li>Supporting <code>distutils2</code>/<code>packaging</code> in your Python packages:<ul>\n<li>Overview of setup.cfg</li>\n<li>Using hooks to extend <code>distutils2</code>/<code>packaging</code> commands to support complex installations</li>\n<li>Supporting older standards and <code>distutils2</code>/<code>packaging</code> simultaneously</li>\n</ul>\n</li>\n<li>What happens to tools like pip? They will be updated to use <code>packaging</code>/<code>distutils2</code> instead of <code>setuptools</code>/<code>distribute</code>.</li>\n</ul>", "presenters": "Nick Wilson, Ryan Baker, Taylor Hand, Taylor Michael", "duration": 5, "id": 202, "end": [2012, 3, 11, 11, 30, 0, 6, 71, -1], "title": "42. The Future of Python Packaging", "last_updated_iso": "2012-02-28T13:42:58.541342", "name": "42. The Future of Python Packaging", "start": [2012, 3, 11, 11, 25, 0, 6, 71, -1], "description": "There are currently multiple methods for packaging, distributing, discovering, and installing Python software. This presentation will discuss the limitations of the current methods, the efforts to standardize Python packaging, and practical advice for developers to add support for the new packaging library, distutils2 (\"packaging\" in Python 3.3+), to their software.", "tags": "Poster, novice", "end_iso": "2012-03-11T11:30:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Nick Wilson, Ryan Baker, Taylor Hand, Taylor Michael", "start_iso": "2012-03-11T11:25:00", "room": "Poster IV", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/498/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 12, 21, 47, 1, 59, -1], "abstract": null, "presenters": "", "duration": 30, "id": 166, "end": [2012, 3, 11, 12, 0, 0, 6, 71, -1], "title": "Sunday Morning Lightning talks", "last_updated_iso": [2012, 2, 28, 12, 21, 47, 1, 59, -1], "name": "Sunday Morning Lightning talks", "start": [2012, 3, 11, 11, 30, 0, 6, 71, -1], "description": "", "tags": "plenary", "end_iso": "2012-03-11T12:00:00", "conf_key": "", "released": true, "authors": "", "start_iso": "2012-03-11T11:30:00", "room": "Plenary", "license": "", "url": null, "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>The Artemis Project is a five-week summer program directed by undergraduate women at Boston University. Founded in 1996 at Brown University, Artemis introduces rising 9th grade girls to computer science, targeting them at the critical age when the disparity between males and females in the sciences becomes most pronounced.</p>\n<p>In summer 2011, the Artemis curriculum covered Python basics. The students were introduced to control structures by programming simple effects on ColorWall, a graphical representation of an 8x8 grid. The colorful model promoted creativity; however, contrary to what we believed, it did not provide an intuitive understanding of control structures. Instead, we found that simple counting exercises were more effective.</p>\n<p>Our poster is meant to encourage discussions on intuitive ways to introduce programming as well as interesting Python projects for novice programmers. We also hope to share the lessons we learned in our teaching experience.</p>", "presenters": "Katherine Zhao, Kim Win", "duration": 5, "id": 203, "end": [2012, 3, 11, 11, 35, 0, 6, 71, -1], "title": "7. The Artemis Project: Promoting Computer Science to High School Girls", "last_updated_iso": "2012-02-28T13:42:58.705279", "name": "7. The Artemis Project: Promoting Computer Science to High School Girls", "start": [2012, 3, 11, 11, 30, 0, 6, 71, -1], "description": "The Artemis Project is a summer program to introduce high school girls to the problem-solving skills that are at the core of computer science. As coordinators, we found that there is a lot of undiscovered talent and enthusiasm for CS in the younger generation. Our poster is meant to encourage discussions on intuitive ways to introduce programming and interesting projects for novice programmers.", "tags": "Poster, novice", "end_iso": "2012-03-11T11:35:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Katherine Zhao, Kim Win", "start_iso": "2012-03-11T11:30:00", "room": "Poster I", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/516/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>In this technical talk we'll start by coding our app up in Django, unleash the power of PyMongo on MongoDB and then deploy everything to the cloud with Git. Plenty of tips, tricks, looks under the hood and assorted command-line fu to answer a few questions you didn't even know you had concerning PyMongo, MongoDB, Django and Git.</p>\n<p>Outline:\n- Create a new Django project on OpenShift\n- Create a model/view/template for saving/retrieving data from MongoDB\n- Deploy and administer the Django application</p>", "presenters": "David Blado", "duration": 5, "id": 206, "end": [2012, 3, 11, 11, 35, 0, 6, 71, -1], "title": "41. Git 'er Done Fast! Developing Apps for the Cloud with Django and PyMongo in 30 Minutes or Less", "last_updated_iso": "2012-02-28T13:42:57.455397", "name": "41. Git 'er Done Fast! Developing Apps for the Cloud with Django and PyMongo in 30 Minutes or Less", "start": [2012, 3, 11, 11, 30, 0, 6, 71, -1], "description": "Close your laptop lids and stop updating your Twitter stream! All it's going to take is 30 minutes of your time to turn yourself into a Django web app developing, MongoDB crushing machine. In this technical talk we'll start by coding our app up in Django, unleash the power of PyMongo on MongoDB and then deploy everything to the cloud with Git.", "tags": "Poster, novice", "end_iso": "2012-03-11T11:35:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "David Blado", "start_iso": "2012-03-11T11:30:00", "room": "Poster IV", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/493/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 59, 1, 59, -1], "abstract": "<p>Diesel is a Python framework used to make networked systems that interconnect numerous clients and \nservers intuitively. It supports the development of high-concurrency, scalable applications \nthat can maintain many users per CPU core and per GB of RAM without compromising code clarity. \nIt also aids the design of complex, large-scale services that have many components, \nworking across many machines with different roles and interfaces.</p>\n<p>For example, Bump \u2013 an Android and iOS app \u2013 uses Diesel on its back-end server cluster that\ncommunicates with its 70+ million users each time they use the app. From bumping and matching, to\ncontact and photo exchange, every communication between Bump is routed through a Diesel-based\ndaemon network.</p>\n<p>The Bump server team, which develops and maintains Diesel, plans to release version 3.0 and update its\npresence in the open-source community in the spring.</p>\n<p>Jamie can speak to the benefits associated with Diesel and Bump\u2019s experience with the framework, and\nshare lessons learned while scaling up the #7 iPhone app of all time.</p>", "presenters": "Jamie Turner", "duration": 5, "id": 204, "end": [2012, 3, 11, 11, 35, 0, 6, 71, -1], "title": "18. Bump Pumps Up with Diesel", "last_updated_iso": "2012-02-28T13:42:59.215163", "name": "18. Bump Pumps Up with Diesel", "start": [2012, 3, 11, 11, 30, 0, 6, 71, -1], "description": "Bump Technologies\u2019 Jamie Turner explains Diesel, an open-source evented networking framework, and how it's used at Bump, an Android and iOS app with over 70 million downloads.", "tags": "Poster, experienced", "end_iso": "2012-03-11T11:35:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Jamie Turner", "start_iso": "2012-03-11T11:30:00", "room": "Poster II", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/522/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 59, 1, 59, -1], "abstract": "<p>ProofCheck is a suite of Python scripts that aid an author using TeX, parse and check mathematical proofs.  The checking program is essentially a classic rule-based program where in this case the rules are logical rules of inference.<br/>\n</p>\n<p>The presentation consists of:</p>\n<p>I. An introduction itemizing the various scripts and their functions: parsing, checking, renumbering, etc.\nII A data-flow diagram showing the external supporting files needed: the rules of inference file, a common notions file, etc. \nIII. A description of the Proof markup syntax needed to enable checking.\nIV. A sample proof (of the fact that divisibility is transitive) showing both the TeX source file and the PDF output file.\nV. A comparison of ProofCheck with well-known programs such as Mizar and HOL.</p>", "presenters": "Bob Neveln", "duration": 5, "id": 205, "end": [2012, 3, 11, 11, 35, 0, 6, 71, -1], "title": "31. ProofCheck: Checking Mathematical Proofs written in TeX ", "last_updated_iso": "2012-02-28T13:42:59.071980", "name": "31. ProofCheck: Checking Mathematical Proofs written in TeX ", "start": [2012, 3, 11, 11, 30, 0, 6, 71, -1], "description": "ProofCheck is a set of Python scripts which parse and check mathematics written using TeX.  Its homepage is www.proofcheck.org.  Unlike computer proof assistants which require immersion in the equivalent of a programming language, ProofCheck attempts to handle mathematical language formalized according to the author's preferences as much as possible. ", "tags": "Poster, novice", "end_iso": "2012-03-11T11:35:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Bob Neveln", "start_iso": "2012-03-11T11:30:00", "room": "Poster III", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/515/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>At Protein Simple we have developed a line of scientific instruments controlled via a web browser whose software is written in Python. Traditionally instrument control has been done with a desktop application. We moved recently to web browser base instrument control and analysis which brought with it some novel, at least to us, issues.</p>\n<p>There number of issues that arose in using a web server framework, in our case Django, which usually present data from a database to control hardware. These include large latency, unexpected hardware errors, and uncertainty in the state of the hardware. We developed a architecture that allows the Django server to run unaltered and largely separated from direct control and knowledge of the hardware. Our design takes into account Python's limited multi-threading and priority.<br/>\n</p>", "presenters": "Ken Swartz", "duration": 5, "id": 208, "end": [2012, 3, 11, 11, 40, 0, 6, 71, -1], "title": "17. Instrument Control with a Python Web Server", "last_updated_iso": "2012-02-28T13:42:57.447413", "name": "17. Instrument Control with a Python Web Server", "start": [2012, 3, 11, 11, 35, 0, 6, 71, -1], "description": "We present a web server based instrument control system written in Python. There are a number of advantages as well as a number of issues that arose in using a web server framework, which usually present data from a database to control hardware. These advantages and issues, as well as our solutions to them, will be covered.", "tags": "Poster, experienced", "end_iso": "2012-03-11T11:40:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Ken Swartz", "start_iso": "2012-03-11T11:35:00", "room": "Poster II", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/495/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 56, 1, 59, -1], "abstract": "<h2>Cassandra architecture basics</h2>\n<ul>\n<li>Bulletproof reliability</li>\n<li>Best-in-class support for multiple datacenters</li>\n<li>High-performance storage engine based on Bigtable</li>\n</ul>\n<h2>Use cases</h2>\n<ul>\n<li>Netflix</li>\n<li>Backupify</li>\n<li>Constant contact</li>\n</ul>\n<h2>Data modeling</h2>\n<ul>\n<li>Time series data</li>\n<li>A/B testing</li>\n</ul>\n<h2>Code samples</h2>\n<ul>\n<li>The Pycassa Python client</li>\n<li>Hadoop, Pig and Hive for analytics</li>\n</ul>", "presenters": "Jonathan Ellis", "duration": 5, "id": 210, "end": [2012, 3, 11, 11, 40, 0, 6, 71, -1], "title": "45. Apache Cassandra 1.0: faster, more powerful, easier NoSQL", "last_updated_iso": "2012-02-28T13:42:56.853427", "name": "45. Apache Cassandra 1.0: faster, more powerful, easier NoSQL", "start": [2012, 3, 11, 11, 35, 0, 6, 71, -1], "description": "The Cassandra distributed database has added many new features over the past year based on real-world needs of developers at Twitter, Netflix, Openwave, and others building massively scalable systems.\r\n\r\nThis poster will explain some of these use cases and give examples of data modeling and code in Python. I will be happy to answer questions.", "tags": "Poster, novice", "end_iso": "2012-03-11T11:40:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Jonathan Ellis", "start_iso": "2012-03-11T11:35:00", "room": "Poster IV", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/500/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>Computer-based methods and tools now play a more and more critical role in modern drug discovery.  Driven by an explosive amount of data collected in various stages of scientific studies every day, there is an increasingly immense interest in extracting the most value from these data to better guide and support the current and future scientific discoveries.</p>\n<p>At Novartis Institutes for BioMedical Research (NIBR), we use Python as one of the major scientific programming languages within computational chemistry and cheminformatics research. We find Python a great language for quick prototyping thanks to its elegance, ease of use, flexibility and rich third-party libraries. We also take advantage of Python's excellent support for tapping extra performance by progressively replacing components in C/C++. As a case study, here, we present an example system which spans both hard-core computation and web-based delivery and takes full advantage of Python's support on quick prototyping and fast iteration.</p>\n<p>Using Python and the RDKit, an open source cheminformatics toolkit that features a first-class Python API, we built an in-house tool to mine experiment data for relevant pharmacophores. A pharmacophore is a set of molecular features that could be responsible for biological relevance of a molecule, and learning pharmacophores is an important step in understanding the mechanism of drug activity. Python proves to be a perfect prototyping tool for building an initial version of the tool. For our tool, we employed Boost.Python to rewrite performance-critical components in C++ while keeping the rest of the code intact and the programming interface pythonic (read: nice to use).</p>\n<p>To reach the largest audience possible, we developed a web-based UI on top the API. Leveraging the power of Django, Piston, and Celery, we were able to get the tool into the hands of scientists quickly. Fast iteration was essential in gradually shaping the tool and made it practical and useful. Tools like Django-South and Fabric allows us to continue improving and growing it in a progressive manner at very fast pace without disruptive side effects.</p>", "presenters": "Eddie Cao", "duration": 5, "id": 209, "end": [2012, 3, 11, 11, 40, 0, 6, 71, -1], "title": "32. Python in Computer-Aided Drug Discovery ", "last_updated_iso": "2012-02-28T13:42:57.856769", "name": "32. Python in Computer-Aided Drug Discovery ", "start": [2012, 3, 11, 11, 35, 0, 6, 71, -1], "description": "Computational tools are an integral part of the modern drug-discovery process.  At NIBR, we leverage Python to great success in all stages of drug discovery. Not only can we easily deploy new tools to our scientists easily using tools like Django, but Python's approachability (that \"fits your brain\" character) allows scientists with no programming experience to start coding themselves!\r\n", "tags": "Poster, novice", "end_iso": "2012-03-11T11:40:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Eddie Cao", "start_iso": "2012-03-11T11:35:00", "room": "Poster III", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/509/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<h1>Full Abstract</h1>\n<p>Computer Science (CS) students normally take a course in Digital Logic during the second year of the CS education. The study of Boolean Algebra and its relationship to combinational logic circuit description is a major part of that course. A study of the \"Boolean Theorems,\" which are rules that define the behavior of Boolean algebra operators, is part of the coursework. These rules can be used to algebraically simplify the equation of a circuit. A solid understanding of Boolean Algebra concepts is likewise needed to understand the more complicated aspects of combinational logic circuits. Additionally, students taking college-level mathematics and philosophy courses typically study Boolean Algebra.</p>\n<p>An interactive program that displays the steps in the simplification of Boolean Algebra expressions would aid in the students' understanding. The Object-Oriented-Design (OOD) paradigm will be used to implement such a program. A well-designed class hierarchy can represent the parts of a Boolean Algebra expression. These include Symbols, AND expressions, and OR expressions. Classes representing these parts are organized in a sub-class hierarchy.</p>\n<p>A properly organized hierarchy would allow for the Boolean Theorems to be expressed using the principles of inheritance and operator overloading. A common convention in Boolean Algebra is using the '+' and '*' signs to represent OR and AND, respectively. The interactions between Boolean objects are specified by how each object should behave as an operand of these operators.</p>", "presenters": "Adam Moore", "duration": 5, "id": 207, "end": [2012, 3, 11, 11, 40, 0, 6, 71, -1], "title": "8. BoolPy: Using Python for Symbolic Boolean Algebra Simplification", "last_updated_iso": "2012-02-28T13:42:57.379092", "name": "8. BoolPy: Using Python for Symbolic Boolean Algebra Simplification", "start": [2012, 3, 11, 11, 35, 0, 6, 71, -1], "description": "BoolPy is a Python module that iteratively simplifies Boolean Algebra expressions according to the Boolean Theorems. The purpose of this talk is twofold: (1) To present the details of an Object-Oriented solution to the symbolic computing problem and (2) to present the BoolPy module as a useful classroom tool for teaching Boolean Algebra in college-level mathematics and computer science courses.", "tags": "Poster, experienced", "end_iso": "2012-03-11T11:40:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Adam Moore", "start_iso": "2012-03-11T11:35:00", "room": "Poster I", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/484/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>Datablox is an open source framework for building Big Data applications. The philosophy behind the framework is building small reusable \"blocks\" and \"wiring\" them together to build systems. Individual blocks are written in Python and the framework provides a DSL for connecting them. This enables programmers to write a toolbox of general purpose blocks and users (including non-programmers) can wire them together to build systems. In addition to reuse, this approach also allows Datablox runtime to distribute applications across various nodes, ensure fault-tolerance and scale automatically based on loads. A block includes not only code but also external software dependencies like databases and libraries. Datablox tracks these dependencies and uses the Engage framework to deploy the required software stack automatically. Datablox is designed to work on large scales: either private clusters or the cloud (e.g. Amazon Web Services and Rackspace), and to work with online or batch data.</p>\n<p>Datablox is similar to analytics frameworks such as Twitter Storm and Apache Flume,\nbut allows more general application architectures.</p>\n<p>We will present the design of Datablox framework, describe the kind of applications which can be written in it, talk about how it can be used by programmers and give a few use cases.</p>", "presenters": "Sai Deep Tetali", "duration": 5, "id": 214, "end": [2012, 3, 11, 11, 45, 0, 6, 71, -1], "title": "47. Datablox", "last_updated_iso": "2012-02-28T13:42:58.285208", "name": "47. Datablox", "start": [2012, 3, 11, 11, 40, 0, 6, 71, -1], "description": "Datablox is an open source, python based framework for building Big Data applications. It is designed around the idea of combining small reusable components to build systems. We present the design of the framework and talk about how it can be used by application developers by giving a few use cases.", "tags": "Poster, experienced", "end_iso": "2012-03-11T11:45:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Sai Deep Tetali", "start_iso": "2012-03-11T11:40:00", "room": "Poster IV", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/514/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 59, 1, 59, -1], "abstract": "<p>Sometimes non-technical decision makers face a real-world problem, but lack the tools to analyze and explore options for action. At the same time, thousands of computational and visualization algorithms are published in journals every year, but many go unused despite hard work, because of the effort required to apply unfamiliar code.</p>\n<p>CrossCompute makes scientific algorithms more accessible. Each algorithm is wrapped in a web API with a user interface. It is easy to chain algorithms, so that one runs on the result of another.</p>\n<p>Algorithm authors gain financial independence by interacting directly with paying users. The author sets the price. Each time his or her algorithm runs on CrossCompute, the system returns <strong>eighty percent</strong> of the revenue to the author.</p>\n<p>You are welcome to drop by and chat. There will be demonstrations and lively discussion. Help us shorten the time between mathematical research and real-world application.</p>\n<p>You can start using the system at <a href=\"https://crosscompute.com\">https://crosscompute.com</a>. Some algorithms are free and I will be adding more in the coming weeks.</p>", "presenters": "Roy Hyunjin Han", "duration": 5, "id": 213, "end": [2012, 3, 11, 11, 45, 0, 6, 71, -1], "title": "34. CrossCompute is a web platform where users can run algorithms", "last_updated_iso": "2012-02-28T13:42:59.230495", "name": "34. CrossCompute is a web platform where users can run algorithms", "start": [2012, 3, 11, 11, 40, 0, 6, 71, -1], "description": "Have you developed a mathematical model or computational / visualization algorithm? Your algorithm could be useful worldwide to people who face a real-world problem but do not want to write code. Professionals in industry, scientists in other fields or researchers in developing countries can quickly apply your work to their domain with a web-based cloud-computing platform like CrossCompute.", "tags": "Poster, novice", "end_iso": "2012-03-11T11:45:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Roy Hyunjin Han", "start_iso": "2012-03-11T11:40:00", "room": "Poster III", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/518/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 29, 14, 55, 35, 2, 60, -1], "abstract": "<p>The Athena system is built out of Python and some crucial bits of C++ code.  At it's core, the Hydra database provides a fast, scalable object store for data storage and source code distribution world-wide.  Many of our financial problems are best described as large, interdependent computations.  We developed \"pixies\" which build a dynamic, stateless dependency graph using traditional Python classes and methods marked with decorators.</p>", "presenters": "Pat Miller", "duration": 5, "id": 212, "end": [2012, 3, 11, 11, 45, 0, 6, 71, -1], "title": "21. JP Morgan's Athena -- Persistent objects and minimal evaluation for computational finance", "last_updated_iso": "2012-02-29T14:55:35.758856", "name": "21. JP Morgan's Athena -- Persistent objects and minimal evaluation for computational finance", "start": [2012, 3, 11, 11, 40, 0, 6, 71, -1], "description": "Python is great for big data and computational finance. We built the Athena system out of FOSS and custom, in-house components to create a powerful system for our in house needs. The underlying dependency graph is built from Python classes and decorated methods. The data are stored in a custom persistent object store. Developers, quants, and end users all interact with the system with Python!\r\n", "tags": "Poster, experienced", "end_iso": "2012-03-11T11:45:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Pat Miller", "start_iso": "2012-03-11T11:40:00", "room": "Poster II", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/497/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 56, 1, 59, -1], "abstract": "<p>FOSS@RIT is an applied research lab at Rochester Institute of Technology focused on promoting free/open source software and open web technologies. The lab helped create a series of classes which have resulted in several educational games and tools written in Python for the Sugar desktop environment.</p>\n<p>Of the games created through this class, there are two outstanding examples; <a href=\"http://activities.sugarlabs.org/en-US/sugar/addon/4321\">Lemonade Stand</a> and <a href=\"http://activities.sugarlabs.org/en-US/sugar/addon/4272\">Fortune Hunter</a>. Both games run a custom game engine, also written by students, to ease game development in Sugar as part of the <a href=\"http://www.rit.edu/innovationcenter/symposium/\">RIT Summer Undergraduate Research Program</a>. Both are designed to reinforce the <a href=\"http://wiki.sugarlabs.org/go/Math4Team/Resources/Curriculum_Chart\">fourth grade math standards</a> for New York and Massachusetts.</p>\n<p>Another project to come out of this class was <a href=\"http://activities.sugarlabs.org/en-US/sugar/addon/4305\">Open Video Chat (OVC)</a>, a one-to-one video conference tool for American Sign Language communication on low cost, general purpose hardware.</p>", "presenters": "Nathaniel Case, Taylor Rose", "duration": 5, "id": 211, "end": [2012, 3, 11, 11, 45, 0, 6, 71, -1], "title": "9. Developing Humanitarian Packages with Sugar and Python", "last_updated_iso": "2012-02-28T13:42:56.842462", "name": "9. Developing Humanitarian Packages with Sugar and Python", "start": [2012, 3, 11, 11, 40, 0, 6, 71, -1], "description": "FOSS@RIT is an applied research lab at Rochester Institute of Technology focused on promoting free/open source software and open web technologies. The lab helped create a series of classes which have resulted in several educational games and tools written in Python for the Sugar desktop environment. Come learn more about our students' projects and how open source can be applied in the classroom.", "tags": "Poster, novice", "end_iso": "2012-03-11T11:45:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Nathaniel Case, Taylor Rose", "start_iso": "2012-03-11T11:40:00", "room": "Poster I", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/511/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>While the accessibility of Bayesian computation has been expanded greatly by software such as BUGS and its cousins, implementing models with such tools can be tricky to code and difficult to debug. Moreover, one often wants to extend or customize the capabilities of Markov chain Monte Carlo (MCMC) samplers to suit the needs of particular problems, which is difficult in most available software. PyMC implements Bayesian statistical models and fitting algorithms, including MCMC, in Python. It offers object-oriented implementations of many samplers, which allows for maximum flexibility and extensibility and and makes it suitable for a wide range of problems. PyMC includes a large suite of well-dcumented statistical distributions, methods for summarizing output and plotting, and a range of goodness-of-fit and convergence diagnostics. Using Python's clean, concise syntax, users can efficiently code a probabilistic model and draw samples from its posterior distribution using MCMC or related techniques. PyMC models can be embedded in larger programs, and results can be analyzed with the full power of Python.</p>", "presenters": "Christopher Fonnesbeck", "duration": 5, "id": 217, "end": [2012, 3, 11, 11, 50, 0, 6, 71, -1], "title": "35. PyMC: Markov chain Monte Carlo in Python", "last_updated_iso": "2012-02-28T13:42:57.078218", "name": "35. PyMC: Markov chain Monte Carlo in Python", "start": [2012, 3, 11, 11, 45, 0, 6, 71, -1], "description": "PyMC implements a suite of Markov chain Monte Carlo (MCMC) sampling algorithms making it extremely flexible, extensible and applicable to a large suite of statistical modeling problems. PyMC's clear, concise syntax allows scientists to flexibly implement Bayesian models without hand-coding samplers.", "tags": "Poster, experienced", "end_iso": "2012-03-11T11:50:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Christopher Fonnesbeck", "start_iso": "2012-03-11T11:45:00", "room": "Poster III", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/501/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>The idea behind this poster is to show to the viewers that we can/must use Python (loaded with some scientific \u201cbatteries\u201d) to do quantitative research in the financial \u201carena\u201d. To achieve this objective, we propose us to explore the integration of specific tools like Numpy, Scipy, IPython, Matplotlib, Statsmodels and Pandas, to do time series analysis and modeling with \"real\" financial time series, in particular, we will show you how we can develop a statistical arbitrage strategy - pairs trading - implementing the search of cointegrated financial time series, characterizing and modeling the resulting stationary \u201cspread\u201d and evaluating the performance of our strategy in historical data (back-testing) and in the \u201creal\" market (forward-testing). \nOur final aim is to show to the viewers that we can use Python like a quasi-complete environment to do this kind of research, enlightening the pros and discussing the cons, and what we can hope in the future in this area.</p>", "presenters": "Dami\u00e1n Avila", "duration": 5, "id": 216, "end": [2012, 3, 11, 11, 50, 0, 6, 71, -1], "title": "22. Quantitative Finance Research with Python: Statistical arbitrage.", "last_updated_iso": "2012-02-28T13:42:58.200870", "name": "22. Quantitative Finance Research with Python: Statistical arbitrage.", "start": [2012, 3, 11, 11, 45, 0, 6, 71, -1], "description": "Recently, many projects have been developed to make Python useful to do quantitative finance research. We proposed us not only to show you the integration of these tools to perform time series analysis and modeling, but also to show you how we can search for cointegrated pairs of asset and set up a statistical arbitrage strategy - pairs trading - to get potential profit from financial market.", "tags": "Poster, novice", "end_iso": "2012-03-11T11:50:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Dami\u00e1n Avila", "start_iso": "2012-03-11T11:45:00", "room": "Poster II", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/513/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 59, 1, 59, -1], "abstract": "<p>This poster will provide an overview of the open source, NoSQL database MongoDB. In addition, it will introduce PyMongo, the Python driver for MongoDB.</p>", "presenters": "Bernie Hackett, Jesse Davis, and Dan Crosta", "duration": 5, "id": 218, "end": [2012, 3, 11, 11, 50, 0, 6, 71, -1], "title": "49. Using MongoDB with Python", "last_updated_iso": "2012-02-28T13:42:59.171140", "name": "49. Using MongoDB with Python", "start": [2012, 3, 11, 11, 45, 0, 6, 71, -1], "description": "This poster will provide an overview of the open source, NoSQL database MongoDB. In addition, it will introduce PyMongo, the Python driver for MongoDB.", "tags": "Poster, novice", "end_iso": "2012-03-11T11:50:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Bernie Hackett, Jesse Davis, and Dan Crosta", "start_iso": "2012-03-11T11:45:00", "room": "Poster IV", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/525/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 56, 1, 59, -1], "abstract": "<p>The RIT Remixerator project was conceptualized after discussion between professors at the RIT <a href=\"http://teachingopensource.org/index.php/POSSE_RIT\">Professor's Open Source Summer Experience Bootcamp</a> in 2010. The professors were able to create an initial Fedora Remix tailored to incoming RIT freshmen, but wanted a tool to customize and build remixes in the future.</p>\n<p>Through RIT's co-op program, <a href=\"http://foss.rit.edu\">FOSS@RIT</a> created an applied research opportunity for students to develop a working prototype. The position was filled in the fall quarter of 2011 by senior undergraduate computer science student Eitan Romanoff. With help from Fedora Senior Software Engineer Luke Macken, Eitan learned how to best leverage existing open source technologies and methodologies to tackle the concept. The result is the RIT Remixerator project being displayed at PyCon 2012. The RIT Remixerator allows users to customize and create a Live CD of popular linux distribution <a href=\"http://fedoraproject.org\">Fedora</a> with RIT aesthetics and a suite of applications targeted towards RIT students.</p>", "presenters": "Eitan Romanoff, Remy DeCausemaker", "duration": 5, "id": 215, "end": [2012, 3, 11, 11, 50, 0, 6, 71, -1], "title": "10. FOSS@RIT: Python-Powered Student Engagement", "last_updated_iso": "2012-02-28T13:42:56.785821", "name": "10. FOSS@RIT: Python-Powered Student Engagement", "start": [2012, 3, 11, 11, 45, 0, 6, 71, -1], "description": "FOSS@RIT is an applied research lab at Rochester Institute of Technology focused on promoting free/open source software and open web technologies. Students and staff will discuss the evolution of the lab in general, and the RIT Fedora Remixerator - a web application running on Django that allows users to create an RIT-themed Fedora LiveCD.", "tags": "Poster, novice", "end_iso": "2012-03-11T11:50:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Eitan Romanoff, Remy DeCausemaker", "start_iso": "2012-03-11T11:45:00", "room": "Poster I", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/512/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 56, 1, 59, -1], "abstract": "<h1 id=\"introduction\">Introduction</h1>\n<p>A Python framework developed for 'roundtrip' processing of an Atmospheric Lagrangian Particle Dispersion Model (LPDM) is presented.  Contents of the framework include a custom package for the generations of input and configuration files, f2py created modules for controlling program flow and reading the large volumes of output data, and processing and plotting routines for displaying the output to the web using Plone.</p>\n<h2 id=\"outline\">Outline</h2>\n<p>The talk will have three components: Development of the main processing package, development of the web-based tools for output, and an overview of the (ongoing) refactoring process.</p>\n<h3 id=\"development_of_a_python_package\">Development of a Python package</h3>\n<p>The primary codebase is a Python package that was written specifically for the processing of LPDM model output. LPDMs are used extensively in the scientific community including researchers at NASA, NOAA, and throughout Europe for forecasting and analysis of the atmospheric transport of gasses and dust. The presented package initially served to plot output data, but has grown recently in complexity and function. It now provides tools for generating input data, manipulating the model itself, and distributing jobs for parallel processing using the multiprocessing package.</p>\n<h3 id=\"giving_the_world_access\">Giving the World Access</h3>\n<p>The model data is without value if it is not available for use. Through the use of Python, we have transitioned from the generation of limited gif output files, to creating a 'Through The Web' browsing experience which allows for custom plotting of the data, cycling through model forecast products, and managing the code base.</p>\n<h3 id=\"re-lease\">'Re'-lease</h3>\n<p>The development of the package was largely a learning experience. From the time the package was originally created the developer has learned a great deal about the meaning of 'pythonic'. A large effort has been undertaken recently to refactor the code to improve it, and more importantly make it more 'team friendly' as the development efforts have grown. The package is planned to have a v1.0 release date coincident with PyCON. [Stay Tuned... ]</p>\n<h2 id=\"summary\">Summary</h2>\n<p>This talk will present the technical details of the Python package that underlies most the functionality of the code base. Further, we will present 'Lessons Learned' from the perspective of a non-expert programmer/developer and show how Python was used to replace several proprietary products in our workflow.</p>", "presenters": "John F Burkhart", "duration": 5, "id": 220, "end": [2012, 3, 11, 11, 55, 0, 6, 71, -1], "title": "23. Round the world with a million objects", "last_updated_iso": "2012-02-28T13:42:56.736833", "name": "23. Round the world with a million objects", "start": [2012, 3, 11, 11, 50, 0, 6, 71, -1], "description": "Python has provided a suite of tools required for our Lagrangian Particle Modeling Framework that is used for simulation of atmospheric transport. The Python language is used for generating input files for our FORTRAN codebase, using f2py to control several aspects of running the model and reading output, and dynamically generating content with matplotlib for web-display using Plone.", "tags": "Poster, experienced", "end_iso": "2012-03-11T11:55:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "John F Burkhart", "start_iso": "2012-03-11T11:50:00", "room": "Poster II", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/316/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 59, 1, 59, -1], "abstract": "<h2>Introduction</h2>\n<p><a href=\"http://www.aldebaran-robotics.com\">Aldebaran Robotics</a> is the world leader in humanoid robotics.\nThe company just released the latest version of the NAO robot - NAO\nNext Gen.</p>\n<p>NAO is a state-of-the-art humanoid robot with 25 degrees of freedom.\nIt comes with a complete software suite and SDK to help users\nprogramming and interacting with the robot.</p>\n<h2>Abstract</h2>\n<p>After introducing NAOqi (the programming framework used to program NAO), we will talk about the various ways you can program in Python for NAO.</p>\n<ul>\n<li>\n<p>Choregraphe: a simple, grapical way to edit movements and\n  write behaviors</p>\n</li>\n<li>\n<p>Using the Python SDK : how to access use NAOqi from Python.</p>\n</li>\n<li>\n<p>Using matplotlib for robotics research with NAO.</p>\n</li>\n</ul>", "presenters": "Dimitri Merejkowsky", "duration": 5, "id": 221, "end": [2012, 3, 11, 11, 55, 0, 6, 71, -1], "title": "36. Using Python for robotics with Aldebaran's humanoid robot NAO.", "last_updated_iso": "2012-02-28T13:42:59.204895", "name": "36. Using Python for robotics with Aldebaran's humanoid robot NAO.", "start": [2012, 3, 11, 11, 50, 0, 6, 71, -1], "description": "In this poster session, we shall review how Python can be used\r\nto control and program Aldebaran's humanoid robot NAO.\r\n", "tags": "Poster, novice", "end_iso": "2012-03-11T11:55:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Dimitri Merejkowsky", "start_iso": "2012-03-11T11:50:00", "room": "Poster III", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/524/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 56, 1, 59, -1], "abstract": "<p>Between choosing technologies, bootstrapping your company and product and hiring the critical early team, startup CTO's have their hands full. I've done it many times, and over the years I have honed my view of how to build something new from scratch. This talk will focus on the process of selecting tools and technologies, and in particular on my journey to Python as the core of my newest company. </p>\n<p>We will look at the pros and cons of:\n- Ruby\n- Java\n- C#\n- Scala\n- Python</p>\n<p>I will present some rules of thumb on how to determine when and how to sacrifice development speed for flexibility and how to future-proof early code that is often discarded as your company grows. We will explore the economics of good early choices and demonstrate that Python is an optimal choice right now.</p>", "presenters": "Andy Parsons", "duration": 5, "id": 219, "end": [2012, 3, 11, 11, 55, 0, 6, 71, -1], "title": "11. A Startup Junkie's Journey to Python via Java, C#, Ruby and Scala", "last_updated_iso": "2012-02-28T13:42:56.942386", "name": "11. A Startup Junkie's Journey to Python via Java, C#, Ruby and Scala", "start": [2012, 3, 11, 11, 50, 0, 6, 71, -1], "description": "Between choosing technologies, bootstrapping your company and product and hiring the critical early team, startup CTO's have their hands full. I've done it many times, and over the years I have honed my view of how to build something new from scratch. We'll focus on selecting tools and technologies, and on my journey to Python as the core of my newest company. ", "tags": "Poster, novice", "end_iso": "2012-03-11T11:55:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Andy Parsons", "start_iso": "2012-03-11T11:50:00", "room": "Poster I", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/499/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<h3 id=\"abstract\"><strong>Abstract</strong></h3>\n<p>Traditional solutions for data and graph analytics tend to be highly fragmented, and take the form of stand-alone frameworks. In this poster session, we shall describe our approach that is centered around a suite of advanced parallel primitives embedded within SPM.Python. These primitives augment the serial Python language with\nconcepts like\n<em> parallel generators and emitters,\n</em> parallel exceptions, and \n* parallel data structures (synchronous and asynchronous)</p>\n<p>Our solution is anchored around a basic concept called Hybrid Flow whereby, essentially, the traditional data flow is augmented with specialized form of parallel control flow. The net result is a general purpose solution that can be used to navigate a herd of compute resources across the parallel landscape in real-time.</p>\n<p>In this poster, we shall describe four very different and distinct forms of Hybrid Flows that may be used to very efficiently perform both data and graph analytics. Each flow may be implemented in Python with as little as 160 lines of code.</p>\n<h6 id=\"bap\"><strong>BAP</strong></h6>\n<p>Each resource would process its local task queue in a completely asynchronous fashion (without having to coordinate with any other resource).</p>\n<p>The local generator is designed to depopulate the local task queue. Meanwhile, the local emitter has the ability to populate the task queue of any resource. The parallel exception and data structures may be used to track some global attributes.</p>\n<h5 id=\"bspspeculative\"><strong>BSPSpeculative</strong></h5>\n<p>Each resource would process a global task queue in a synchronous fashion to enable speculative work.</p>\n<p>The global task queue is depopulated in such a manner so that all local generators return the same task. The resources are expected to apply different heuristics, options, effort level and/or algorithms to the same task.</p>\n<p>The first resource to throw the parallel exception would stop everybody else from continuing with the current task.</p>\n<h5 id=\"bsp\"><strong>BSP</strong></h5>\n<p>Each resource would process its local task queue in a synchronous fashion. In other words, all resources end up executing N global iterations in lock step. The value for N may be hard coded. Alternatively, the parallel exception may be raised by any resource to terminate early.</p>\n<p>During each global iteration, all local generators provide tasks that were generated in the last iteration, while all local emitters push new tasks that will be made available in the next iteration. Incidentally, the local emitters have the ability to populate the task queue for the next iteration of any resource.</p>\n<h5 id=\"dag\"><strong>DAG</strong></h5>\n<p>A general purpose, real-time data flow is mapped over all the compute resources; thus, enabling the processing of streams of data.</p>\n<p>At each resource, the local generator would depopulate the local task queue, while the local emitter would populate the local task queue of some resource \"down stream\" as per user defined policies (like random order, pseudo sorted, sorted, round robin).</p>\n<p>The parallel exception and data structures may be used to share knowledge across all resources.</p>", "presenters": "Minesh B Amin", "duration": 5, "id": 222, "end": [2012, 3, 11, 11, 55, 0, 6, 71, -1], "title": "48. Advanced Parallel Primitives in SPM.Python for Data and Graph Analytics", "last_updated_iso": "2012-02-28T13:42:57.471103", "name": "48. Advanced Parallel Primitives in SPM.Python for Data and Graph Analytics", "start": [2012, 3, 11, 11, 50, 0, 6, 71, -1], "description": "Traditional solutions for data and graph analytics tend to be highly fragmented, and take the form of stand-alone frameworks. In this poster session, we shall describe our approach that is centered around a suite of advanced parallel primitives embedded within SPM.Python. These primitives augment the serial Python language with concepts like parallel generators, emitters and exceptions.", "tags": "Poster, experienced", "end_iso": "2012-03-11T11:55:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Minesh B Amin", "start_iso": "2012-03-11T11:50:00", "room": "Poster IV", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/491/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>The poster will enumerate query constructs in HTSQL focusing on how it compares to SQL.<br/>\n</p>", "presenters": "Clark C. Evans", "duration": 5, "id": 226, "end": [2012, 3, 11, 12, 0, 0, 6, 71, -1], "title": "46. HTSQL : a navigational query language for relational databases", "last_updated_iso": "2012-02-28T13:42:57.030289", "name": "46. HTSQL : a navigational query language for relational databases", "start": [2012, 3, 11, 11, 55, 0, 6, 71, -1], "description": "This poster will cover a description of the HTSQL query language (http://htsql.org). ", "tags": "Poster, experienced", "end_iso": "2012-03-11T12:00:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Clark C. Evans", "start_iso": "2012-03-11T11:55:00", "room": "Poster IV", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/523/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<h1 id=\"indico_-_a_scientific_collaboration_platform\">Indico - A Scientific Collaboration Platform</h1>\n<p><a href=\"http://indico-software.org\">Indico</a> is an open source content management system developed at the European Organization for Nuclear Research (<a href=\"http://www.cern.ch\">CERN</a>) and currently used in more than <a href=\"http://indico-software.org/wiki/IndicoWorldWide\">90 scientific institutions world-wide</a>. Indico provides a multitude of features to conference/meeting organizers, merging the capabilities of a powerful CMS with a calendaring layer, thus allowing users to keep track of past and future meetings, and to quickly access all the resources concerning a particular event. Other very useful features include:</p>\n<ul>\n<li>Conference registration &amp; e-payment integration;</li>\n<li>Paper/abstract reviewing;</li>\n<li>Integration with chat (XMPP) systems;</li>\n<li>Integration with videoconferencing/webcasting applications;</li>\n<li>Room booking module;</li>\n<li>Drag&amp;drop timetable editing;</li>\n<li>Event reminders &amp; alarms (scheduler);</li>\n<li>Extensible via plugin subsystem;</li>\n</ul>\n<p>At <a href=\"http://indico.cern.ch\">CERN alone</a>, Indico serves a community of around 10.000 users, with ~15.000 different visitors per day (~1 M hits). It hosts more than 150.000 events, made of around 700.000 individual contributions/talks and ~900.000 files. It has become part of \"CERN speech\" - \"look it up on Indico\" is almost as obvious as \"Google it\" around here.</p>\n<p>But Indico is as well an indispensable tool in the realm of High Energy Physics, going far beyond the borders of this organization. Institutions such as Fermilab, MIT and IHEP (China) are using it for their own meetings/conferences.</p>\n<p>The system is <a href=\"https://github.com/indico/indico\">fully written in Python and JavaScript</a>, using ZODB as its database back-end. It is a perfect example of how Python-related technologies can be used to build powerful web applications that empower scientific research and collaboration.</p>", "presenters": "Pedro Ferreira", "duration": 5, "id": 224, "end": [2012, 3, 11, 12, 0, 0, 6, 71, -1], "title": "24. Indico - A Scientific Collaboration Platform ", "last_updated_iso": "2012-02-28T13:42:57.490764", "name": "24. Indico - A Scientific Collaboration Platform ", "start": [2012, 3, 11, 11, 55, 0, 6, 71, -1], "description": "Indico is an open source CMS developed at CERN and currently used in more than 90 scientific institutions world-wide. Indico provides a multitude of features to conference/meeting organizers, merging the capabilities of a powerful CMS with a calendaring layer, thus allowing users to keep track of past and future meetings, and to quickly access all the resources concerning a particular event.", "tags": "Poster, experienced", "end_iso": "2012-03-11T12:00:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Pedro Ferreira", "start_iso": "2012-03-11T11:55:00", "room": "Poster II", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/490/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 56, 1, 59, -1], "abstract": "<ul>\n<li>What is 508</li>\n<li>Why bother?</li>\n<li>Visual compliance</li>\n<li>The blind and screen readers <ul>\n<li>Color blind and picking your colors</li>\n<li>Helping the vision impaired</li>\n</ul>\n</li>\n<li>Auditory compliance<ul>\n<li>Captioning</li>\n<li>Bells, dings, and buzzes!</li>\n</ul>\n</li>\n<li>Physical compliance<ul>\n<li>Designing for physically disabled</li>\n<li>Access keys</li>\n</ul>\n</li>\n<li>Resources</li>\n</ul>", "presenters": "Katie Cunningham", "duration": 5, "id": 223, "end": [2012, 3, 11, 12, 0, 0, 6, 71, -1], "title": "12. Accessibility and You", "last_updated_iso": "2012-02-28T13:42:56.612832", "name": "12. Accessibility and You", "start": [2012, 3, 11, 11, 55, 0, 6, 71, -1], "description": "An introduction into the world of 508 compliance.", "tags": "Poster, novice", "end_iso": "2012-03-11T12:00:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Katie Cunningham", "start_iso": "2012-03-11T11:55:00", "room": "Poster I", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/100/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 56, 1, 59, -1], "abstract": "<p><a href=\"http://www.youtube.com/watch?v=x2e73HraePY\"><img src=\"https://s3.amazonaws.com/bitbeam/bitbeambot.png\" alt=\"BitbeamBot\" title=\"BitbeamBot\"/></a></p>\n<p>(Watch the <a href=\"http://www.youtube.com/watch?v=x2e73HraePY\">video of BitbeamBot playing Angry Birds</a>.)</p>\n<p>For the confidence that your mobile app truly works, you need an end-to-end test on an actual device. This means the full combination of device manufacturer, operating system, data network, and application. And since mobile devices were meant to be handled with the human hand, you need something like a real hand to do real end-to-end testing. At some point, after lots of repetitive manual testing, the inevitable questions is asked \"Can we / should we automate the testing of the old features, so I can focus the manual testing effort on the new features?\" </p>\n<p>That's where the BitbeamBot comes in. BitbeamBot is an Arduino-powered open-source hardware CNC robot that can test any application on any mobile device -- touching the screen of a mobile device just like a user would. It also uses Python and the Selenium automation API to work its magic. In the future your testing will be automated... with robots.</p>\n<p>At the moment, BitbeamBot is just a prototype, but it can play games with simple mechanics, like Angry Birds. However, it's not very smart; it can't yet \"see\" where objects are on the screen. From my computer, I send electrical signals to two motors to move the pin over any point on an iPhone screen. I then use a third motor to move the pin down to the screen surface and click or drag objects. This open loop, flying-blind approach to automation is how automated software testing was done years ago. It's the worst way to automate. Without any sense of what's actually visible on screen, the script will fail when there's a discrepancy between what's actually on the screen and what you expected to be on screen at the time you wrote the automation script.</p>\n<p>A better approach to testing with BitbeamBot will involve closing the feedback loop and have software determine where to click based on what is actually on screen. There are two styles I'll experiment with: black box and grey box. Black box testing is easier to get started with, but grey box testing is more stable long term. </p>\n<p>Black box testing requires no internal knowledge of the application. It treats the application like a metaphorical \"black box\". If something is not visible via the user interface, it doesn't exist. To get this approach to work with BitbeamBot, I'll place a camera over the phone, send the image to my computer, and use an image-based testing tool like Sikuli. Sikuli works by taking a screenshot and then using the OpenCV image recognition library to find elements like text or buttons in the screenshot. </p>\n<p>The other style is grey box testing. It's a more precise approach, but it requires access to and internal knowledge of the application. I'll implement this approach by extending the Selenium library and tethering the phone to my computer via a USB cable. With the USB debugging interface turned on, I can ask the application precisely which elements are on screen, and where they are before moving the BitbeamBot pin to the right location. </p>\n<p>BitbeamBot's home is <a href=\"http://bitbeam.org\">bitbeam.org</a>. The hardware, software, and mechanical designs are open source and available on <a href=\"https://github.com/hugs/bitbeam\">github</a>.</p>", "presenters": "Jason Huggins", "duration": 5, "id": 225, "end": [2012, 3, 11, 12, 0, 0, 6, 71, -1], "title": "37. Building a Robot that Can Play Angry Birds on a Smartphone (or Robots are the Future of Testing)", "last_updated_iso": "2012-02-28T13:42:56.709634", "name": "37. Building a Robot that Can Play Angry Birds on a Smartphone (or Robots are the Future of Testing)", "start": [2012, 3, 11, 11, 55, 0, 6, 71, -1], "description": "A poster session for a hands-on demo of \"BitbeamBot\". It started as an art project, but it has a much more serious practical application: mobile web testing. To trust that your mobile app truly works, you need an end-to-end test on the actual device. BitbeamBot is an Arduino-powered open-source hardware CNC robot that can test any application on any mobile device. ", "tags": "Poster, novice", "end_iso": "2012-03-11T12:00:00", "room_name": "Expo Hall", "conf_key": "", "released": true, "authors": "Jason Huggins", "start_iso": "2012-03-11T11:55:00", "room": "Poster III", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/471/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 6, 18, 18, 21, 0, 37, -1], "abstract": null, "presenters": "", "duration": 10, "id": 167, "end": [2012, 3, 11, 12, 10, 0, 6, 71, -1], "title": "Introduction and Welcome", "last_updated_iso": [2012, 2, 6, 18, 18, 21, 0, 37, -1], "name": "Introduction and Welcome", "start": [2012, 3, 11, 12, 0, 0, 6, 71, -1], "description": "", "tags": "plenary", "end_iso": "2012-03-11T12:10:00", "conf_key": "", "released": true, "authors": "", "start_iso": "2012-03-11T12:00:00", "room": "Plenary", "license": "", "url": null, "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 6, 18, 18, 21, 0, 37, -1], "abstract": null, "presenters": "", "duration": 50, "id": 168, "end": [2012, 3, 11, 13, 0, 0, 6, 71, -1], "title": "Keynote: Guido Van Rossum", "last_updated_iso": [2012, 2, 6, 18, 18, 21, 0, 37, -1], "name": "Keynote: Guido Van Rossum", "start": [2012, 3, 11, 12, 10, 0, 6, 71, -1], "description": "", "tags": "plenary", "end_iso": "2012-03-11T13:00:00", "conf_key": "", "released": true, "authors": "", "start_iso": "2012-03-11T12:10:00", "room": "Plenary", "license": "", "url": null, "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 6, 18, 18, 21, 0, 37, -1], "abstract": null, "presenters": "", "duration": 90, "id": 172, "end": [2012, 3, 11, 15, 0, 0, 6, 71, -1], "title": "Poster Session", "last_updated_iso": [2012, 2, 6, 18, 18, 21, 0, 37, -1], "name": "Poster Session", "start": [2012, 3, 11, 13, 30, 0, 6, 71, -1], "description": "", "tags": "plenary", "end_iso": "2012-03-11T15:00:00", "conf_key": "", "released": true, "authors": "", "start_iso": "2012-03-11T13:30:00", "room": "Plenary", "license": "", "url": null, "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>Pyramid is a very flexible framework, but when dealing with large projects and multiple developers it pays to establish a few ground rules and follow some conventions.</p>\n<p>Karl is one of the largest Pyramid applications in production. It actually guided the development of repoze.BFG, the ancestor of Pyramid. We'll use the Karl code base to illustrate some of the patterns that were used both to organize the project and deal with a large user base.</p>\n<p>KARL is an open source web system for collaboration, organizational intranets, and knowledge management. Developed by the Open Society Foundations (OSF), it was first introduced to the market in 2008, and is now used by many international organizations, such as OXFAM GB, and OSF.</p>\n<p>Not everything discussed will be based on Karl, though. There are some key questions about how to define a project that are common to any Pyramid development, such as which persistence system to use and whether to go with traversal or URL dispatch. I'll cover a few of those questions on the first segment.</p>\n<p>Among the things that will be covered are:</p>\n<ul>\n<li>\n<p>Hard questions you need to answer before beginning your project. Pyramid offer many configuration possibilities and I'll go into them briefly. Tips for how to assemble your toolkit, how to choose a persistence backend, whether to use traversal or routes, how to handle authentication and authorization and how to layout the project. (8 min.)</p>\n</li>\n<li>\n<p>Views. Pyramid has a very strong view configuration system. I'll cover how to take advantage of it, how to use predicates effectively and how to create custom predicates. People usually find themselves having to pass lots of information to the templates, so I'll discuss an strategy to deal with this. (7 min.)</p>\n</li>\n<li>\n<p>Code patterns. I'll single out some useful patterns from karl and discuss them briefly. (8 min.)</p>\n</li>\n<li>\n<p>Deployment and maintenance. There are also many options for this (e.g. Nginx or mod_wsgi, use buildout or not, useful deployment tools)and I'll go over them quickly. (5 min.)</p>\n</li>\n</ul>", "presenters": "Carlos de la Guardia", "duration": 30, "id": 146, "end": [2012, 3, 11, 15, 30, 0, 6, 71, -1], "title": "Patterns for building large Pyramid applications", "last_updated_iso": "2012-02-28T13:42:57.873443", "name": "Patterns for building large Pyramid applications", "start": [2012, 3, 11, 15, 0, 0, 6, 71, -1], "description": "Pyramid is a very flexible framework, but when dealing with large projects and multiple developers it pays to establish a few ground rules and follow some conventions. In this talk we'll discuss some patterns for organizing and developing a large Pyramid application.", "tags": "Talk, intermediate", "end_iso": "2012-03-11T15:30:00", "room_name": "Grand Ballroom F/E", "conf_key": "", "released": true, "authors": "Carlos de la Guardia", "start_iso": "2012-03-11T15:00:00", "room": "Track V (E4)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/153/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>Some languages were designed to be parsed. The most obvious example is Lisp and its relatives which are practically parsed when they hit the page. However, many others\u2014including most wiki grammars\u2014grow organically and get turned into HTML by sedimentary strata of regular expressions, all backtracking and warring with one another, making it difficult to output other formats or make changes to the language.</p>\n<p>We will explore the tools and techniques necessary to attack one of the hairiest lingual challenges out there: MediaWiki syntax. Join me for an introduction to the general classes of parsing algorithms, from the birth of the field to the state of the art. Learn how to pick the right one. Have a comparative look at a dozen different Python parsing toolkits. And finally, learn some optimization tricks to get a grammar going at a reasonable clip.</p>", "presenters": "Erik Rose", "duration": 30, "id": 123, "end": [2012, 3, 11, 15, 30, 0, 6, 71, -1], "title": "Parsing Horrible Things with Python", "last_updated_iso": "2012-02-28T13:42:58.151108", "name": "Parsing Horrible Things with Python", "start": [2012, 3, 11, 15, 0, 0, 6, 71, -1], "description": "If you've ever wanted to get started with parsers, here's your chance for a ground-floor introduction. A harebrained spare-time project gives birth to a whirlwind journey from basic algorithms to Python libraries and, at last, to a parser for one of the craziest syntaxes out there: the MediaWiki grammar that drives Wikipedia.", "tags": "Talk, novice", "end_iso": "2012-03-11T15:30:00", "room_name": "Grand Ballroom H/G", "conf_key": "", "released": true, "authors": "Erik Rose", "start_iso": "2012-03-11T15:00:00", "room": "Track IV (E3)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/468/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>Building a better mousetrap is rarely accomplished in one zenlike moment of clarity\u2014like all creative processes, it is iterative. Sketches are those iterations for things we can see and interact with. They are the key tool used to explore ideas and decide if they have merit; they are just as important in deciding what <em>not</em> to pursue.</p>\n<p>A good sketch is crude and fast. It isn\u2019t necessarily pretty, and more often than not, it consists of just boxes and lines, rarely with color. It doesn\u2019t matter what tools you use, so long as you can do it fast and get your ideas out where everybody can see them. It doesn\u2019t matter if you can\u2019t draw, because everybody can draw boxes and lines.</p>\n<p>This talk will cover sketching as a tool in the interface design process, including both the <em>why</em> and the <em>how</em> of sketches. It will include practical techniques for sucking less at making the kind of sketches that are useful for decisionmaking, as well as tips on simple sketching methods to make it feel like an interface.</p>", "presenters": "Idan Gazit", "duration": 30, "id": 54, "end": [2012, 3, 11, 15, 30, 0, 6, 71, -1], "title": "Sketching a Better Product", "last_updated_iso": "2012-02-28T13:42:58.671559", "name": "Sketching a Better Product", "start": [2012, 3, 11, 15, 0, 0, 6, 71, -1], "description": "If writing is a means for organizing your thoughts, then sketching is a means for organizing your thoughts visually. Just as good writing requires drafts, good design requires sketches: low-investment, low-resolution braindumps. Learn how to use ugly sketching to iterate your way to a better product.", "tags": "Talk, novice", "end_iso": "2012-03-11T15:30:00", "room_name": "Mission City Ballroom", "conf_key": "", "released": true, "authors": "Idan Gazit", "start_iso": "2012-03-11T15:00:00", "room": "Track I (D5)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/301/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>This talk targets software developers of Python apps published to an international audience, such as developers of web and desktop apps, games, and frameworks such as Django, presenting and demo-ing a painless way to get their apps localized.</p>\n<p>We will briefly introduce software localization (L10n): what it is, why it matters and how it's being done with Gettext and libraries like babel. </p>\n<p>We'll then present <a href=\"https://www.transifex.net/\">Transifex</a>, a Django-based open-source social localization tool, which developers use to integrate localization in their workflow and reach out to an established community of translators.</p>", "presenters": "Dimitris Glezos", "duration": 30, "id": 77, "end": [2012, 3, 11, 15, 30, 0, 6, 71, -1], "title": "Transifex: Beautiful Python app localization", "last_updated_iso": "2012-02-28T13:42:57.575085", "name": "Transifex: Beautiful Python app localization", "start": [2012, 3, 11, 15, 0, 0, 6, 71, -1], "description": "Localization of Python apps used to be hard, but not any more. This talk will offer a short intro on software localization in Python and discuss today's best practices. It will present Transifex, a modern, Django-based SaaS, also referred to as 'The Github of translations', used by 2.000 open-source projects including Django, Mercurial, Fedora and Firefox.", "tags": "Talk, experienced", "end_iso": "2012-03-11T15:30:00", "room_name": "Grand Ballroom A/B", "conf_key": "", "released": true, "authors": "Dimitris Glezos", "start_iso": "2012-03-11T15:00:00", "room": "Track II (E1)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/482/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>Much of the power of GIMP, the GNU Image Manipulation program, comes from its plug-in architecture. Most of the functions you use in GIMP, including everything in the Filters menu, are plug-ins.</p>\n<p>In this session, you'll learn how to write GIMP plug-ins in Python using the PyGIMP package. Python is rapidly becoming the language of choice for GIMP plug-ins because of its flexibility and clean API.  You'll see how Python's access to raw pixel data in an image gives it a huge advantage over GIMP's other scripting language, Script-fu, and how you can use Python-GTK and Python's wealth of other libraries to create user interfaces far beyond GIMP's usual plug-in dialogs.</p>\n<p>Basic Python knowledge is assumed, and familiarity with GIMP at a user level is helpful, but you don't need advanced knowledge of either one to write useful GIMP plug-ins.</p>", "presenters": "Akkana Peck", "duration": 30, "id": 100, "end": [2012, 3, 11, 15, 30, 0, 6, 71, -1], "title": "Writing GIMP Plug-ins in Python", "last_updated_iso": "2012-02-28T13:42:58.739245", "name": "Writing GIMP Plug-ins in Python", "start": [2012, 3, 11, 15, 0, 0, 6, 71, -1], "description": "Learn how to write Python plug-ins for GIMP, the GNU Image Manipulation Program. With PyGIMP, you can automate simple image processing tasks in just a few lines of PyGIMP, develop elaborate plug-ins that do low-level pixel manipulation, or anything in between.", "tags": "Talk, experienced", "end_iso": "2012-03-11T15:30:00", "room_name": "Grand Ballroom C/D", "conf_key": "", "released": true, "authors": "Akkana Peck", "start_iso": "2012-03-11T15:00:00", "room": "Track III (E2)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/157/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<h1 id=\"overview\">Overview</h1>\n<p>Python has a powerful and mature suite tools of tools for \"freezing\" your python scripts into a stand-alone application, including py2exe, py2app, cxfreeze, bbfeezee and PyInstaller.  But there's more to shipping a stand-alone app than just running py2exe over your code.</p>\n<p>This talk will show you the tools you can use to make your frozen apps better in a variety of small yet important ways.</p>\n<p>Want to deploy automatic updates?  The \"<a href=\"http://pypi.python.org/pypi/esky\">esky</a>\" package provides a simple API for building, publishing and installing updates, and jumps through all the hoops needed to ensure failed updates won't leave your program unusable.</p>\n<p>Need to run on older versions of OSX or ancient linux boxes?  The \"<a href=\"http://pypi.python.org/pypi/myppy\">myppy</a>\" package can build a python runtime optimized for portable deployment and binary compatibility with older systems.</p>\n<p>Want to add code-signing for that professional touch?  The \"<a href=\"http://pypi.python.org/pypi/signedimp\">signedimp</a>\" package provides cross-platform hooks for code signing and extends the protection to code loaded at runtime.</p>\n<p>Each of these tools has been extracted from a real-life build process for a complex cross-platform application, and each is designed to help make your frozen applications just that little bit better.</p>\n<h1 id=\"outline\">Outline</h1>\n<ul>\n<li>introduction: the basics of \"freezing\" your app, with a quick <a href=\"http://py2exe.org\">py2exe</a> demo</li>\n<li>what do I know about this anyway?<ul>\n<li>built \"saltdrive\":  <a href=\"http://www.saltdrive.com\">http://www.saltdrive.com</a></li>\n<li>a cross-platform app run from a USB stick</li>\n<li>plug it in, double-click, and it has to work anywhere - windows, linux or mac, any version</li>\n<li>that's hard :-)</li>\n<li>all these tools where extracted from the saltdrive build process</li>\n</ul>\n</li>\n<li>automatic updates with <a href=\"http://pypi.python.org/pypi/esky\">esky</a><ul>\n<li>why are automatic updates important?</li>\n<li>getting it right is hard; esky gets it right so you don't have to</li>\n<li>converting an app from py2exe to esky</li>\n<li>demo of building, deploying and installing an updated version</li>\n<li>patch-based updates</li>\n</ul>\n</li>\n<li>binary compatibility with <a href=\"http://pypi.python.org/pypi/myppy\">myppy</a><ul>\n<li>win32 developers have it easy</li>\n<li>OSX tries hard to get your programs using new APIs; Linux is even worse</li>\n<li>building on a newer platform and deploying to an older platform requires careful management of compiler flags, library paths etc</li>\n<li>myppy is a suite of recipes to do this for python</li>\n<li>think of it as compiling a virtualenv from source, optimized for portability</li>\n<li>demo of use on Linux</li>\n</ul>\n</li>\n<li>code signing with <a href=\"http://pypi.python.org/pypi/signedimp\">signedimp</a><ul>\n<li>code signing is becoming more important - think the scary \"untrusted program\" popups in Windows</li>\n<li>but code signing is useless if you load untrusted code at runtime</li>\n<li>signedimp gives you an API to sign an entire frozen application, including the library.zip and C extension modules</li>\n<li>and an importhook that prevents loading of unsigned code at runtime</li>\n</ul>\n</li>\n<li>conclusion<ul>\n<li>lots of little things can add up to a much better user experience</li>\n<li>I'm sure everyone has their own little suite of tools for tweaking their frozen apps</li>\n<li>lets keep building up the public repository of knowledge and tools in this area</li>\n</ul>\n</li>\n</ul>", "presenters": "Ryan Kelly", "duration": 40, "id": 55, "end": [2012, 3, 11, 17, 10, 0, 6, 71, -1], "title": "Deep Freeze: building better stand-alone apps with Python", "last_updated_iso": "2012-02-28T13:42:58.756810", "name": "Deep Freeze: building better stand-alone apps with Python", "start": [2012, 3, 11, 16, 30, 0, 6, 71, -1], "description": "There's more to shipping a stand-alone python app than just running py2exe over your code.  Want to deploy automatic updates?  Want to be sure it runs on legacy platforms?  Want to add professional touches like code signing?  And want to do this all in a cross-platform manner?  This talk will show you the tools you can use to make your frozen apps better in a variety of small yet important ways.", "tags": "Talk, intermediate", "end_iso": "2012-03-11T17:10:00", "room_name": "Mission City Ballroom", "conf_key": "", "released": true, "authors": "Ryan Kelly", "start_iso": "2012-03-11T16:30:00", "room": "Track I (D5)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/393/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>It's often said that we've passed the point where we're surprised about where Python is being used.  From satellites out in space to fighter jets much closer to earth, Python is everywhere, so it's no surprise it appears on Windows desktops. However, did you know CPython's Windows installers are downloaded almost 1.5 million times every month? Let's take a look at what's going into nearly 18 million downloads per year, especially the upcoming CPython 3.3.</p>\n<h3 id=\"the_download_numbers\">The Download Numbers</h3>\n<p>A look into the python.org <a href=\"http://i.imgur.com/SLFDL.png\">download numbers</a> shows some interesting trends (based on an in-progress sample), including the doubling of 3.x downloads with the release of 3.2. Let's take a look at what the release calendar means for download rates, and what the future looks like for 3.3.</p>\n<h3 id=\"installer_changes\">Installer Changes</h3>\n<p>For years, users have been asking for Python's addition to the system path and countless guides have been written to help users figure out how to do that. The rise of freely available Python education materials has steadily increased the amount of first-timers around the community, many whom see immediate failure by typing \"python\" at a command prompt only to get an error message. Python should be as helpful as possible and provide sensible options at install time, and with Python 3.3, we're bringing you the ability to add Python to the system path, complete with a quick demo and explanation of the options.</p>\n<h3 id=\"new_and_recent_features\">New and Recent Features</h3>\n<p>As nearly all of the CPython developers are on Linux-based systems, features tend to show up there first while Windows plays catch-up. Python 3.2 added Windows implementations of os.symlink for Windows Vista and beyond, os.kill using control handlers, and several others, and 3.3 will try to fill in more gaps.</p>\n<h3 id=\"pep_3151httpwwwpythonorgdevpepspep-3151__changes_to_windowserror\"><a href=\"http://www.python.org/dev/peps/pep-3151/\" title=\"\">PEP 3151</a> Changes to WindowsError</h3>\n<p>If you've written cross-platform code that needs to handle WindowsError, you've probably done a few dances to properly handle it. PEP 3151 reworks the OS and and IO exception hierarchy and makes some changes to how WindowsError works, so we'll look into what it means for your code.</p>\n<h3 id=\"pep_397httpwwwpythonorgdevpepspep-0397__launcher\"><a href=\"http://www.python.org/dev/peps/pep-0397/\" title=\"\">PEP 397</a> Launcher</h3>\n<p>Bringing Linux-like shebang functionality to a Windows computer near you. The ability to launch the proper 2 or 3 interpreter based on a hint in your code is just another way to ease startup issues for users, so we'll take a look at what's going on there.</p>\n<h3 id=\"alternative_implementations_on_windows_quick_mention_likely_ironpython_focused\">Alternative Implementations on Windows (quick mention, likely IronPython focused)</h3>\n<p>IronPython is caught up on the 2.7 line and working towards a 3.x release.</p>", "presenters": "Brian Curtin", "duration": 40, "id": 78, "end": [2012, 3, 11, 17, 10, 0, 6, 71, -1], "title": "What's New in Python on Windows", "last_updated_iso": "2012-02-28T13:42:58.268927", "name": "What's New in Python on Windows", "start": [2012, 3, 11, 16, 30, 0, 6, 71, -1], "description": "With nearly 1.5 million downloads per month, the CPython installers for Windows account for a huge amount of the traffic through python.org, and they're the most common way for Windows users to obtain Python. Take a look at what's going on with Python on Windows and see what the road ahead looks like for Python 3.3.", "tags": "Talk, novice", "end_iso": "2012-03-11T17:10:00", "room_name": "Grand Ballroom A/B", "conf_key": "", "released": true, "authors": "Brian Curtin", "start_iso": "2012-03-11T16:30:00", "room": "Track II (E1)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/274/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>Most free software projects make large, unstated assumptions about the background knowledge and experience of newcomers. Because the people who typically write tutorials or setup documentation for a project are veteran developers intimately familiar with the particulars of the project, it is unfortunately easy to gloss over material or forget the sorts of things that are likely to confuse or turn off newcomers. (How many free software projects assume that newcomers have expertise in bash, or previous experience in distributed version control, or knowledge of how to write a good bug report?) Left to their own devices, everyone designs for people like themselves--not just in software or design, but in documentation as well!</p>\n<p>The solution to this problem is twofold: one, ideally, to \"user test\" one's entry-level documentation by watching a newcomer attempt to use it and note where they get stuck; and two, more generally, to remember what it was like to be a beginning programmer and/or to make your first free software contribution and accordingly to intentionally cultivate empathy for and consciousness of that state of being.</p>\n<p>For this talk, we will take as an example the official Django tutorial. Django as a project has a reputation for prioritizing having high-quality and complete documentation far higher than many other FOSS projects. However, despite this high prioritization, even Django's tutorial has significant issues in terms of how well it serves new web programmers; it is primarily targeted as experienced web developers and operates better as an advertisement rather than as a how-to. As a result, it misrepresents or omits entirely whole swaths of knowledge which would be key to a newer web developer actually succeeding with Django. </p>\n<p>In this talk, we use the perspective of a web development novice to go through the official Django tutorial, point out omissions and common sticking points, and suggest ways to improve.</p>\n<h1 id=\"outline\">Outline:</h1>\n<h2 id=\"our_hypothetical_newcomer\">Our hypothetical newcomer</h2>\n<ul>\n<li>Imagine a novice programmer--let's say, a CS undergraduate--coming to the Django tutorial for the first time</li>\n<li>Fluent in Python and perhaps a couple other languages</li>\n<li>New to web programming</li>\n<li>Little experience reusing other people's code</li>\n<li>Lots of experience <em>using</em> web applications, some sense of their user-facing capabilities</li>\n<li>No direct experience using SQL / databases</li>\n</ul>\n<h2 id=\"critical_look_at_the_django_tutorial\">Critical look at the Django tutorial</h2>\n<h3 id=\"missing_concepts\">Missing concepts</h3>\n<ul>\n<li>Projects vs. apps: \"what's the difference, and why do I care?\"</li>\n<li>Relatedly, reusing other people's apps -- resources and best practices</li>\n<li>Test driven development -- \"what's this tests.py thing for?\"</li>\n</ul>\n<h3 id=\"missing_features\">Missing features</h3>\n<ul>\n<li>The biggest \"gotcha\": handling database schema changes (aka \"What do you mean I can't edit my models anymore?\")</li>\n<li>HOWTO debug -- \"what do I do when something goes wrong?\"</li>\n<li>User-facing CRUD -- Tutorial emphasizes built-in admin, but most modern web apps focus on user-generated content instead; \"how do I do that in Django?\"</li>\n<li>Static file handling and template inheritance -- what would a \"Django for designers\" guide look like?</li>\n</ul>\n<h3 id=\"assumed_knowledge\">Assumed knowledge</h3>\n<ul>\n<li>HOWTO install Django safely (e.g., virtualenv)</li>\n<li>HOWTO deploy to an actual server (even \"just\" a hosted cloud solution like heroku or ep.io) -- aka \"How do I show off this cool app I made to my friends?\"</li>\n</ul>\n<h2 id=\"historical_perspective_on_why_the_tutorial_is_this_way\">Historical perspective on why the tutorial is this way</h2>\n<ul>\n<li>In 2005, Django's audience was mostly intermediate-to-advanced programmers who were familiar with older, more minimal Python web frameworks</li>\n<li>Django was originally developed for newspapers, hence the admin app emphasis</li>\n</ul>\n<h2 id=\"lessons\">Lessons</h2>\n<ul>\n<li>Remember, and be empathetic to, the kinds of mistakes you used to make before you became an experienced coder. Don't remember? Find someone who does!</li>\n<li>Link to third-party add-ons that improve the project (e.g., South for migrations)</li>\n<li>Be aware of your dependencies -- not just technical ones, but knowledge ones as well</li>\n<li>And link to third-party tutorials or other resources that teach those well! (e.g. debugging tools, deployment info)</li>\n<li>A tutorial can't cover <em>everything</em>, but it can at least mention nearly everything, with links for further details. A newbie doesn't know an important aspect of your framework exists unless you tell them--blind searching doesn't work very well.</li>\n<li>Know who you are writing for -- and say so.</li>\n</ul>", "presenters": "Karen Rustad", "duration": 40, "id": 101, "end": [2012, 3, 11, 17, 10, 0, 6, 71, -1], "title": "Improving Documentation with \"Beginner's Mind\" (or: Fixing the Django Tutorial)", "last_updated_iso": "2012-02-28T13:42:58.006164", "name": "Improving Documentation with \"Beginner's Mind\" (or: Fixing the Django Tutorial)", "start": [2012, 3, 11, 16, 30, 0, 6, 71, -1], "description": "This talk evaluates a well-known free software tutorial (the official Django tutorial) from the perspective of a web development novice in order to point out omissions and common sticking points and suggest improvements. More generally, this talk is useful to anyone looking to improve their project's tutorials and other newcomer-targeted documentation by approaching them with \"beginner's mind\".", "tags": "Talk, novice", "end_iso": "2012-03-11T17:10:00", "room_name": "Grand Ballroom C/D", "conf_key": "", "released": true, "authors": "Karen Rustad", "start_iso": "2012-03-11T16:30:00", "room": "Track III (E2)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/422/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>This talk is a longer version of a talk given at the Python Meetup in San Francisco in July 2011.</p>\n<p>A copy of the slides of that talk can be found <a href=\"http://dl.dropbox.com/u/18065445/Slides/PySFTalkSlides.pdf\">here</a></p>\n<p>In this talk we will provide an overview of some of the web2py design decisions and its newest features. In particular we will discuss which design decisions were inspired by other frameworks (Django, Turbogears, Flask) and which were not and why.</p>\n<p>This talk will be an occasion to acknowledge the importance played by other frameworks in the design of web2py and thank them. It will also be a way to explain the motivation behind some of the controversial design decisions and which unique features in web2py depend on them.</p>", "presenters": "Massimo Di Pierro", "duration": 40, "id": 147, "end": [2012, 3, 11, 17, 10, 0, 6, 71, -1], "title": "web2py: ideas we stole and ideas we had", "last_updated_iso": "2012-02-28T13:42:58.855769", "name": "web2py: ideas we stole and ideas we had", "start": [2012, 3, 11, 16, 30, 0, 6, 71, -1], "description": "In this talk we will provide an overview of some of the web2py design decisions and its newest features. In particular we will discuss which design decisions were inspired by other frameworks (Django, Turbogears, Flask) and which were not and why.", "tags": "Talk, experienced", "end_iso": "2012-03-11T17:10:00", "room_name": "Grand Ballroom F/E", "conf_key": "", "released": true, "authors": "Massimo Di Pierro", "start_iso": "2012-03-11T16:30:00", "room": "Track V (E4)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/112/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<ul>\n<li>Core concepts</li>\n<li>Terminology</li>\n<li>Document-based</li>\n<li>Show basic starting code for a document</li>\n<li>Inverted Index</li>\n<li>Show a simple inverted index class</li>\n<li>Stemming</li>\n<li>N-gram</li>\n<li>Show a tokenizer/n-gram processor</li>\n<li>Fields</li>\n<li>Show a document handler which ties it all together</li>\n<li>Searching</li>\n<li>Show a simple searcher (&amp; the whole thing working together)</li>\n<li>Faceting (likely no demo)</li>\n<li>Boost (likely no demo)</li>\n<li>More Like This</li>\n<li>Wrap up</li>\n<li>Point to the GitHub repo for the sample code</li>\n</ul>", "presenters": "Daniel Lindsley", "duration": 40, "id": 124, "end": [2012, 3, 11, 17, 10, 0, 6, 71, -1], "title": "Building A Python-Based Search Engine", "last_updated_iso": "2012-02-28T13:42:57.655312", "name": "Building A Python-Based Search Engine", "start": [2012, 3, 11, 16, 30, 0, 6, 71, -1], "description": "Search is an increasingly common request in all types of applications as the amount of data all of us deal with continues to grow. The technology/architecture behind search engines is wildly different from what\r\nmany developers expect. This talk will give a solid grounding in the fundamentals of providing search using Python to flesh out these concepts in a simple library.", "tags": "Talk, intermediate", "end_iso": "2012-03-11T17:10:00", "room_name": "Grand Ballroom H/G", "conf_key": "", "released": true, "authors": "Daniel Lindsley", "start_iso": "2012-03-11T16:30:00", "room": "Track IV (E3)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/66/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 57, 1, 59, -1], "abstract": "<p>NLTK is a fantastic library with broad capabilities.  But often I find that I want something that will just do what I want without my having to figure out all of the details.  An example of this is sentence parsing.  A quick google search for parsing sentences with NLTK returns a number of articles describing how to write your own grammar and define a parser based on that grammar and parse sentences.  This is great for toy problems and education, but if you actually need to parse sentences \"from the wild,\" writing your own grammar is a huge undertaking.</p>\n<p>Enter Linkgrammar.  Linkgrammar was developed at Carnegie Melon university and is now maintained by the developers of Abiword as the basis for their grammar checking capabilities.  It works nicely out of the box and is tolerant of irregularities found in authentic text.</p>\n<p>Here's a rough draft of the structure of the talk:</p>\n<h1>Intro</h1>\n<ul>\n<li>Introduction to the talk, with overview of structure</li>\n<li>Discuss NLTK and acknowledge all that it offers</li>\n<li>Show examples of code found on the Internet to create a simple parser with NLTK</li>\n<li>Show code snippet parsing sentence with pylinkgrammar</li>\n</ul>\n<h1>A quick demonstration of the Linkgrammar Python bindings</h1>\n<ul>\n<li>Existing bindings were simple SWIG wrapping of C library.  I have expanded these bindings to offer a more Pythonic interface.</li>\n<li>Show examples: Simple sentences first</li>\n<li>Links between words have different types and there is a set of rules defining which words and what type of words can have certain links between each other</li>\n<li>Show example: slightly more complex versions of initial sentence to indicate differences in link types</li>\n<li>Show examples of using different parsing options</li>\n<li>Show examples of generating constituent trees</li>\n</ul>\n<h1>Linkgrammar in greater depth (supported by Python code examples as appropriate)</h1>\n<ul>\n<li>Discuss history/background of linkgrammar system: developed at CMU, now maintained by AbiWord and used in the RelEx project and others</li>\n<li>What is a Link Grammar and why is it different than other approaches?</li>\n<li>Most parsing systems create constituent phrase trees; show examples</li>\n<li>Describe the rules Linkgrammar uses to make links between words</li>\n<li>Show examples of defining a grammar</li>\n<li>Post processing of these linkages allows for standard constituent phrase tree to be created.</li>\n<li>Show more examples of constituent phrase trees</li>\n</ul>\n<h1>The Future</h1>\n<ul>\n<li>What needs to be done?</li>\n<li>How can you help?</li>\n</ul>", "presenters": "Jeff Elmore", "duration": 45, "id": 125, "end": [2012, 3, 11, 17, 55, 0, 6, 71, -1], "title": "Parsing sentences with the OTHER natural language tool: LinkGrammar", "last_updated_iso": "2012-02-28T13:42:57.739767", "name": "Parsing sentences with the OTHER natural language tool: LinkGrammar", "start": [2012, 3, 11, 17, 10, 0, 6, 71, -1], "description": "Many of you are probably familiar with NLTK, the wonderful Natural Language Toolkit for Python.  You may not be familiar with Linkgrammar, which is a sentence parsing system created at Carnegie Melon university.  Linkgrammar is quite robust and works \"out of the box\" in a way that NLTK does not for sentence parsing.", "tags": "Talk, novice", "end_iso": "2012-03-11T17:55:00", "room_name": "Grand Ballroom H/G", "conf_key": "", "released": true, "authors": "Jeff Elmore", "start_iso": "2012-03-11T17:10:00", "room": "Track IV (E3)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/187/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>If you have ever seen the error \u201cUndefined symbol\u201d when running a Python program, then you have encountered dynamic linking: a feature of modern operating systems by which they minimize program size and maximize the memory shared between processes, but that requires software to have been compiled against exactly the right version of a third party library.</p>\n<p>This talk will tackle modern operating system memory management from the ground up, steadily building a picture of its impact on Python performance. By considering how this very limited resource is partitioned and managed by the operating system, we will arrive at very specific recommendations about how your Python program should be debugged, deployed, and monitored.</p>\n<p>Many topics will be covered:</p>\n<ol>\n<li>\n<p><strong>The invention of virtual memory.</strong> The memory space of each Python process is a fiction sustained by the operating system and processor hardware. Why is this fiction, which originated in the 1960s, necessary? What does it accomplish? How much does it cost? And which parts of your Python application are allocated to the text segment, the stack, and the heap?</p>\n</li>\n<li>\n<p><strong>Memory, caching, and swap.</strong> We will examine the hierarchy of storage media on a modern computer system, and how quickly costs grow as information moves several levels from the processor. We will contrast swap, which persists physical memory pages not currently in active use, with disk buffers by which information already on disk is brought much closer to the processor. When a machine beings thrashing, we will learn, our Python application gets clobbered.</p>\n</li>\n<li>\n<p><strong>Linking to shared libraries.</strong> To avoid the expense of recompiling large programs, programmers invented <em>linking</em> so that they could combine pre-compiled objects together. After looking at how symbol tables are used in static linking, we will explore what happens when linking takes place at runtime instead \u2014 and how disk space and physical memory can be saved as a result. This will teach us why \u201cdev\u201d packages are so often necessary to compile Python extensions, and why undefined symbols result when libraries are missing, or we try to mix-and-match shared library versions.</p>\n</li>\n<li>\n<p><strong>Measuring the Memory Footprint.</strong> Stepping back to see how these pieces fit together to produce a typical Python process, we will learn how to measure its memory usage as best we can. Basic tools like \u201ctop\u201d and the Windows Tasklist will be examined, as well as more low-level tools like the /proc filesystem and tools like ps_mem.py.</p>\n</li>\n<li>\n<p><strong>Taking Control of Compilation.</strong> What if you want to make your own decisions about what the Python interpreter does and does not include? What if you want to include a library statically to give you safety and portability, and give up the benefits of dynamic linking? We will answer these questions by looking at how Python itself, and also individual extension modules, can choose to statically link against important libraries instead of leaving them dynamic \u2014 our specific example will be my <code>pyzmq-static</code> package on PyPI. Finally, we will consider how forking on Linux can result in a set of Python processes with as much memory in common as possible, so long as the application is careful to generate as much shared state as possible before the fork.</p>\n</li>\n</ol>", "presenters": "Brandon Rhodes", "duration": 45, "id": 56, "end": [2012, 3, 11, 17, 55, 0, 6, 71, -1], "title": "Python, Linkers, and Virtual Memory", "last_updated_iso": "2012-02-28T13:42:58.332144", "name": "Python, Linkers, and Virtual Memory", "start": [2012, 3, 11, 17, 10, 0, 6, 71, -1], "description": "Why does \u201ctop\u201d show that your Python process uses 110\u00a0MB of virtual memory but has a resident set size of 9\u00a0MB? Does it consume more memory to spawn several interpreters, or to run one Python and have it fork() further workers? What is an \u201cundefined symbol,\u201d anyway? Learn about how an operating system manages memory, loads shared libraries, and what this means for Python servers and applications.", "tags": "Talk, experienced", "end_iso": "2012-03-11T17:55:00", "room_name": "Mission City Ballroom", "conf_key": "", "released": true, "authors": "Brandon Rhodes", "start_iso": "2012-03-11T17:10:00", "room": "Track I (D5)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/455/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 56, 1, 59, -1], "abstract": "<p>Lots of Interesting stuff has gone into Python Standard library in 2.7, 3.1, 3.2 and 3.3 release. Some interesting features that went in really make programmers life easy and it can bring in a 'wow' factor to their code. Additionally, it can also help the external library developers to relook at the their libraries to use new facilities available from standard library modules.</p>\n<p>This talk distills stuff from What's new document from 2.7, 3.2 and 3.3 and presents some of the choicest new features from Python standard library. Since a lots has gone in since 2.7, focus would be given to those which have had good discussion in tracker or in python-dev and would in general was a most sought out one.</p>", "presenters": "Senthil Kumaran", "duration": 45, "id": 79, "end": [2012, 3, 11, 17, 55, 0, 6, 71, -1], "title": "What's new and interesting in standard library", "last_updated_iso": "2012-02-28T13:42:56.777534", "name": "What's new and interesting in standard library", "start": [2012, 3, 11, 17, 10, 0, 6, 71, -1], "description": "This talk distills some intereting stuff from What's new document from 2.7, 3.2 and upcoming 3.3 release. Look out for those new arguments to your favorite methods, functions add the wow! factor to your code. Heard of @lru_cache?\r\n", "tags": "Talk, intermediate", "end_iso": "2012-03-11T17:55:00", "room_name": "Grand Ballroom A/B", "conf_key": "", "released": true, "authors": "Senthil Kumaran", "start_iso": "2012-03-11T17:10:00", "room": "Track II (E1)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/303/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>The Boston Python Workshop is a project-driven introduction to Python for women and their friends. It has run 6 times with the Boston Python User Group in the last 12 months, bringing over 200 women into the local Python community. By being fully integrated into the main user group, the workshop has helped the user group grow to over 1700 members and consistently draw over 15% women at its events. We'll talk about lessons learned running the workshop, the dramatic effect it has had on the Boston Python User Group, and what it takes to run an outreach event in your city.</p>\n<p>To see how it works, check out a <a href=\"http://openhatch.org/wiki/Boston_Python_Workshop_4\" title=\"http://openhatch.org/wiki/Boston_Python_Workshop_4\">sample curriculum and schedule</a>. You can also see photos of our <a href=\"http://www.flickr.com/photos/paulproteus/6211671756/in/set-72157627817424148/\" title=\"http://www.flickr.com/photos/paulproteus/6211671756/in/set-72157627817424148/\">lecture</a> and <a href=\"http://www.flickr.com/photos/paulproteus/sets/72157627686489123/\" title=\"http://www.flickr.com/photos/paulproteus/sets/72157627686489123/\">hands-on project time</a>.</p>\n<h5 id=\"what_and_why\">What and why</h5>\n<ul>\n<li>\n<p>Workshop motivation and goals</p>\n</li>\n<li>\n<p>Workshop structure</p>\n</li>\n<li>\n<p>Lessons learned running intro events and outreach events focused on women</p>\n</li>\n</ul>\n<h5 id=\"how_the_workshop_changed_the_local_user_group\">How the workshop changed the local user group</h5>\n<ul>\n<li>\n<p>How we got to &gt; 15% women at all events</p>\n</li>\n<li>\n<p>Becoming beginner-friendly</p>\n</li>\n<li>\n<p>Python Project Nights</p>\n</li>\n<li>\n<p>User group growth and becoming a community for more than just professional programmers</p>\n</li>\n</ul>\n<h5 id=\"beyond_boston\">Beyond Boston</h5>\n<ul>\n<li>\n<p>PyStar, PyLadies</p>\n</li>\n<li>\n<p>Sharing resources across the globe</p>\n</li>\n</ul>\n<h5 id=\"your_turn\">Your turn</h5>\n<ul>\n<li>\n<p>What does it take to run a workshop in \nyour city?</p>\n</li>\n<li>\n<p>Make one happen</p>\n</li>\n</ul>", "presenters": "Jessica McKellar, Asheesh Laroia", "duration": 45, "id": 102, "end": [2012, 3, 11, 17, 55, 0, 6, 71, -1], "title": "Diversity in practice: How the Boston Python User Group grew to 1700 people and over 15% women", "last_updated_iso": "2012-02-28T13:42:58.985573", "name": "Diversity in practice: How the Boston Python User Group grew to 1700 people and over 15% women", "start": [2012, 3, 11, 17, 10, 0, 6, 71, -1], "description": "How do you bring more women into programming communities with long-term, measurable results? In this talk we'll analyze our successful effort, the Boston Python Workshop, which brought over 200 women into Boston's Python community this year. We'll talk about lessons learned running the workshop, the dramatic effect it has had on the local user group, and how to run a workshop in your city.", "tags": "Talk, experienced", "end_iso": "2012-03-11T17:55:00", "room_name": "Grand Ballroom C/D", "conf_key": "", "released": true, "authors": "Jessica McKellar, Asheesh Laroia", "start_iso": "2012-03-11T17:10:00", "room": "Track III (E2)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/168/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 13, 42, 58, 1, 59, -1], "abstract": "<p>Tornado, often thought of as a web development framework and toolset is built on top of a protocol-agnostic IOLoop, presenting an alternative to Twisted as a foundation for asynchronous application development in Python. This talk covers the Tornado IOLoop, its features and the process of writing drivers and applications using it.</p>\n<h1>Outline</h1>\n<p>(30 Minutes)</p>\n<ul>\n<li>tornado.IOLoop and tornado.IOStream Introduction (5 Minutes)</li>\n<li>Building an event driven server using IOStream (10 Minutes)</li>\n<li>Options for Socket Reading<ul>\n<li>read_until_regex, read_until, ready_bytes, read_until close</li>\n</ul>\n</li>\n<li>Callbacks and handling events</li>\n<li>Inspecting state</li>\n<li>SSL streams</li>\n<li>Diving Deeper, Using the IOLoop Directly (10 Minutes)</li>\n<li>Registering events on the loop<ul>\n<li>When data is available</li>\n<li>When we can write to the socket</li>\n<li>When there are errors on the socket</li>\n</ul>\n</li>\n<li>Using timers, timeouts and callbacks</li>\n<li>Inspecting the stack and debugging</li>\n<li>Performance Considerations and Closing (5 Minutes)</li>\n</ul>", "presenters": "Gavin M. Roy", "duration": 45, "id": 148, "end": [2012, 3, 11, 17, 55, 0, 6, 71, -1], "title": "More than just a pretty web framework, the Tornado IOLoop", "last_updated_iso": "2012-02-28T13:42:58.159707", "name": "More than just a pretty web framework, the Tornado IOLoop", "start": [2012, 3, 11, 17, 10, 0, 6, 71, -1], "description": "Tornado, often thought of as a web development framework and toolset is built on top of a protocol-agnostic IOLoop, presenting an alternative to Twisted as a foundation for asynchronous application development in Python. This talk covers the Tornado IOLoop, its features and the process of writing drivers and applications using it.", "tags": "Talk, intermediate", "end_iso": "2012-03-11T17:55:00", "room_name": "Grand Ballroom F/E", "conf_key": "", "released": true, "authors": "Gavin M. Roy", "start_iso": "2012-03-11T17:10:00", "room": "Track V (E4)", "license": "", "url": "http://us.pycon.org/2012/schedule/presentation/328/", "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 15, 17, 12, 20, 2, 46, -1], "abstract": null, "presenters": "", "duration": 5, "id": 178, "end": [2012, 3, 11, 18, 0, 0, 6, 71, -1], "title": "Closing Address", "last_updated_iso": [2012, 2, 15, 17, 12, 20, 2, 46, -1], "name": "Closing Address", "start": [2012, 3, 11, 17, 55, 0, 6, 71, -1], "description": "", "tags": "plenary", "end_iso": "2012-03-11T18:00:00", "conf_key": "", "released": true, "authors": "", "start_iso": "2012-03-11T17:55:00", "room": "Plenary", "license": "", "url": null, "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 28, 12, 22, 25, 1, 59, -1], "abstract": null, "presenters": "", "duration": 90, "id": 174, "end": [2012, 3, 11, 19, 30, 0, 6, 71, -1], "title": "Sunday Afternoon Lightning talks (90 minutes)", "last_updated_iso": [2012, 2, 28, 12, 22, 25, 1, 59, -1], "name": "Sunday Afternoon Lightning talks (90 minutes)", "start": [2012, 3, 11, 18, 0, 0, 6, 71, -1], "description": "", "tags": "plenary", "end_iso": "2012-03-11T19:30:00", "conf_key": "", "released": true, "authors": "", "start_iso": "2012-03-11T18:00:00", "room": "Plenary", "license": "", "url": null, "conf_url": "", "contact": ""}, {"last_updated": [2012, 2, 6, 18, 18, 21, 0, 37, -1], "abstract": null, "presenters": "", "duration": 30, "id": 175, "end": [2012, 3, 11, 20, 0, 0, 6, 71, -1], "title": "Intro to Sprints", "last_updated_iso": [2012, 2, 6, 18, 18, 21, 0, 37, -1], "name": "Intro to Sprints", "start": [2012, 3, 11, 19, 30, 0, 6, 71, -1], "description": "", "tags": "plenary", "end_iso": "2012-03-11T20:00:00", "conf_key": "", "released": true, "authors": "", "start_iso": "2012-03-11T19:30:00", "room": "Plenary", "license": "", "url": null, "conf_url": "", "contact": ""}]